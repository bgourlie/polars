Search.setIndex({"docnames": ["index", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_global_string_cache", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_utf8_tables", "reference/api/polars.Config.unset_global_string_cache", "reference/api/polars.DataFrame", "reference/api/polars.DataFrame.apply", "reference/api/polars.DataFrame.cleared", "reference/api/polars.DataFrame.clone", "reference/api/polars.DataFrame.columns", "reference/api/polars.DataFrame.describe", "reference/api/polars.DataFrame.drop", "reference/api/polars.DataFrame.drop_in_place", "reference/api/polars.DataFrame.drop_nulls", "reference/api/polars.DataFrame.dtypes", "reference/api/polars.DataFrame.estimated_size", "reference/api/polars.DataFrame.explode", "reference/api/polars.DataFrame.extend", "reference/api/polars.DataFrame.fill_nan", "reference/api/polars.DataFrame.fill_null", "reference/api/polars.DataFrame.filter", "reference/api/polars.DataFrame.find_idx_by_name", "reference/api/polars.DataFrame.fold", "reference/api/polars.DataFrame.frame_equal", "reference/api/polars.DataFrame.get_column", "reference/api/polars.DataFrame.get_columns", "reference/api/polars.DataFrame.groupby", "reference/api/polars.DataFrame.groupby_dynamic", "reference/api/polars.DataFrame.groupby_rolling", "reference/api/polars.DataFrame.hash_rows", "reference/api/polars.DataFrame.head", "reference/api/polars.DataFrame.height", "reference/api/polars.DataFrame.hstack", "reference/api/polars.DataFrame.insert_at_idx", "reference/api/polars.DataFrame.interpolate", "reference/api/polars.DataFrame.is_duplicated", "reference/api/polars.DataFrame.is_empty", "reference/api/polars.DataFrame.is_unique", "reference/api/polars.DataFrame.join", "reference/api/polars.DataFrame.join_asof", "reference/api/polars.DataFrame.lazy", "reference/api/polars.DataFrame.limit", "reference/api/polars.DataFrame.max", "reference/api/polars.DataFrame.mean", "reference/api/polars.DataFrame.median", "reference/api/polars.DataFrame.melt", "reference/api/polars.DataFrame.min", "reference/api/polars.DataFrame.n_chunks", "reference/api/polars.DataFrame.null_count", "reference/api/polars.DataFrame.partition_by", "reference/api/polars.DataFrame.pipe", "reference/api/polars.DataFrame.pivot", "reference/api/polars.DataFrame.product", "reference/api/polars.DataFrame.quantile", "reference/api/polars.DataFrame.rechunk", "reference/api/polars.DataFrame.rename", "reference/api/polars.DataFrame.replace", "reference/api/polars.DataFrame.replace_at_idx", "reference/api/polars.DataFrame.reverse", "reference/api/polars.DataFrame.row", "reference/api/polars.DataFrame.rows", "reference/api/polars.DataFrame.sample", "reference/api/polars.DataFrame.schema", "reference/api/polars.DataFrame.select", "reference/api/polars.DataFrame.shape", "reference/api/polars.DataFrame.shift", "reference/api/polars.DataFrame.shift_and_fill", "reference/api/polars.DataFrame.shrink_to_fit", "reference/api/polars.DataFrame.slice", "reference/api/polars.DataFrame.sort", "reference/api/polars.DataFrame.std", "reference/api/polars.DataFrame.sum", "reference/api/polars.DataFrame.tail", "reference/api/polars.DataFrame.take_every", "reference/api/polars.DataFrame.to_arrow", "reference/api/polars.DataFrame.to_dict", "reference/api/polars.DataFrame.to_dicts", "reference/api/polars.DataFrame.to_dummies", "reference/api/polars.DataFrame.to_numpy", "reference/api/polars.DataFrame.to_pandas", "reference/api/polars.DataFrame.to_series", "reference/api/polars.DataFrame.to_struct", "reference/api/polars.DataFrame.transpose", "reference/api/polars.DataFrame.unique", "reference/api/polars.DataFrame.unnest", "reference/api/polars.DataFrame.unstack", "reference/api/polars.DataFrame.upsample", "reference/api/polars.DataFrame.var", "reference/api/polars.DataFrame.vstack", "reference/api/polars.DataFrame.width", "reference/api/polars.DataFrame.with_column", "reference/api/polars.DataFrame.with_columns", "reference/api/polars.DataFrame.with_row_count", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.Expr", "reference/api/polars.Expr.abs", "reference/api/polars.Expr.agg_groups", "reference/api/polars.Expr.alias", "reference/api/polars.Expr.all", "reference/api/polars.Expr.any", "reference/api/polars.Expr.append", "reference/api/polars.Expr.apply", "reference/api/polars.Expr.arccos", "reference/api/polars.Expr.arccosh", "reference/api/polars.Expr.arcsin", "reference/api/polars.Expr.arcsinh", "reference/api/polars.Expr.arctan", "reference/api/polars.Expr.arctanh", "reference/api/polars.Expr.arg_max", "reference/api/polars.Expr.arg_min", "reference/api/polars.Expr.arg_sort", "reference/api/polars.Expr.arg_unique", "reference/api/polars.Expr.argsort", "reference/api/polars.Expr.arr", "reference/api/polars.Expr.backward_fill", "reference/api/polars.Expr.cast", "reference/api/polars.Expr.cat", "reference/api/polars.Expr.ceil", "reference/api/polars.Expr.clip", "reference/api/polars.Expr.clip_max", "reference/api/polars.Expr.clip_min", "reference/api/polars.Expr.cos", "reference/api/polars.Expr.cosh", "reference/api/polars.Expr.count", "reference/api/polars.Expr.cumcount", "reference/api/polars.Expr.cummax", "reference/api/polars.Expr.cummin", "reference/api/polars.Expr.cumprod", "reference/api/polars.Expr.cumsum", "reference/api/polars.Expr.cumulative_eval", "reference/api/polars.Expr.diff", "reference/api/polars.Expr.dot", "reference/api/polars.Expr.drop_nans", "reference/api/polars.Expr.drop_nulls", "reference/api/polars.Expr.dt", "reference/api/polars.Expr.entropy", "reference/api/polars.Expr.ewm_mean", "reference/api/polars.Expr.ewm_std", "reference/api/polars.Expr.ewm_var", "reference/api/polars.Expr.exclude", "reference/api/polars.Expr.exp", "reference/api/polars.Expr.explode", "reference/api/polars.Expr.extend_constant", "reference/api/polars.Expr.fill_nan", "reference/api/polars.Expr.fill_null", "reference/api/polars.Expr.filter", "reference/api/polars.Expr.first", "reference/api/polars.Expr.flatten", "reference/api/polars.Expr.floor", "reference/api/polars.Expr.forward_fill", "reference/api/polars.Expr.hash", "reference/api/polars.Expr.head", "reference/api/polars.Expr.inspect", "reference/api/polars.Expr.interpolate", "reference/api/polars.Expr.is_between", "reference/api/polars.Expr.is_duplicated", "reference/api/polars.Expr.is_finite", "reference/api/polars.Expr.is_first", "reference/api/polars.Expr.is_in", "reference/api/polars.Expr.is_infinite", "reference/api/polars.Expr.is_nan", "reference/api/polars.Expr.is_not", "reference/api/polars.Expr.is_not_nan", "reference/api/polars.Expr.is_not_null", "reference/api/polars.Expr.is_null", "reference/api/polars.Expr.is_unique", "reference/api/polars.Expr.keep_name", "reference/api/polars.Expr.kurtosis", "reference/api/polars.Expr.last", "reference/api/polars.Expr.len", "reference/api/polars.Expr.limit", "reference/api/polars.Expr.list", "reference/api/polars.Expr.log", "reference/api/polars.Expr.log10", "reference/api/polars.Expr.lower_bound", "reference/api/polars.Expr.map", "reference/api/polars.Expr.map_alias", "reference/api/polars.Expr.max", "reference/api/polars.Expr.mean", "reference/api/polars.Expr.median", "reference/api/polars.Expr.min", "reference/api/polars.Expr.mode", "reference/api/polars.Expr.n_unique", "reference/api/polars.Expr.null_count", "reference/api/polars.Expr.over", "reference/api/polars.Expr.pct_change", "reference/api/polars.Expr.pow", "reference/api/polars.Expr.prefix", "reference/api/polars.Expr.product", "reference/api/polars.Expr.quantile", "reference/api/polars.Expr.rank", "reference/api/polars.Expr.rechunk", "reference/api/polars.Expr.reinterpret", "reference/api/polars.Expr.repeat_by", "reference/api/polars.Expr.reshape", "reference/api/polars.Expr.reverse", "reference/api/polars.Expr.rolling_apply", "reference/api/polars.Expr.rolling_max", "reference/api/polars.Expr.rolling_mean", "reference/api/polars.Expr.rolling_median", "reference/api/polars.Expr.rolling_min", "reference/api/polars.Expr.rolling_quantile", "reference/api/polars.Expr.rolling_skew", "reference/api/polars.Expr.rolling_std", "reference/api/polars.Expr.rolling_sum", "reference/api/polars.Expr.rolling_var", "reference/api/polars.Expr.round", "reference/api/polars.Expr.sample", "reference/api/polars.Expr.search_sorted", "reference/api/polars.Expr.set_sorted", "reference/api/polars.Expr.shift", "reference/api/polars.Expr.shift_and_fill", "reference/api/polars.Expr.shuffle", "reference/api/polars.Expr.sign", "reference/api/polars.Expr.sin", "reference/api/polars.Expr.sinh", "reference/api/polars.Expr.skew", "reference/api/polars.Expr.slice", "reference/api/polars.Expr.sort", "reference/api/polars.Expr.sort_by", "reference/api/polars.Expr.sqrt", "reference/api/polars.Expr.std", "reference/api/polars.Expr.str", "reference/api/polars.Expr.suffix", "reference/api/polars.Expr.sum", "reference/api/polars.Expr.tail", "reference/api/polars.Expr.take", "reference/api/polars.Expr.take_every", "reference/api/polars.Expr.tan", "reference/api/polars.Expr.tanh", "reference/api/polars.Expr.to_physical", "reference/api/polars.Expr.top_k", "reference/api/polars.Expr.unique", "reference/api/polars.Expr.unique_counts", "reference/api/polars.Expr.upper_bound", "reference/api/polars.Expr.value_counts", "reference/api/polars.Expr.var", "reference/api/polars.Expr.where", "reference/api/polars.LazyFrame.cache", "reference/api/polars.LazyFrame.cleared", "reference/api/polars.LazyFrame.clone", "reference/api/polars.LazyFrame.collect", "reference/api/polars.LazyFrame.describe_optimized_plan", "reference/api/polars.LazyFrame.describe_plan", "reference/api/polars.LazyFrame.drop", "reference/api/polars.LazyFrame.drop_nulls", "reference/api/polars.LazyFrame.explode", "reference/api/polars.LazyFrame.fetch", "reference/api/polars.LazyFrame.fill_nan", "reference/api/polars.LazyFrame.fill_null", "reference/api/polars.LazyFrame.filter", "reference/api/polars.LazyFrame.first", "reference/api/polars.LazyFrame.from_json", "reference/api/polars.LazyFrame.groupby", "reference/api/polars.LazyFrame.groupby_dynamic", "reference/api/polars.LazyFrame.groupby_rolling", "reference/api/polars.LazyFrame.head", "reference/api/polars.LazyFrame.inspect", "reference/api/polars.LazyFrame.interpolate", "reference/api/polars.LazyFrame.join", "reference/api/polars.LazyFrame.join_asof", "reference/api/polars.LazyFrame.last", "reference/api/polars.LazyFrame.limit", "reference/api/polars.LazyFrame.map", "reference/api/polars.LazyFrame.max", "reference/api/polars.LazyFrame.mean", "reference/api/polars.LazyFrame.median", "reference/api/polars.LazyFrame.melt", "reference/api/polars.LazyFrame.min", "reference/api/polars.LazyFrame.pipe", "reference/api/polars.LazyFrame.profile", "reference/api/polars.LazyFrame.quantile", "reference/api/polars.LazyFrame.read_json", "reference/api/polars.LazyFrame.rename", "reference/api/polars.LazyFrame.reverse", "reference/api/polars.LazyFrame.select", "reference/api/polars.LazyFrame.shift", "reference/api/polars.LazyFrame.shift_and_fill", "reference/api/polars.LazyFrame.show_graph", "reference/api/polars.LazyFrame.slice", "reference/api/polars.LazyFrame.sort", "reference/api/polars.LazyFrame.std", "reference/api/polars.LazyFrame.sum", "reference/api/polars.LazyFrame.tail", "reference/api/polars.LazyFrame.take_every", "reference/api/polars.LazyFrame.unique", "reference/api/polars.LazyFrame.unnest", "reference/api/polars.LazyFrame.var", "reference/api/polars.LazyFrame.with_column", "reference/api/polars.LazyFrame.with_columns", "reference/api/polars.LazyFrame.with_context", "reference/api/polars.LazyFrame.with_row_count", "reference/api/polars.LazyFrame.write_json", "reference/api/polars.Series", "reference/api/polars.Series.abs", "reference/api/polars.Series.alias", "reference/api/polars.Series.all", "reference/api/polars.Series.any", "reference/api/polars.Series.append", "reference/api/polars.Series.apply", "reference/api/polars.Series.arccos", "reference/api/polars.Series.arccosh", "reference/api/polars.Series.arcsin", "reference/api/polars.Series.arcsinh", "reference/api/polars.Series.arctan", "reference/api/polars.Series.arctanh", "reference/api/polars.Series.arg_max", "reference/api/polars.Series.arg_min", "reference/api/polars.Series.arg_sort", "reference/api/polars.Series.arg_true", "reference/api/polars.Series.arg_unique", "reference/api/polars.Series.argsort", "reference/api/polars.Series.arr", "reference/api/polars.Series.cast", "reference/api/polars.Series.cat", "reference/api/polars.Series.ceil", "reference/api/polars.Series.chunk_lengths", "reference/api/polars.Series.cleared", "reference/api/polars.Series.clip", "reference/api/polars.Series.clip_max", "reference/api/polars.Series.clip_min", "reference/api/polars.Series.clone", "reference/api/polars.Series.cos", "reference/api/polars.Series.cosh", "reference/api/polars.Series.cummax", "reference/api/polars.Series.cummin", "reference/api/polars.Series.cumprod", "reference/api/polars.Series.cumsum", "reference/api/polars.Series.cumulative_eval", "reference/api/polars.Series.describe", "reference/api/polars.Series.diff", "reference/api/polars.Series.dot", "reference/api/polars.Series.drop_nans", "reference/api/polars.Series.drop_nulls", "reference/api/polars.Series.dt", "reference/api/polars.Series.dtype", "reference/api/polars.Series.entropy", "reference/api/polars.Series.estimated_size", "reference/api/polars.Series.ewm_mean", "reference/api/polars.Series.ewm_std", "reference/api/polars.Series.ewm_var", "reference/api/polars.Series.exp", "reference/api/polars.Series.explode", "reference/api/polars.Series.extend_constant", "reference/api/polars.Series.fill_nan", "reference/api/polars.Series.fill_null", "reference/api/polars.Series.filter", "reference/api/polars.Series.flags", "reference/api/polars.Series.floor", "reference/api/polars.Series.has_validity", "reference/api/polars.Series.hash", "reference/api/polars.Series.head", "reference/api/polars.Series.inner_dtype", "reference/api/polars.Series.interpolate", "reference/api/polars.Series.is_boolean", "reference/api/polars.Series.is_datelike", "reference/api/polars.Series.is_duplicated", "reference/api/polars.Series.is_empty", "reference/api/polars.Series.is_finite", "reference/api/polars.Series.is_first", "reference/api/polars.Series.is_float", "reference/api/polars.Series.is_in", "reference/api/polars.Series.is_infinite", "reference/api/polars.Series.is_nan", "reference/api/polars.Series.is_not_nan", "reference/api/polars.Series.is_not_null", "reference/api/polars.Series.is_null", "reference/api/polars.Series.is_numeric", "reference/api/polars.Series.is_unique", "reference/api/polars.Series.is_utf8", "reference/api/polars.Series.kurtosis", "reference/api/polars.Series.len", "reference/api/polars.Series.limit", "reference/api/polars.Series.log", "reference/api/polars.Series.log10", "reference/api/polars.Series.max", "reference/api/polars.Series.mean", "reference/api/polars.Series.median", "reference/api/polars.Series.min", "reference/api/polars.Series.mode", "reference/api/polars.Series.n_chunks", "reference/api/polars.Series.n_unique", "reference/api/polars.Series.name", "reference/api/polars.Series.null_count", "reference/api/polars.Series.pct_change", "reference/api/polars.Series.peak_max", "reference/api/polars.Series.peak_min", "reference/api/polars.Series.product", "reference/api/polars.Series.quantile", "reference/api/polars.Series.rank", "reference/api/polars.Series.rechunk", "reference/api/polars.Series.reinterpret", "reference/api/polars.Series.rename", "reference/api/polars.Series.reshape", "reference/api/polars.Series.reverse", "reference/api/polars.Series.rolling_apply", "reference/api/polars.Series.rolling_max", "reference/api/polars.Series.rolling_mean", "reference/api/polars.Series.rolling_median", "reference/api/polars.Series.rolling_min", "reference/api/polars.Series.rolling_quantile", "reference/api/polars.Series.rolling_skew", "reference/api/polars.Series.rolling_std", "reference/api/polars.Series.rolling_sum", "reference/api/polars.Series.rolling_var", "reference/api/polars.Series.round", "reference/api/polars.Series.sample", "reference/api/polars.Series.search_sorted", "reference/api/polars.Series.series_equal", "reference/api/polars.Series.set", "reference/api/polars.Series.set_at_idx", "reference/api/polars.Series.set_sorted", "reference/api/polars.Series.shape", "reference/api/polars.Series.shift", "reference/api/polars.Series.shift_and_fill", "reference/api/polars.Series.shrink_to_fit", "reference/api/polars.Series.shuffle", "reference/api/polars.Series.sign", "reference/api/polars.Series.sin", "reference/api/polars.Series.sinh", "reference/api/polars.Series.skew", "reference/api/polars.Series.slice", "reference/api/polars.Series.sort", "reference/api/polars.Series.sqrt", "reference/api/polars.Series.std", "reference/api/polars.Series.str", "reference/api/polars.Series.sum", "reference/api/polars.Series.tail", "reference/api/polars.Series.take", "reference/api/polars.Series.take_every", "reference/api/polars.Series.tan", "reference/api/polars.Series.tanh", "reference/api/polars.Series.time_unit", "reference/api/polars.Series.to_arrow", "reference/api/polars.Series.to_dummies", "reference/api/polars.Series.to_frame", "reference/api/polars.Series.to_list", "reference/api/polars.Series.to_numpy", "reference/api/polars.Series.to_pandas", "reference/api/polars.Series.to_physical", "reference/api/polars.Series.top_k", "reference/api/polars.Series.unique", "reference/api/polars.Series.unique_counts", "reference/api/polars.Series.value_counts", "reference/api/polars.Series.var", "reference/api/polars.Series.view", "reference/api/polars.Series.zip_with", "reference/api/polars.StringCache", "reference/api/polars.all", "reference/api/polars.any", "reference/api/polars.apply", "reference/api/polars.arange", "reference/api/polars.arg_where", "reference/api/polars.argsort_by", "reference/api/polars.avg", "reference/api/polars.col", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.concat_list", "reference/api/polars.concat_str", "reference/api/polars.count", "reference/api/polars.cov", "reference/api/polars.cut", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.datatypes.get_idx_type", "reference/api/polars.date", "reference/api/polars.date_range", "reference/api/polars.datetime", "reference/api/polars.duration", "reference/api/polars.element", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.NotFoundError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.exclude", "reference/api/polars.first", "reference/api/polars.fold", "reference/api/polars.format", "reference/api/polars.from_arrow", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.groups", "reference/api/polars.head", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg_list", "reference/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/api/polars.internals.dataframe.groupby.GroupBy.pivot", "reference/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/api/polars.internals.dataframe.pivot.PivotOps.count", "reference/api/polars.internals.dataframe.pivot.PivotOps.first", "reference/api/polars.internals.dataframe.pivot.PivotOps.last", "reference/api/polars.internals.dataframe.pivot.PivotOps.max", "reference/api/polars.internals.dataframe.pivot.PivotOps.mean", "reference/api/polars.internals.dataframe.pivot.PivotOps.median", "reference/api/polars.internals.dataframe.pivot.PivotOps.min", "reference/api/polars.internals.dataframe.pivot.PivotOps.sum", "reference/api/polars.internals.expr.categorical.ExprCatNameSpace.set_ordering", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.day", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.days", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hour", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hours", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minute", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.month", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.second", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.week", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.year", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_max", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_min", "reference/api/polars.internals.expr.list.ExprListNameSpace.concat", "reference/api/polars.internals.expr.list.ExprListNameSpace.contains", "reference/api/polars.internals.expr.list.ExprListNameSpace.diff", "reference/api/polars.internals.expr.list.ExprListNameSpace.eval", "reference/api/polars.internals.expr.list.ExprListNameSpace.first", "reference/api/polars.internals.expr.list.ExprListNameSpace.get", "reference/api/polars.internals.expr.list.ExprListNameSpace.head", "reference/api/polars.internals.expr.list.ExprListNameSpace.join", "reference/api/polars.internals.expr.list.ExprListNameSpace.last", "reference/api/polars.internals.expr.list.ExprListNameSpace.lengths", "reference/api/polars.internals.expr.list.ExprListNameSpace.max", "reference/api/polars.internals.expr.list.ExprListNameSpace.mean", "reference/api/polars.internals.expr.list.ExprListNameSpace.min", "reference/api/polars.internals.expr.list.ExprListNameSpace.reverse", "reference/api/polars.internals.expr.list.ExprListNameSpace.shift", "reference/api/polars.internals.expr.list.ExprListNameSpace.slice", "reference/api/polars.internals.expr.list.ExprListNameSpace.sort", "reference/api/polars.internals.expr.list.ExprListNameSpace.sum", "reference/api/polars.internals.expr.list.ExprListNameSpace.tail", "reference/api/polars.internals.expr.list.ExprListNameSpace.to_struct", "reference/api/polars.internals.expr.list.ExprListNameSpace.unique", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.output_name", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.pop", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.root_names", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases", "reference/api/polars.internals.expr.string.ExprStringNameSpace.concat", "reference/api/polars.internals.expr.string.ExprStringNameSpace.contains", "reference/api/polars.internals.expr.string.ExprStringNameSpace.count_match", "reference/api/polars.internals.expr.string.ExprStringNameSpace.decode", "reference/api/polars.internals.expr.string.ExprStringNameSpace.encode", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ends_with", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract_all", "reference/api/polars.internals.expr.string.ExprStringNameSpace.json_path_match", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lengths", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ljust", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lstrip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace_all", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rjust", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rstrip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.slice", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split_exact", "reference/api/polars.internals.expr.string.ExprStringNameSpace.splitn", "reference/api/polars.internals.expr.string.ExprStringNameSpace.starts_with", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strptime", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_lowercase", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_uppercase", "reference/api/polars.internals.expr.string.ExprStringNameSpace.zfill", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.field", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.rename_fields", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/api/polars.internals.series.categorical.CatNameSpace.set_ordering", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.day", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.days", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.epoch", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hour", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hours", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.iso_year", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.max", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.mean", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.median", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.milliseconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.min", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minute", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minutes", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.month", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanosecond", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanoseconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.offset_by", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.ordinal_day", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.quarter", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.second", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.seconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.strftime", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.timestamp", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.truncate", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.week", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.weekday", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.with_time_unit", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.year", "reference/api/polars.internals.series.list.ListNameSpace.arg_max", "reference/api/polars.internals.series.list.ListNameSpace.arg_min", "reference/api/polars.internals.series.list.ListNameSpace.concat", "reference/api/polars.internals.series.list.ListNameSpace.contains", "reference/api/polars.internals.series.list.ListNameSpace.diff", "reference/api/polars.internals.series.list.ListNameSpace.eval", "reference/api/polars.internals.series.list.ListNameSpace.first", "reference/api/polars.internals.series.list.ListNameSpace.get", "reference/api/polars.internals.series.list.ListNameSpace.head", "reference/api/polars.internals.series.list.ListNameSpace.join", "reference/api/polars.internals.series.list.ListNameSpace.last", "reference/api/polars.internals.series.list.ListNameSpace.lengths", "reference/api/polars.internals.series.list.ListNameSpace.max", "reference/api/polars.internals.series.list.ListNameSpace.mean", "reference/api/polars.internals.series.list.ListNameSpace.min", "reference/api/polars.internals.series.list.ListNameSpace.reverse", "reference/api/polars.internals.series.list.ListNameSpace.shift", "reference/api/polars.internals.series.list.ListNameSpace.slice", "reference/api/polars.internals.series.list.ListNameSpace.sort", "reference/api/polars.internals.series.list.ListNameSpace.sum", "reference/api/polars.internals.series.list.ListNameSpace.tail", "reference/api/polars.internals.series.list.ListNameSpace.unique", "reference/api/polars.internals.series.string.StringNameSpace.concat", "reference/api/polars.internals.series.string.StringNameSpace.contains", "reference/api/polars.internals.series.string.StringNameSpace.count_match", "reference/api/polars.internals.series.string.StringNameSpace.decode", "reference/api/polars.internals.series.string.StringNameSpace.encode", "reference/api/polars.internals.series.string.StringNameSpace.ends_with", "reference/api/polars.internals.series.string.StringNameSpace.extract", "reference/api/polars.internals.series.string.StringNameSpace.extract_all", "reference/api/polars.internals.series.string.StringNameSpace.json_path_match", "reference/api/polars.internals.series.string.StringNameSpace.lengths", "reference/api/polars.internals.series.string.StringNameSpace.ljust", "reference/api/polars.internals.series.string.StringNameSpace.lstrip", "reference/api/polars.internals.series.string.StringNameSpace.replace", "reference/api/polars.internals.series.string.StringNameSpace.replace_all", "reference/api/polars.internals.series.string.StringNameSpace.rjust", "reference/api/polars.internals.series.string.StringNameSpace.rstrip", "reference/api/polars.internals.series.string.StringNameSpace.slice", "reference/api/polars.internals.series.string.StringNameSpace.split", "reference/api/polars.internals.series.string.StringNameSpace.split_exact", "reference/api/polars.internals.series.string.StringNameSpace.splitn", "reference/api/polars.internals.series.string.StringNameSpace.starts_with", "reference/api/polars.internals.series.string.StringNameSpace.strip", "reference/api/polars.internals.series.string.StringNameSpace.strptime", "reference/api/polars.internals.series.string.StringNameSpace.to_lowercase", "reference/api/polars.internals.series.string.StringNameSpace.to_uppercase", "reference/api/polars.internals.series.string.StringNameSpace.zfill", "reference/api/polars.internals.series.struct.StructNameSpace.field", "reference/api/polars.internals.series.struct.StructNameSpace.fields", "reference/api/polars.internals.series.struct.StructNameSpace.rename_fields", "reference/api/polars.internals.series.struct.StructNameSpace.to_frame", "reference/api/polars.list", "reference/api/polars.lit", "reference/api/polars.map", "reference/api/polars.max", "reference/api/polars.mean", "reference/api/polars.median", "reference/api/polars.min", "reference/api/polars.n_unique", "reference/api/polars.pearson_corr", "reference/api/polars.quantile", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.repeat", "reference/api/polars.scan_csv", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.select", "reference/api/polars.show_versions", "reference/api/polars.spearman_rank_corr", "reference/api/polars.std", "reference/api/polars.struct", "reference/api/polars.sum", "reference/api/polars.tail", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.column", "reference/api/polars.testing.columns", "reference/api/polars.testing.dataframes", "reference/api/polars.testing.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.var", "reference/api/polars.when", "reference/apimut /polars.LazyFrame.columns", "reference/apimut /polars.LazyFrame.dtypes", "reference/apimut /polars.LazyFrame.schema", "reference/config", "reference/dataframe", "reference/datatypes", "reference/exceptions", "reference/expression", "reference/functions", "reference/index", "reference/io", "reference/lazyframe", "reference/series", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_global_string_cache.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_utf8_tables.rst", "reference/api/polars.Config.unset_global_string_cache.rst", "reference/api/polars.DataFrame.rst", "reference/api/polars.DataFrame.apply.rst", "reference/api/polars.DataFrame.cleared.rst", "reference/api/polars.DataFrame.clone.rst", "reference/api/polars.DataFrame.columns.rst", "reference/api/polars.DataFrame.describe.rst", "reference/api/polars.DataFrame.drop.rst", "reference/api/polars.DataFrame.drop_in_place.rst", "reference/api/polars.DataFrame.drop_nulls.rst", "reference/api/polars.DataFrame.dtypes.rst", "reference/api/polars.DataFrame.estimated_size.rst", "reference/api/polars.DataFrame.explode.rst", "reference/api/polars.DataFrame.extend.rst", "reference/api/polars.DataFrame.fill_nan.rst", "reference/api/polars.DataFrame.fill_null.rst", "reference/api/polars.DataFrame.filter.rst", "reference/api/polars.DataFrame.find_idx_by_name.rst", "reference/api/polars.DataFrame.fold.rst", "reference/api/polars.DataFrame.frame_equal.rst", "reference/api/polars.DataFrame.get_column.rst", "reference/api/polars.DataFrame.get_columns.rst", "reference/api/polars.DataFrame.groupby.rst", "reference/api/polars.DataFrame.groupby_dynamic.rst", "reference/api/polars.DataFrame.groupby_rolling.rst", "reference/api/polars.DataFrame.hash_rows.rst", "reference/api/polars.DataFrame.head.rst", "reference/api/polars.DataFrame.height.rst", "reference/api/polars.DataFrame.hstack.rst", "reference/api/polars.DataFrame.insert_at_idx.rst", "reference/api/polars.DataFrame.interpolate.rst", "reference/api/polars.DataFrame.is_duplicated.rst", "reference/api/polars.DataFrame.is_empty.rst", "reference/api/polars.DataFrame.is_unique.rst", "reference/api/polars.DataFrame.join.rst", "reference/api/polars.DataFrame.join_asof.rst", "reference/api/polars.DataFrame.lazy.rst", "reference/api/polars.DataFrame.limit.rst", "reference/api/polars.DataFrame.max.rst", "reference/api/polars.DataFrame.mean.rst", "reference/api/polars.DataFrame.median.rst", "reference/api/polars.DataFrame.melt.rst", "reference/api/polars.DataFrame.min.rst", "reference/api/polars.DataFrame.n_chunks.rst", "reference/api/polars.DataFrame.null_count.rst", "reference/api/polars.DataFrame.partition_by.rst", "reference/api/polars.DataFrame.pipe.rst", "reference/api/polars.DataFrame.pivot.rst", "reference/api/polars.DataFrame.product.rst", "reference/api/polars.DataFrame.quantile.rst", "reference/api/polars.DataFrame.rechunk.rst", "reference/api/polars.DataFrame.rename.rst", "reference/api/polars.DataFrame.replace.rst", "reference/api/polars.DataFrame.replace_at_idx.rst", "reference/api/polars.DataFrame.reverse.rst", "reference/api/polars.DataFrame.row.rst", "reference/api/polars.DataFrame.rows.rst", "reference/api/polars.DataFrame.sample.rst", "reference/api/polars.DataFrame.schema.rst", "reference/api/polars.DataFrame.select.rst", "reference/api/polars.DataFrame.shape.rst", "reference/api/polars.DataFrame.shift.rst", "reference/api/polars.DataFrame.shift_and_fill.rst", "reference/api/polars.DataFrame.shrink_to_fit.rst", "reference/api/polars.DataFrame.slice.rst", "reference/api/polars.DataFrame.sort.rst", "reference/api/polars.DataFrame.std.rst", "reference/api/polars.DataFrame.sum.rst", "reference/api/polars.DataFrame.tail.rst", "reference/api/polars.DataFrame.take_every.rst", "reference/api/polars.DataFrame.to_arrow.rst", "reference/api/polars.DataFrame.to_dict.rst", "reference/api/polars.DataFrame.to_dicts.rst", "reference/api/polars.DataFrame.to_dummies.rst", "reference/api/polars.DataFrame.to_numpy.rst", "reference/api/polars.DataFrame.to_pandas.rst", "reference/api/polars.DataFrame.to_series.rst", "reference/api/polars.DataFrame.to_struct.rst", "reference/api/polars.DataFrame.transpose.rst", "reference/api/polars.DataFrame.unique.rst", "reference/api/polars.DataFrame.unnest.rst", "reference/api/polars.DataFrame.unstack.rst", "reference/api/polars.DataFrame.upsample.rst", "reference/api/polars.DataFrame.var.rst", "reference/api/polars.DataFrame.vstack.rst", "reference/api/polars.DataFrame.width.rst", "reference/api/polars.DataFrame.with_column.rst", "reference/api/polars.DataFrame.with_columns.rst", "reference/api/polars.DataFrame.with_row_count.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.Expr.rst", "reference/api/polars.Expr.abs.rst", "reference/api/polars.Expr.agg_groups.rst", "reference/api/polars.Expr.alias.rst", "reference/api/polars.Expr.all.rst", "reference/api/polars.Expr.any.rst", "reference/api/polars.Expr.append.rst", "reference/api/polars.Expr.apply.rst", "reference/api/polars.Expr.arccos.rst", "reference/api/polars.Expr.arccosh.rst", "reference/api/polars.Expr.arcsin.rst", "reference/api/polars.Expr.arcsinh.rst", "reference/api/polars.Expr.arctan.rst", "reference/api/polars.Expr.arctanh.rst", "reference/api/polars.Expr.arg_max.rst", "reference/api/polars.Expr.arg_min.rst", "reference/api/polars.Expr.arg_sort.rst", "reference/api/polars.Expr.arg_unique.rst", "reference/api/polars.Expr.argsort.rst", "reference/api/polars.Expr.arr.rst", "reference/api/polars.Expr.backward_fill.rst", "reference/api/polars.Expr.cast.rst", "reference/api/polars.Expr.cat.rst", "reference/api/polars.Expr.ceil.rst", "reference/api/polars.Expr.clip.rst", "reference/api/polars.Expr.clip_max.rst", "reference/api/polars.Expr.clip_min.rst", "reference/api/polars.Expr.cos.rst", "reference/api/polars.Expr.cosh.rst", "reference/api/polars.Expr.count.rst", "reference/api/polars.Expr.cumcount.rst", "reference/api/polars.Expr.cummax.rst", "reference/api/polars.Expr.cummin.rst", "reference/api/polars.Expr.cumprod.rst", "reference/api/polars.Expr.cumsum.rst", "reference/api/polars.Expr.cumulative_eval.rst", "reference/api/polars.Expr.diff.rst", "reference/api/polars.Expr.dot.rst", "reference/api/polars.Expr.drop_nans.rst", "reference/api/polars.Expr.drop_nulls.rst", "reference/api/polars.Expr.dt.rst", "reference/api/polars.Expr.entropy.rst", "reference/api/polars.Expr.ewm_mean.rst", "reference/api/polars.Expr.ewm_std.rst", "reference/api/polars.Expr.ewm_var.rst", "reference/api/polars.Expr.exclude.rst", "reference/api/polars.Expr.exp.rst", "reference/api/polars.Expr.explode.rst", "reference/api/polars.Expr.extend_constant.rst", "reference/api/polars.Expr.fill_nan.rst", "reference/api/polars.Expr.fill_null.rst", "reference/api/polars.Expr.filter.rst", "reference/api/polars.Expr.first.rst", "reference/api/polars.Expr.flatten.rst", "reference/api/polars.Expr.floor.rst", "reference/api/polars.Expr.forward_fill.rst", "reference/api/polars.Expr.hash.rst", "reference/api/polars.Expr.head.rst", "reference/api/polars.Expr.inspect.rst", "reference/api/polars.Expr.interpolate.rst", "reference/api/polars.Expr.is_between.rst", "reference/api/polars.Expr.is_duplicated.rst", "reference/api/polars.Expr.is_finite.rst", "reference/api/polars.Expr.is_first.rst", "reference/api/polars.Expr.is_in.rst", "reference/api/polars.Expr.is_infinite.rst", "reference/api/polars.Expr.is_nan.rst", "reference/api/polars.Expr.is_not.rst", "reference/api/polars.Expr.is_not_nan.rst", "reference/api/polars.Expr.is_not_null.rst", "reference/api/polars.Expr.is_null.rst", "reference/api/polars.Expr.is_unique.rst", "reference/api/polars.Expr.keep_name.rst", "reference/api/polars.Expr.kurtosis.rst", "reference/api/polars.Expr.last.rst", "reference/api/polars.Expr.len.rst", "reference/api/polars.Expr.limit.rst", "reference/api/polars.Expr.list.rst", "reference/api/polars.Expr.log.rst", "reference/api/polars.Expr.log10.rst", "reference/api/polars.Expr.lower_bound.rst", "reference/api/polars.Expr.map.rst", "reference/api/polars.Expr.map_alias.rst", "reference/api/polars.Expr.max.rst", "reference/api/polars.Expr.mean.rst", "reference/api/polars.Expr.median.rst", "reference/api/polars.Expr.min.rst", "reference/api/polars.Expr.mode.rst", "reference/api/polars.Expr.n_unique.rst", "reference/api/polars.Expr.null_count.rst", "reference/api/polars.Expr.over.rst", "reference/api/polars.Expr.pct_change.rst", "reference/api/polars.Expr.pow.rst", "reference/api/polars.Expr.prefix.rst", "reference/api/polars.Expr.product.rst", "reference/api/polars.Expr.quantile.rst", "reference/api/polars.Expr.rank.rst", "reference/api/polars.Expr.rechunk.rst", "reference/api/polars.Expr.reinterpret.rst", "reference/api/polars.Expr.repeat_by.rst", "reference/api/polars.Expr.reshape.rst", "reference/api/polars.Expr.reverse.rst", "reference/api/polars.Expr.rolling_apply.rst", "reference/api/polars.Expr.rolling_max.rst", "reference/api/polars.Expr.rolling_mean.rst", "reference/api/polars.Expr.rolling_median.rst", "reference/api/polars.Expr.rolling_min.rst", "reference/api/polars.Expr.rolling_quantile.rst", "reference/api/polars.Expr.rolling_skew.rst", "reference/api/polars.Expr.rolling_std.rst", "reference/api/polars.Expr.rolling_sum.rst", "reference/api/polars.Expr.rolling_var.rst", "reference/api/polars.Expr.round.rst", "reference/api/polars.Expr.sample.rst", "reference/api/polars.Expr.search_sorted.rst", "reference/api/polars.Expr.set_sorted.rst", "reference/api/polars.Expr.shift.rst", "reference/api/polars.Expr.shift_and_fill.rst", "reference/api/polars.Expr.shuffle.rst", "reference/api/polars.Expr.sign.rst", "reference/api/polars.Expr.sin.rst", "reference/api/polars.Expr.sinh.rst", "reference/api/polars.Expr.skew.rst", "reference/api/polars.Expr.slice.rst", "reference/api/polars.Expr.sort.rst", "reference/api/polars.Expr.sort_by.rst", "reference/api/polars.Expr.sqrt.rst", "reference/api/polars.Expr.std.rst", "reference/api/polars.Expr.str.rst", "reference/api/polars.Expr.suffix.rst", "reference/api/polars.Expr.sum.rst", "reference/api/polars.Expr.tail.rst", "reference/api/polars.Expr.take.rst", "reference/api/polars.Expr.take_every.rst", "reference/api/polars.Expr.tan.rst", "reference/api/polars.Expr.tanh.rst", "reference/api/polars.Expr.to_physical.rst", "reference/api/polars.Expr.top_k.rst", "reference/api/polars.Expr.unique.rst", "reference/api/polars.Expr.unique_counts.rst", "reference/api/polars.Expr.upper_bound.rst", "reference/api/polars.Expr.value_counts.rst", "reference/api/polars.Expr.var.rst", "reference/api/polars.Expr.where.rst", "reference/api/polars.LazyFrame.cache.rst", "reference/api/polars.LazyFrame.cleared.rst", "reference/api/polars.LazyFrame.clone.rst", "reference/api/polars.LazyFrame.collect.rst", "reference/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/api/polars.LazyFrame.describe_plan.rst", "reference/api/polars.LazyFrame.drop.rst", "reference/api/polars.LazyFrame.drop_nulls.rst", "reference/api/polars.LazyFrame.explode.rst", "reference/api/polars.LazyFrame.fetch.rst", "reference/api/polars.LazyFrame.fill_nan.rst", "reference/api/polars.LazyFrame.fill_null.rst", "reference/api/polars.LazyFrame.filter.rst", "reference/api/polars.LazyFrame.first.rst", "reference/api/polars.LazyFrame.from_json.rst", "reference/api/polars.LazyFrame.groupby.rst", "reference/api/polars.LazyFrame.groupby_dynamic.rst", "reference/api/polars.LazyFrame.groupby_rolling.rst", "reference/api/polars.LazyFrame.head.rst", "reference/api/polars.LazyFrame.inspect.rst", "reference/api/polars.LazyFrame.interpolate.rst", "reference/api/polars.LazyFrame.join.rst", "reference/api/polars.LazyFrame.join_asof.rst", "reference/api/polars.LazyFrame.last.rst", "reference/api/polars.LazyFrame.limit.rst", "reference/api/polars.LazyFrame.map.rst", "reference/api/polars.LazyFrame.max.rst", "reference/api/polars.LazyFrame.mean.rst", "reference/api/polars.LazyFrame.median.rst", "reference/api/polars.LazyFrame.melt.rst", "reference/api/polars.LazyFrame.min.rst", "reference/api/polars.LazyFrame.pipe.rst", "reference/api/polars.LazyFrame.profile.rst", "reference/api/polars.LazyFrame.quantile.rst", "reference/api/polars.LazyFrame.read_json.rst", "reference/api/polars.LazyFrame.rename.rst", "reference/api/polars.LazyFrame.reverse.rst", "reference/api/polars.LazyFrame.select.rst", "reference/api/polars.LazyFrame.shift.rst", "reference/api/polars.LazyFrame.shift_and_fill.rst", "reference/api/polars.LazyFrame.show_graph.rst", "reference/api/polars.LazyFrame.slice.rst", "reference/api/polars.LazyFrame.sort.rst", "reference/api/polars.LazyFrame.std.rst", "reference/api/polars.LazyFrame.sum.rst", "reference/api/polars.LazyFrame.tail.rst", "reference/api/polars.LazyFrame.take_every.rst", "reference/api/polars.LazyFrame.unique.rst", "reference/api/polars.LazyFrame.unnest.rst", "reference/api/polars.LazyFrame.var.rst", "reference/api/polars.LazyFrame.with_column.rst", "reference/api/polars.LazyFrame.with_columns.rst", "reference/api/polars.LazyFrame.with_context.rst", "reference/api/polars.LazyFrame.with_row_count.rst", "reference/api/polars.LazyFrame.write_json.rst", "reference/api/polars.Series.rst", "reference/api/polars.Series.abs.rst", "reference/api/polars.Series.alias.rst", "reference/api/polars.Series.all.rst", "reference/api/polars.Series.any.rst", "reference/api/polars.Series.append.rst", "reference/api/polars.Series.apply.rst", "reference/api/polars.Series.arccos.rst", "reference/api/polars.Series.arccosh.rst", "reference/api/polars.Series.arcsin.rst", "reference/api/polars.Series.arcsinh.rst", "reference/api/polars.Series.arctan.rst", "reference/api/polars.Series.arctanh.rst", "reference/api/polars.Series.arg_max.rst", "reference/api/polars.Series.arg_min.rst", "reference/api/polars.Series.arg_sort.rst", "reference/api/polars.Series.arg_true.rst", "reference/api/polars.Series.arg_unique.rst", "reference/api/polars.Series.argsort.rst", "reference/api/polars.Series.arr.rst", "reference/api/polars.Series.cast.rst", "reference/api/polars.Series.cat.rst", "reference/api/polars.Series.ceil.rst", "reference/api/polars.Series.chunk_lengths.rst", "reference/api/polars.Series.cleared.rst", "reference/api/polars.Series.clip.rst", "reference/api/polars.Series.clip_max.rst", "reference/api/polars.Series.clip_min.rst", "reference/api/polars.Series.clone.rst", "reference/api/polars.Series.cos.rst", "reference/api/polars.Series.cosh.rst", "reference/api/polars.Series.cummax.rst", "reference/api/polars.Series.cummin.rst", "reference/api/polars.Series.cumprod.rst", "reference/api/polars.Series.cumsum.rst", "reference/api/polars.Series.cumulative_eval.rst", "reference/api/polars.Series.describe.rst", "reference/api/polars.Series.diff.rst", "reference/api/polars.Series.dot.rst", "reference/api/polars.Series.drop_nans.rst", "reference/api/polars.Series.drop_nulls.rst", "reference/api/polars.Series.dt.rst", "reference/api/polars.Series.dtype.rst", "reference/api/polars.Series.entropy.rst", "reference/api/polars.Series.estimated_size.rst", "reference/api/polars.Series.ewm_mean.rst", "reference/api/polars.Series.ewm_std.rst", "reference/api/polars.Series.ewm_var.rst", "reference/api/polars.Series.exp.rst", "reference/api/polars.Series.explode.rst", "reference/api/polars.Series.extend_constant.rst", "reference/api/polars.Series.fill_nan.rst", "reference/api/polars.Series.fill_null.rst", "reference/api/polars.Series.filter.rst", "reference/api/polars.Series.flags.rst", "reference/api/polars.Series.floor.rst", "reference/api/polars.Series.has_validity.rst", "reference/api/polars.Series.hash.rst", "reference/api/polars.Series.head.rst", "reference/api/polars.Series.inner_dtype.rst", "reference/api/polars.Series.interpolate.rst", "reference/api/polars.Series.is_boolean.rst", "reference/api/polars.Series.is_datelike.rst", "reference/api/polars.Series.is_duplicated.rst", "reference/api/polars.Series.is_empty.rst", "reference/api/polars.Series.is_finite.rst", "reference/api/polars.Series.is_first.rst", "reference/api/polars.Series.is_float.rst", "reference/api/polars.Series.is_in.rst", "reference/api/polars.Series.is_infinite.rst", "reference/api/polars.Series.is_nan.rst", "reference/api/polars.Series.is_not_nan.rst", "reference/api/polars.Series.is_not_null.rst", "reference/api/polars.Series.is_null.rst", "reference/api/polars.Series.is_numeric.rst", "reference/api/polars.Series.is_unique.rst", "reference/api/polars.Series.is_utf8.rst", "reference/api/polars.Series.kurtosis.rst", "reference/api/polars.Series.len.rst", "reference/api/polars.Series.limit.rst", "reference/api/polars.Series.log.rst", "reference/api/polars.Series.log10.rst", "reference/api/polars.Series.max.rst", "reference/api/polars.Series.mean.rst", "reference/api/polars.Series.median.rst", "reference/api/polars.Series.min.rst", "reference/api/polars.Series.mode.rst", "reference/api/polars.Series.n_chunks.rst", "reference/api/polars.Series.n_unique.rst", "reference/api/polars.Series.name.rst", "reference/api/polars.Series.null_count.rst", "reference/api/polars.Series.pct_change.rst", "reference/api/polars.Series.peak_max.rst", "reference/api/polars.Series.peak_min.rst", "reference/api/polars.Series.product.rst", "reference/api/polars.Series.quantile.rst", "reference/api/polars.Series.rank.rst", "reference/api/polars.Series.rechunk.rst", "reference/api/polars.Series.reinterpret.rst", "reference/api/polars.Series.rename.rst", "reference/api/polars.Series.reshape.rst", "reference/api/polars.Series.reverse.rst", "reference/api/polars.Series.rolling_apply.rst", "reference/api/polars.Series.rolling_max.rst", "reference/api/polars.Series.rolling_mean.rst", "reference/api/polars.Series.rolling_median.rst", "reference/api/polars.Series.rolling_min.rst", "reference/api/polars.Series.rolling_quantile.rst", "reference/api/polars.Series.rolling_skew.rst", "reference/api/polars.Series.rolling_std.rst", "reference/api/polars.Series.rolling_sum.rst", "reference/api/polars.Series.rolling_var.rst", "reference/api/polars.Series.round.rst", "reference/api/polars.Series.sample.rst", "reference/api/polars.Series.search_sorted.rst", "reference/api/polars.Series.series_equal.rst", "reference/api/polars.Series.set.rst", "reference/api/polars.Series.set_at_idx.rst", "reference/api/polars.Series.set_sorted.rst", "reference/api/polars.Series.shape.rst", "reference/api/polars.Series.shift.rst", "reference/api/polars.Series.shift_and_fill.rst", "reference/api/polars.Series.shrink_to_fit.rst", "reference/api/polars.Series.shuffle.rst", "reference/api/polars.Series.sign.rst", "reference/api/polars.Series.sin.rst", "reference/api/polars.Series.sinh.rst", "reference/api/polars.Series.skew.rst", "reference/api/polars.Series.slice.rst", "reference/api/polars.Series.sort.rst", "reference/api/polars.Series.sqrt.rst", "reference/api/polars.Series.std.rst", "reference/api/polars.Series.str.rst", "reference/api/polars.Series.sum.rst", "reference/api/polars.Series.tail.rst", "reference/api/polars.Series.take.rst", "reference/api/polars.Series.take_every.rst", "reference/api/polars.Series.tan.rst", "reference/api/polars.Series.tanh.rst", "reference/api/polars.Series.time_unit.rst", "reference/api/polars.Series.to_arrow.rst", "reference/api/polars.Series.to_dummies.rst", "reference/api/polars.Series.to_frame.rst", "reference/api/polars.Series.to_list.rst", "reference/api/polars.Series.to_numpy.rst", "reference/api/polars.Series.to_pandas.rst", "reference/api/polars.Series.to_physical.rst", "reference/api/polars.Series.top_k.rst", "reference/api/polars.Series.unique.rst", "reference/api/polars.Series.unique_counts.rst", "reference/api/polars.Series.value_counts.rst", "reference/api/polars.Series.var.rst", "reference/api/polars.Series.view.rst", "reference/api/polars.Series.zip_with.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.all.rst", "reference/api/polars.any.rst", "reference/api/polars.apply.rst", "reference/api/polars.arange.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.argsort_by.rst", "reference/api/polars.avg.rst", "reference/api/polars.col.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.concat_list.rst", "reference/api/polars.concat_str.rst", "reference/api/polars.count.rst", "reference/api/polars.cov.rst", "reference/api/polars.cut.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.datatypes.get_idx_type.rst", "reference/api/polars.date.rst", "reference/api/polars.date_range.rst", "reference/api/polars.datetime.rst", "reference/api/polars.duration.rst", "reference/api/polars.element.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.NotFoundError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.exclude.rst", "reference/api/polars.first.rst", "reference/api/polars.fold.rst", "reference/api/polars.format.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.groups.rst", "reference/api/polars.head.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg_list.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.pivot.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.count.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.first.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.last.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.max.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.mean.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.median.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.min.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.sum.rst", "reference/api/polars.internals.expr.categorical.ExprCatNameSpace.set_ordering.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.day.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.days.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hour.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hours.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minute.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.month.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.second.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.week.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.year.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_max.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_min.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.concat.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.contains.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.diff.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.eval.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.first.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.get.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.head.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.join.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.last.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.lengths.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.max.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.mean.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.min.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.reverse.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.shift.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.slice.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.sort.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.sum.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.tail.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.to_struct.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.unique.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.output_name.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.pop.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.root_names.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.concat.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.contains.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.count_match.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.decode.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.encode.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ends_with.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract_all.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.json_path_match.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lengths.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ljust.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lstrip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace_all.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rjust.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rstrip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.slice.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split_exact.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.splitn.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.starts_with.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strptime.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_lowercase.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_uppercase.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.zfill.rst", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.field.rst", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.rename_fields.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/api/polars.internals.series.categorical.CatNameSpace.set_ordering.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.day.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.days.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.epoch.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hour.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hours.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.iso_year.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.max.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.mean.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.median.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.milliseconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.min.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minute.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minutes.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.month.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanosecond.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanoseconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.offset_by.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.ordinal_day.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.quarter.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.second.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.seconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.strftime.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.timestamp.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.truncate.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.week.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.weekday.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.with_time_unit.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.year.rst", "reference/api/polars.internals.series.list.ListNameSpace.arg_max.rst", "reference/api/polars.internals.series.list.ListNameSpace.arg_min.rst", "reference/api/polars.internals.series.list.ListNameSpace.concat.rst", "reference/api/polars.internals.series.list.ListNameSpace.contains.rst", "reference/api/polars.internals.series.list.ListNameSpace.diff.rst", "reference/api/polars.internals.series.list.ListNameSpace.eval.rst", "reference/api/polars.internals.series.list.ListNameSpace.first.rst", "reference/api/polars.internals.series.list.ListNameSpace.get.rst", "reference/api/polars.internals.series.list.ListNameSpace.head.rst", "reference/api/polars.internals.series.list.ListNameSpace.join.rst", "reference/api/polars.internals.series.list.ListNameSpace.last.rst", "reference/api/polars.internals.series.list.ListNameSpace.lengths.rst", "reference/api/polars.internals.series.list.ListNameSpace.max.rst", "reference/api/polars.internals.series.list.ListNameSpace.mean.rst", "reference/api/polars.internals.series.list.ListNameSpace.min.rst", "reference/api/polars.internals.series.list.ListNameSpace.reverse.rst", "reference/api/polars.internals.series.list.ListNameSpace.shift.rst", "reference/api/polars.internals.series.list.ListNameSpace.slice.rst", "reference/api/polars.internals.series.list.ListNameSpace.sort.rst", "reference/api/polars.internals.series.list.ListNameSpace.sum.rst", "reference/api/polars.internals.series.list.ListNameSpace.tail.rst", "reference/api/polars.internals.series.list.ListNameSpace.unique.rst", "reference/api/polars.internals.series.string.StringNameSpace.concat.rst", "reference/api/polars.internals.series.string.StringNameSpace.contains.rst", "reference/api/polars.internals.series.string.StringNameSpace.count_match.rst", "reference/api/polars.internals.series.string.StringNameSpace.decode.rst", "reference/api/polars.internals.series.string.StringNameSpace.encode.rst", "reference/api/polars.internals.series.string.StringNameSpace.ends_with.rst", "reference/api/polars.internals.series.string.StringNameSpace.extract.rst", "reference/api/polars.internals.series.string.StringNameSpace.extract_all.rst", "reference/api/polars.internals.series.string.StringNameSpace.json_path_match.rst", "reference/api/polars.internals.series.string.StringNameSpace.lengths.rst", "reference/api/polars.internals.series.string.StringNameSpace.ljust.rst", "reference/api/polars.internals.series.string.StringNameSpace.lstrip.rst", "reference/api/polars.internals.series.string.StringNameSpace.replace.rst", "reference/api/polars.internals.series.string.StringNameSpace.replace_all.rst", "reference/api/polars.internals.series.string.StringNameSpace.rjust.rst", "reference/api/polars.internals.series.string.StringNameSpace.rstrip.rst", "reference/api/polars.internals.series.string.StringNameSpace.slice.rst", "reference/api/polars.internals.series.string.StringNameSpace.split.rst", "reference/api/polars.internals.series.string.StringNameSpace.split_exact.rst", "reference/api/polars.internals.series.string.StringNameSpace.splitn.rst", "reference/api/polars.internals.series.string.StringNameSpace.starts_with.rst", "reference/api/polars.internals.series.string.StringNameSpace.strip.rst", "reference/api/polars.internals.series.string.StringNameSpace.strptime.rst", "reference/api/polars.internals.series.string.StringNameSpace.to_lowercase.rst", "reference/api/polars.internals.series.string.StringNameSpace.to_uppercase.rst", "reference/api/polars.internals.series.string.StringNameSpace.zfill.rst", "reference/api/polars.internals.series.struct.StructNameSpace.field.rst", "reference/api/polars.internals.series.struct.StructNameSpace.fields.rst", "reference/api/polars.internals.series.struct.StructNameSpace.rename_fields.rst", "reference/api/polars.internals.series.struct.StructNameSpace.to_frame.rst", "reference/api/polars.list.rst", "reference/api/polars.lit.rst", "reference/api/polars.map.rst", "reference/api/polars.max.rst", "reference/api/polars.mean.rst", "reference/api/polars.median.rst", "reference/api/polars.min.rst", "reference/api/polars.n_unique.rst", "reference/api/polars.pearson_corr.rst", "reference/api/polars.quantile.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.repeat.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.select.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.spearman_rank_corr.rst", "reference/api/polars.std.rst", "reference/api/polars.struct.rst", "reference/api/polars.sum.rst", "reference/api/polars.tail.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.column.rst", "reference/api/polars.testing.columns.rst", "reference/api/polars.testing.dataframes.rst", "reference/api/polars.testing.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.var.rst", "reference/api/polars.when.rst", "reference/apimut /polars.LazyFrame.columns.rst", "reference/apimut /polars.LazyFrame.dtypes.rst", "reference/apimut /polars.LazyFrame.schema.rst", "reference/config.rst", "reference/dataframe.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expression.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe.rst", "reference/series.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_str_lengths", "polars.Config.set_global_string_cache", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_utf8_tables", "polars.Config.unset_global_string_cache", "polars.DataFrame", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_column", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.Expr", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr", "polars.Expr.backward_fill", "polars.Expr.cast", "polars.Expr.cat", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.with_column", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.Series", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.cast", "polars.Series.cat", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "polars.StringCache", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_where", "polars.argsort_by", "polars.avg", "polars.col", "polars.collect_all", "polars.concat", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cut", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Duration", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.datatypes.get_idx_type", "polars.date", "polars.date_range", "polars.datetime", "polars.duration", "polars.element", "polars.exceptions.ArrowError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.NotFoundError", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.ShapeError", "polars.exceptions.TooManyRowsReturned", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_arrow", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.groups", "polars.head", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.agg_list", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.pivot", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "polars.internals.dataframe.pivot.PivotOps.count", "polars.internals.dataframe.pivot.PivotOps.first", "polars.internals.dataframe.pivot.PivotOps.last", "polars.internals.dataframe.pivot.PivotOps.max", "polars.internals.dataframe.pivot.PivotOps.mean", "polars.internals.dataframe.pivot.PivotOps.median", "polars.internals.dataframe.pivot.PivotOps.min", "polars.internals.dataframe.pivot.PivotOps.sum", "polars.internals.expr.categorical.ExprCatNameSpace.set_ordering", "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit", "polars.internals.expr.datetime.ExprDateTimeNameSpace.day", "polars.internals.expr.datetime.ExprDateTimeNameSpace.days", "polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch", "polars.internals.expr.datetime.ExprDateTimeNameSpace.hour", "polars.internals.expr.datetime.ExprDateTimeNameSpace.hours", "polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year", "polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.minute", "polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes", "polars.internals.expr.datetime.ExprDateTimeNameSpace.month", "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond", "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by", "polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day", "polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter", "polars.internals.expr.datetime.ExprDateTimeNameSpace.second", "polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime", "polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp", "polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate", "polars.internals.expr.datetime.ExprDateTimeNameSpace.week", "polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday", "polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit", "polars.internals.expr.datetime.ExprDateTimeNameSpace.year", "polars.internals.expr.list.ExprListNameSpace.arg_max", "polars.internals.expr.list.ExprListNameSpace.arg_min", "polars.internals.expr.list.ExprListNameSpace.concat", "polars.internals.expr.list.ExprListNameSpace.contains", "polars.internals.expr.list.ExprListNameSpace.diff", "polars.internals.expr.list.ExprListNameSpace.eval", "polars.internals.expr.list.ExprListNameSpace.first", "polars.internals.expr.list.ExprListNameSpace.get", "polars.internals.expr.list.ExprListNameSpace.head", "polars.internals.expr.list.ExprListNameSpace.join", "polars.internals.expr.list.ExprListNameSpace.last", "polars.internals.expr.list.ExprListNameSpace.lengths", "polars.internals.expr.list.ExprListNameSpace.max", "polars.internals.expr.list.ExprListNameSpace.mean", "polars.internals.expr.list.ExprListNameSpace.min", "polars.internals.expr.list.ExprListNameSpace.reverse", "polars.internals.expr.list.ExprListNameSpace.shift", "polars.internals.expr.list.ExprListNameSpace.slice", "polars.internals.expr.list.ExprListNameSpace.sort", "polars.internals.expr.list.ExprListNameSpace.sum", "polars.internals.expr.list.ExprListNameSpace.tail", "polars.internals.expr.list.ExprListNameSpace.to_struct", "polars.internals.expr.list.ExprListNameSpace.unique", "polars.internals.expr.meta.ExprMetaNameSpace.output_name", "polars.internals.expr.meta.ExprMetaNameSpace.pop", "polars.internals.expr.meta.ExprMetaNameSpace.root_names", "polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases", "polars.internals.expr.string.ExprStringNameSpace.concat", "polars.internals.expr.string.ExprStringNameSpace.contains", "polars.internals.expr.string.ExprStringNameSpace.count_match", "polars.internals.expr.string.ExprStringNameSpace.decode", "polars.internals.expr.string.ExprStringNameSpace.encode", "polars.internals.expr.string.ExprStringNameSpace.ends_with", "polars.internals.expr.string.ExprStringNameSpace.extract", "polars.internals.expr.string.ExprStringNameSpace.extract_all", "polars.internals.expr.string.ExprStringNameSpace.json_path_match", "polars.internals.expr.string.ExprStringNameSpace.lengths", "polars.internals.expr.string.ExprStringNameSpace.ljust", "polars.internals.expr.string.ExprStringNameSpace.lstrip", "polars.internals.expr.string.ExprStringNameSpace.replace", "polars.internals.expr.string.ExprStringNameSpace.replace_all", "polars.internals.expr.string.ExprStringNameSpace.rjust", "polars.internals.expr.string.ExprStringNameSpace.rstrip", "polars.internals.expr.string.ExprStringNameSpace.slice", "polars.internals.expr.string.ExprStringNameSpace.split", "polars.internals.expr.string.ExprStringNameSpace.split_exact", "polars.internals.expr.string.ExprStringNameSpace.splitn", "polars.internals.expr.string.ExprStringNameSpace.starts_with", "polars.internals.expr.string.ExprStringNameSpace.strip", "polars.internals.expr.string.ExprStringNameSpace.strptime", "polars.internals.expr.string.ExprStringNameSpace.to_lowercase", "polars.internals.expr.string.ExprStringNameSpace.to_uppercase", "polars.internals.expr.string.ExprStringNameSpace.zfill", "polars.internals.expr.struct.ExprStructNameSpace.field", "polars.internals.expr.struct.ExprStructNameSpace.rename_fields", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "polars.internals.series.categorical.CatNameSpace.set_ordering", "polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit", "polars.internals.series.datetime.DateTimeNameSpace.day", "polars.internals.series.datetime.DateTimeNameSpace.days", "polars.internals.series.datetime.DateTimeNameSpace.epoch", "polars.internals.series.datetime.DateTimeNameSpace.hour", "polars.internals.series.datetime.DateTimeNameSpace.hours", "polars.internals.series.datetime.DateTimeNameSpace.iso_year", "polars.internals.series.datetime.DateTimeNameSpace.max", "polars.internals.series.datetime.DateTimeNameSpace.mean", "polars.internals.series.datetime.DateTimeNameSpace.median", "polars.internals.series.datetime.DateTimeNameSpace.milliseconds", "polars.internals.series.datetime.DateTimeNameSpace.min", "polars.internals.series.datetime.DateTimeNameSpace.minute", "polars.internals.series.datetime.DateTimeNameSpace.minutes", "polars.internals.series.datetime.DateTimeNameSpace.month", "polars.internals.series.datetime.DateTimeNameSpace.nanosecond", "polars.internals.series.datetime.DateTimeNameSpace.nanoseconds", "polars.internals.series.datetime.DateTimeNameSpace.offset_by", "polars.internals.series.datetime.DateTimeNameSpace.ordinal_day", "polars.internals.series.datetime.DateTimeNameSpace.quarter", "polars.internals.series.datetime.DateTimeNameSpace.second", "polars.internals.series.datetime.DateTimeNameSpace.seconds", "polars.internals.series.datetime.DateTimeNameSpace.strftime", "polars.internals.series.datetime.DateTimeNameSpace.timestamp", "polars.internals.series.datetime.DateTimeNameSpace.truncate", "polars.internals.series.datetime.DateTimeNameSpace.week", "polars.internals.series.datetime.DateTimeNameSpace.weekday", "polars.internals.series.datetime.DateTimeNameSpace.with_time_unit", "polars.internals.series.datetime.DateTimeNameSpace.year", "polars.internals.series.list.ListNameSpace.arg_max", "polars.internals.series.list.ListNameSpace.arg_min", "polars.internals.series.list.ListNameSpace.concat", "polars.internals.series.list.ListNameSpace.contains", "polars.internals.series.list.ListNameSpace.diff", "polars.internals.series.list.ListNameSpace.eval", "polars.internals.series.list.ListNameSpace.first", "polars.internals.series.list.ListNameSpace.get", "polars.internals.series.list.ListNameSpace.head", "polars.internals.series.list.ListNameSpace.join", "polars.internals.series.list.ListNameSpace.last", "polars.internals.series.list.ListNameSpace.lengths", "polars.internals.series.list.ListNameSpace.max", "polars.internals.series.list.ListNameSpace.mean", "polars.internals.series.list.ListNameSpace.min", "polars.internals.series.list.ListNameSpace.reverse", "polars.internals.series.list.ListNameSpace.shift", "polars.internals.series.list.ListNameSpace.slice", "polars.internals.series.list.ListNameSpace.sort", "polars.internals.series.list.ListNameSpace.sum", "polars.internals.series.list.ListNameSpace.tail", "polars.internals.series.list.ListNameSpace.unique", "polars.internals.series.string.StringNameSpace.concat", "polars.internals.series.string.StringNameSpace.contains", "polars.internals.series.string.StringNameSpace.count_match", "polars.internals.series.string.StringNameSpace.decode", "polars.internals.series.string.StringNameSpace.encode", "polars.internals.series.string.StringNameSpace.ends_with", "polars.internals.series.string.StringNameSpace.extract", "polars.internals.series.string.StringNameSpace.extract_all", "polars.internals.series.string.StringNameSpace.json_path_match", "polars.internals.series.string.StringNameSpace.lengths", "polars.internals.series.string.StringNameSpace.ljust", "polars.internals.series.string.StringNameSpace.lstrip", "polars.internals.series.string.StringNameSpace.replace", "polars.internals.series.string.StringNameSpace.replace_all", "polars.internals.series.string.StringNameSpace.rjust", "polars.internals.series.string.StringNameSpace.rstrip", "polars.internals.series.string.StringNameSpace.slice", "polars.internals.series.string.StringNameSpace.split", "polars.internals.series.string.StringNameSpace.split_exact", "polars.internals.series.string.StringNameSpace.splitn", "polars.internals.series.string.StringNameSpace.starts_with", "polars.internals.series.string.StringNameSpace.strip", "polars.internals.series.string.StringNameSpace.strptime", "polars.internals.series.string.StringNameSpace.to_lowercase", "polars.internals.series.string.StringNameSpace.to_uppercase", "polars.internals.series.string.StringNameSpace.zfill", "polars.internals.series.struct.StructNameSpace.field", "polars.internals.series.struct.StructNameSpace.fields", "polars.internals.series.struct.StructNameSpace.rename_fields", "polars.internals.series.struct.StructNameSpace.to_frame", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.read_avro", "polars.read_csv", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.repeat", "polars.scan_csv", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.select", "polars.show_versions", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.column", "polars.testing.columns", "polars.testing.dataframes", "polars.testing.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.var", "polars.when", "polars.LazyFrame.columns", "polars.LazyFrame.dtypes", "polars.LazyFrame.schema", "Config", "DataFrame", "Data Types", "Exceptions", "Expressions", "Functions", "API reference", "Input/output", "LazyFrame", "Series", "Testing", "Utils"], "terms": {"api": [0, 10, 110, 525, 527, 631, 738, 763], "refer": [0, 94, 199, 398, 624, 708, 727, 728], "input": [0, 182, 383, 459, 513, 599, 605, 689, 718, 719, 722, 727, 728, 768], "output": [0, 10, 31, 32, 53, 55, 90, 98, 100, 101, 106, 110, 184, 185, 244, 263, 264, 272, 301, 308, 452, 459, 497, 598, 631, 718, 728, 751, 768], "function": [0, 10, 19, 26, 49, 54, 55, 86, 89, 107, 110, 138, 145, 146, 147, 184, 185, 193, 205, 206, 207, 208, 209, 210, 212, 213, 214, 225, 239, 272, 276, 278, 308, 337, 346, 347, 348, 349, 404, 424, 429, 457, 459, 461, 471, 513, 514, 527, 537, 596, 631, 659, 718, 727, 728, 737, 752, 768], "seri": [0, 9, 10, 16, 24, 26, 28, 29, 33, 36, 37, 39, 41, 46, 47, 50, 60, 61, 67, 75, 79, 84, 85, 94, 95, 109, 110, 111, 112, 113, 114, 115, 116, 119, 121, 126, 130, 131, 150, 151, 156, 157, 161, 163, 165, 166, 167, 168, 169, 171, 172, 173, 183, 184, 195, 199, 200, 201, 202, 203, 205, 218, 223, 224, 235, 236, 237, 238, 243, 259, 284, 297, 298, 456, 459, 460, 461, 463, 464, 466, 467, 468, 469, 471, 497, 513, 514, 516, 517, 520, 524, 526, 549, 550, 552, 555, 557, 559, 562, 567, 570, 573, 575, 576, 577, 579, 583, 584, 591, 592, 595, 596, 602, 618, 624, 628, 717, 718, 719, 720, 721, 722, 723, 736, 742, 745, 746, 747, 748, 750, 751, 757, 768], "datafram": [0, 4, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 248, 250, 253, 254, 255, 256, 259, 260, 262, 263, 264, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 302, 307, 338, 443, 444, 452, 456, 457, 460, 461, 464, 465, 466, 467, 468, 471, 499, 500, 512, 515, 516, 517, 518, 519, 520, 521, 522, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 593, 594, 596, 597, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 669, 692, 694, 704, 705, 715, 726, 727, 728, 729, 731, 732, 733, 735, 737, 739, 740, 741, 742, 746, 747, 749, 751, 752, 758, 759, 760, 761, 766, 768], "lazyfram": [0, 9, 44, 154, 465, 466, 737, 738, 739, 740, 741, 749, 753, 768], "express": [0, 10, 22, 24, 30, 55, 63, 73, 95, 103, 106, 107, 109, 110, 127, 128, 129, 132, 138, 140, 148, 154, 161, 163, 167, 170, 175, 178, 183, 184, 185, 195, 196, 197, 202, 216, 217, 218, 220, 226, 232, 235, 241, 243, 246, 250, 256, 259, 279, 286, 287, 289, 297, 298, 299, 327, 328, 329, 337, 416, 423, 460, 461, 464, 465, 470, 500, 512, 513, 514, 515, 525, 527, 563, 580, 598, 599, 610, 624, 630, 631, 652, 669, 694, 717, 718, 724, 736, 742, 744, 746, 747, 751, 753, 754, 758, 768], "data": [0, 9, 11, 12, 21, 42, 44, 54, 58, 64, 65, 71, 78, 82, 83, 124, 162, 199, 215, 216, 225, 239, 241, 248, 249, 256, 278, 302, 307, 322, 326, 330, 342, 344, 398, 414, 415, 424, 429, 445, 446, 448, 450, 454, 456, 466, 474, 504, 509, 510, 516, 517, 518, 519, 520, 521, 550, 566, 573, 630, 635, 662, 727, 728, 729, 730, 734, 735, 737, 749, 750, 752, 753, 754, 768], "type": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 18, 20, 26, 31, 32, 33, 47, 66, 78, 82, 83, 85, 87, 88, 110, 124, 127, 128, 129, 148, 159, 163, 165, 167, 168, 184, 202, 239, 250, 256, 263, 264, 272, 279, 287, 294, 295, 302, 308, 322, 327, 328, 329, 344, 359, 361, 424, 444, 445, 446, 448, 455, 459, 464, 465, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 512, 513, 516, 518, 521, 549, 552, 555, 557, 559, 562, 567, 584, 596, 619, 620, 621, 624, 631, 634, 637, 640, 645, 648, 651, 656, 673, 703, 704, 705, 708, 717, 718, 727, 728, 730, 734, 737, 743, 749, 750, 751, 752, 753, 754, 756, 760, 761, 768], "config": [0, 95, 298, 768], "except": [0, 43, 269, 446, 768], "test": [0, 265, 271, 728, 768], "util": [0, 256, 768], "classmethod": [1, 2, 3, 4, 5, 6, 7, 8, 261, 281], "cfg": [1, 2, 3, 4, 5, 6, 7, 8], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 770], "us": [1, 2, 4, 5, 6, 7, 9, 10, 22, 23, 26, 31, 32, 43, 47, 49, 51, 55, 63, 65, 73, 75, 86, 87, 90, 98, 102, 103, 105, 110, 138, 141, 142, 144, 145, 146, 147, 148, 153, 154, 162, 176, 184, 188, 199, 201, 203, 206, 207, 208, 209, 210, 212, 213, 214, 216, 218, 221, 225, 227, 228, 250, 257, 258, 262, 263, 264, 265, 269, 271, 276, 289, 294, 297, 302, 308, 337, 345, 347, 348, 349, 354, 358, 379, 398, 400, 402, 415, 418, 419, 420, 429, 433, 437, 445, 446, 453, 454, 456, 459, 460, 462, 464, 466, 468, 495, 497, 517, 519, 521, 525, 527, 537, 549, 573, 580, 596, 605, 606, 607, 612, 616, 618, 620, 622, 624, 631, 634, 662, 669, 689, 690, 696, 700, 702, 704, 708, 717, 719, 722, 727, 728, 729, 733, 735, 736, 737, 738, 739, 740, 741, 747, 751, 752, 753, 754, 766], "ascii": [1, 612, 616, 627, 696, 700, 711], "charact": [1, 2, 6, 7, 98, 156, 563, 612, 616, 619, 620, 627, 652, 696, 700, 703, 704, 711, 727, 737], "print": [1, 2, 4, 5, 7, 18, 30, 44, 161, 266, 370, 404, 743], "tabl": [1, 4, 5, 6, 7, 9, 55, 78, 83, 89, 516, 537, 727, 737], "n": [2, 4, 5, 10, 21, 31, 34, 45, 53, 65, 76, 77, 83, 138, 139, 151, 160, 179, 194, 202, 216, 225, 234, 236, 240, 250, 265, 271, 292, 293, 302, 307, 337, 339, 352, 360, 381, 393, 415, 429, 433, 436, 438, 441, 449, 453, 476, 477, 497, 524, 530, 540, 550, 553, 569, 573, 579, 583, 595, 620, 621, 632, 633, 635, 638, 658, 662, 668, 672, 684, 704, 705, 727, 736, 737, 748], "int": [2, 4, 5, 6, 10, 19, 22, 23, 25, 33, 34, 35, 37, 43, 45, 46, 47, 50, 51, 61, 63, 65, 68, 69, 70, 72, 74, 75, 76, 77, 84, 89, 91, 93, 96, 98, 102, 123, 127, 128, 129, 138, 139, 145, 146, 147, 151, 152, 153, 158, 159, 160, 163, 179, 194, 195, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 226, 230, 234, 235, 236, 240, 245, 256, 257, 258, 265, 269, 271, 285, 286, 288, 290, 292, 293, 296, 300, 315, 316, 322, 325, 327, 328, 329, 337, 339, 346, 347, 348, 349, 352, 353, 354, 359, 360, 380, 381, 384, 385, 387, 389, 390, 392, 393, 396, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 421, 422, 423, 425, 430, 433, 435, 436, 437, 438, 449, 453, 460, 469, 518, 521, 524, 530, 540, 578, 579, 582, 583, 591, 592, 595, 596, 608, 612, 616, 618, 620, 621, 627, 628, 629, 632, 633, 667, 668, 671, 672, 680, 681, 684, 692, 696, 700, 702, 704, 705, 711, 719, 721, 722, 723, 724, 726, 727, 728, 729, 733, 735, 736, 737, 739, 740, 741, 744, 745, 746, 747, 748, 751, 752, 753, 754, 755, 757], "set": [2, 4, 5, 6, 9, 13, 33, 43, 49, 65, 72, 86, 98, 100, 101, 110, 159, 167, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 221, 225, 226, 250, 256, 268, 269, 272, 276, 288, 301, 302, 307, 308, 356, 359, 370, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 419, 429, 430, 446, 473, 497, 518, 521, 573, 592, 618, 662, 681, 702, 727, 728, 729, 733, 737, 739, 740, 741, 749, 750, 752, 753, 754, 759], "number": [2, 4, 5, 6, 19, 20, 22, 23, 34, 44, 45, 51, 65, 69, 70, 76, 89, 98, 102, 123, 132, 138, 139, 145, 146, 147, 151, 153, 158, 160, 178, 179, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 219, 220, 221, 234, 240, 255, 256, 257, 258, 265, 271, 285, 286, 292, 337, 339, 346, 347, 348, 349, 352, 354, 360, 369, 381, 389, 390, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 422, 423, 425, 433, 436, 449, 453, 469, 508, 524, 528, 530, 540, 554, 556, 558, 560, 561, 566, 571, 572, 574, 579, 583, 591, 595, 596, 620, 621, 632, 633, 639, 641, 647, 649, 650, 655, 660, 661, 663, 668, 672, 680, 684, 704, 705, 727, 728, 737, 740, 748, 752, 753], "string": [2, 3, 8, 26, 31, 32, 43, 73, 89, 90, 98, 100, 101, 103, 206, 207, 208, 209, 210, 212, 213, 214, 231, 250, 251, 252, 256, 261, 263, 264, 269, 301, 302, 434, 456, 464, 468, 473, 476, 494, 497, 515, 549, 563, 570, 584, 634, 652, 659, 673, 727, 737, 751, 752, 754, 756, 768], "valu": [2, 17, 21, 22, 23, 27, 31, 32, 33, 38, 46, 47, 48, 49, 50, 53, 55, 56, 57, 59, 65, 69, 70, 73, 74, 75, 79, 89, 90, 91, 98, 104, 105, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 138, 139, 141, 142, 145, 146, 147, 149, 151, 152, 153, 155, 157, 158, 159, 161, 162, 164, 165, 166, 168, 169, 171, 172, 173, 174, 177, 178, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 202, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 233, 235, 236, 237, 238, 241, 242, 243, 244, 254, 257, 258, 263, 264, 266, 267, 273, 274, 275, 276, 277, 280, 282, 285, 286, 289, 290, 291, 296, 302, 303, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 324, 327, 328, 329, 331, 332, 337, 338, 339, 341, 342, 346, 347, 348, 349, 352, 353, 354, 356, 357, 358, 359, 362, 365, 367, 368, 370, 371, 372, 373, 374, 375, 377, 384, 385, 387, 388, 390, 392, 393, 396, 397, 398, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 422, 423, 427, 428, 429, 435, 437, 438, 439, 440, 448, 451, 452, 454, 455, 466, 468, 469, 471, 484, 485, 493, 513, 514, 518, 520, 528, 529, 531, 532, 533, 535, 536, 537, 541, 542, 543, 544, 545, 546, 547, 549, 551, 560, 564, 571, 575, 576, 579, 581, 582, 583, 585, 587, 588, 589, 591, 594, 595, 597, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 615, 618, 620, 621, 622, 627, 630, 634, 636, 649, 653, 660, 664, 665, 668, 670, 671, 672, 674, 676, 677, 678, 680, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 702, 704, 705, 706, 711, 717, 719, 720, 721, 722, 723, 727, 735, 736, 737, 747, 749, 750, 751, 752, 753, 754, 756, 758], "paramet": [2, 4, 5, 6, 9, 10, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 42, 43, 45, 47, 49, 51, 53, 54, 55, 57, 59, 60, 61, 63, 65, 67, 69, 70, 72, 73, 74, 75, 76, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 109, 110, 119, 121, 123, 124, 127, 128, 129, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 151, 153, 154, 158, 159, 160, 163, 167, 176, 179, 181, 184, 185, 193, 194, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 230, 234, 235, 240, 241, 244, 245, 246, 250, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 268, 269, 271, 272, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 292, 294, 295, 297, 298, 299, 300, 301, 302, 304, 307, 308, 317, 320, 322, 327, 328, 329, 333, 334, 335, 336, 337, 339, 340, 345, 346, 347, 348, 349, 352, 354, 355, 359, 360, 379, 381, 393, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 425, 429, 430, 431, 433, 436, 437, 445, 446, 449, 450, 452, 453, 455, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 476, 477, 484, 487, 496, 497, 498, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 530, 537, 538, 540, 549, 550, 553, 563, 569, 570, 573, 577, 578, 579, 580, 582, 583, 584, 591, 592, 595, 596, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 614, 615, 616, 618, 619, 620, 621, 622, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 652, 658, 659, 662, 666, 667, 668, 669, 671, 672, 673, 680, 681, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 700, 702, 703, 704, 705, 706, 708, 711, 712, 714, 717, 718, 719, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754], "turn": [3, 8, 156, 244, 250, 256, 272, 279, 465, 727, 737, 756], "global": [3, 8, 250, 256, 456, 753, 756], "cach": [3, 8, 206, 207, 208, 209, 210, 212, 213, 214, 250, 256, 287, 456, 465, 729, 737, 739, 741, 756], "column": [4, 9, 15, 16, 17, 18, 19, 20, 25, 28, 30, 31, 32, 36, 37, 42, 43, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 59, 60, 61, 66, 67, 73, 74, 75, 79, 81, 84, 86, 87, 88, 89, 90, 91, 94, 95, 96, 107, 108, 110, 119, 121, 148, 154, 175, 193, 196, 200, 202, 206, 207, 208, 209, 210, 212, 213, 214, 227, 228, 232, 246, 253, 254, 255, 262, 263, 264, 268, 269, 272, 273, 274, 275, 276, 277, 280, 282, 284, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 302, 305, 306, 456, 457, 462, 463, 464, 466, 467, 468, 469, 470, 471, 496, 498, 503, 506, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 537, 551, 554, 556, 558, 560, 561, 564, 565, 566, 571, 572, 574, 577, 598, 600, 620, 621, 624, 636, 639, 641, 647, 649, 650, 653, 654, 655, 660, 661, 663, 666, 704, 705, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 733, 734, 735, 737, 739, 740, 741, 744, 745, 746, 747, 748, 749, 753, 757, 758, 760, 761, 768], "exampl": [4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 248, 254, 255, 259, 262, 264, 266, 267, 268, 273, 274, 275, 276, 277, 278, 280, 284, 285, 286, 288, 290, 291, 293, 295, 296, 297, 298, 300, 302, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 322, 326, 327, 331, 332, 333, 334, 335, 336, 337, 338, 340, 344, 345, 346, 351, 352, 354, 355, 359, 360, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 384, 385, 386, 387, 388, 390, 393, 394, 395, 397, 398, 401, 403, 404, 405, 406, 408, 412, 414, 415, 417, 422, 426, 427, 428, 430, 431, 433, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 460, 461, 464, 466, 467, 468, 471, 497, 499, 500, 512, 515, 516, 517, 518, 519, 520, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 659, 668, 669, 672, 673, 675, 680, 681, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 702, 704, 705, 706, 708, 717, 728, 735, 737, 738, 742, 743, 746, 747, 749, 750, 751, 752, 753, 754, 758, 759, 760, 761], "pl": [4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 248, 254, 255, 259, 262, 264, 266, 267, 268, 273, 274, 275, 276, 277, 278, 280, 284, 285, 286, 288, 290, 291, 293, 295, 296, 297, 298, 300, 302, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 322, 326, 327, 331, 332, 333, 334, 335, 336, 337, 338, 340, 344, 345, 346, 351, 352, 354, 355, 359, 360, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 384, 385, 386, 387, 388, 390, 393, 394, 395, 397, 398, 400, 401, 403, 404, 405, 406, 408, 412, 414, 415, 417, 418, 419, 422, 426, 427, 428, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 460, 461, 464, 466, 467, 468, 469, 471, 496, 497, 498, 499, 500, 512, 513, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 652, 659, 668, 669, 672, 673, 675, 680, 681, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 702, 704, 705, 706, 708, 716, 717, 725, 727, 728, 735, 737, 738, 742, 743, 746, 747, 749, 750, 751, 752, 753, 754, 758, 759, 760, 761, 766], "5": [4, 9, 10, 11, 12, 14, 20, 21, 22, 23, 26, 28, 29, 30, 31, 32, 34, 35, 37, 38, 40, 43, 45, 49, 51, 55, 56, 57, 60, 64, 68, 76, 77, 78, 79, 80, 85, 87, 89, 90, 93, 94, 95, 96, 98, 105, 124, 126, 127, 138, 140, 147, 148, 150, 151, 157, 160, 163, 166, 169, 171, 172, 173, 180, 193, 194, 196, 198, 199, 203, 204, 205, 206, 207, 209, 213, 215, 222, 232, 234, 236, 240, 248, 255, 262, 264, 265, 267, 271, 274, 275, 276, 285, 286, 288, 290, 291, 292, 293, 297, 298, 300, 307, 310, 314, 317, 327, 333, 337, 338, 340, 352, 362, 393, 394, 395, 397, 398, 404, 405, 406, 408, 412, 415, 417, 426, 432, 449, 455, 461, 467, 471, 499, 500, 512, 516, 518, 519, 520, 521, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 549, 552, 566, 567, 571, 580, 583, 588, 594, 595, 604, 610, 611, 627, 632, 633, 634, 669, 672, 675, 684, 688, 694, 695, 743, 747, 753, 754], "df": [4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 248, 254, 255, 262, 264, 266, 267, 268, 273, 274, 275, 276, 277, 278, 280, 284, 285, 286, 288, 290, 291, 295, 296, 297, 300, 444, 457, 460, 461, 464, 467, 468, 499, 500, 512, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 593, 594, 596, 597, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 669, 692, 694, 699, 704, 705, 735, 737, 742, 746, 747, 752, 753, 754, 758, 759, 766], "str": [4, 9, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 28, 30, 31, 32, 34, 36, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 59, 60, 61, 62, 65, 66, 67, 69, 70, 72, 73, 74, 75, 76, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 110, 140, 148, 151, 152, 154, 156, 161, 167, 170, 175, 185, 193, 196, 202, 204, 206, 207, 208, 209, 210, 212, 213, 214, 220, 227, 228, 232, 235, 246, 251, 252, 253, 254, 255, 257, 259, 261, 262, 263, 264, 266, 268, 269, 272, 276, 281, 282, 284, 286, 287, 288, 289, 294, 295, 298, 300, 301, 302, 304, 322, 338, 352, 353, 354, 356, 384, 387, 391, 401, 418, 419, 456, 457, 458, 459, 462, 463, 464, 467, 468, 469, 470, 471, 476, 496, 497, 498, 499, 512, 513, 514, 515, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 563, 568, 570, 577, 578, 584, 596, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 652, 657, 659, 667, 673, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 702, 703, 704, 705, 706, 708, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 744, 745, 746, 747, 748, 751, 752, 753, 754, 757, 759, 761, 766, 771], "i": [4, 9, 10, 17, 19, 27, 30, 31, 32, 33, 37, 38, 40, 43, 44, 47, 49, 53, 55, 63, 65, 72, 75, 78, 80, 86, 87, 89, 90, 95, 98, 100, 101, 102, 107, 108, 109, 110, 138, 145, 146, 147, 150, 156, 159, 161, 163, 176, 184, 193, 199, 201, 203, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 221, 225, 226, 227, 228, 244, 250, 254, 256, 262, 263, 264, 267, 269, 272, 276, 279, 288, 294, 298, 301, 302, 306, 307, 308, 337, 346, 347, 348, 349, 351, 358, 359, 362, 363, 364, 366, 376, 378, 379, 398, 400, 402, 415, 416, 417, 418, 419, 420, 429, 430, 433, 442, 446, 452, 453, 456, 460, 462, 465, 466, 467, 469, 471, 495, 497, 503, 505, 506, 514, 516, 519, 520, 521, 525, 527, 537, 563, 580, 582, 592, 599, 604, 608, 609, 610, 612, 616, 618, 621, 624, 627, 631, 652, 659, 669, 671, 681, 688, 692, 693, 694, 696, 700, 702, 705, 711, 717, 727, 729, 733, 735, 737, 738, 739, 740, 741, 742, 747, 751, 752, 753, 754, 763], "rang": [4, 19, 31, 162, 346, 393, 460, 467, 471, 496, 497, 498, 551, 560, 561, 564, 565, 570, 571, 636, 649, 650, 653, 654, 659, 660, 735], "100": [4, 405, 406, 408, 460, 627, 727, 737, 740], "shape": [4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 65, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 248, 254, 255, 259, 262, 264, 267, 268, 273, 274, 275, 276, 277, 278, 280, 284, 285, 286, 288, 290, 291, 293, 295, 296, 297, 298, 300, 302, 307, 308, 309, 310, 311, 312, 313, 314, 317, 322, 326, 327, 331, 332, 333, 334, 335, 336, 337, 338, 351, 352, 354, 355, 359, 360, 362, 365, 367, 370, 371, 372, 373, 374, 375, 377, 388, 393, 394, 395, 398, 401, 402, 403, 404, 405, 406, 408, 412, 414, 415, 422, 426, 427, 428, 430, 431, 432, 436, 437, 438, 439, 440, 443, 444, 448, 450, 451, 452, 455, 456, 457, 461, 464, 466, 467, 468, 471, 497, 499, 500, 510, 512, 515, 516, 517, 518, 519, 520, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 659, 668, 669, 672, 673, 675, 680, 681, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 702, 704, 705, 706, 708, 737, 738, 742, 746, 747, 753, 754, 758], "1": [4, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 254, 255, 259, 262, 263, 264, 266, 267, 268, 269, 273, 274, 275, 276, 277, 278, 280, 284, 285, 286, 288, 290, 291, 293, 295, 296, 297, 298, 300, 302, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 322, 327, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 344, 345, 347, 348, 349, 351, 352, 354, 355, 359, 360, 362, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 384, 385, 386, 387, 388, 390, 393, 394, 395, 397, 398, 401, 402, 403, 409, 412, 414, 415, 416, 417, 422, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 460, 461, 464, 466, 467, 468, 471, 496, 497, 498, 499, 500, 512, 515, 516, 517, 518, 519, 520, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 602, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 649, 650, 652, 653, 654, 659, 660, 668, 669, 671, 672, 675, 680, 681, 684, 686, 692, 694, 704, 705, 708, 717, 724, 725, 727, 737, 738, 742, 743, 744, 745, 746, 747, 749, 750, 751, 753, 754, 757, 758, 759, 760, 761], "0": [4, 9, 10, 11, 12, 14, 15, 18, 22, 23, 26, 27, 29, 31, 33, 37, 42, 46, 47, 48, 50, 51, 52, 56, 57, 61, 65, 66, 70, 72, 73, 74, 75, 81, 84, 86, 87, 89, 90, 91, 94, 95, 96, 102, 104, 105, 111, 112, 113, 114, 115, 116, 119, 120, 121, 124, 126, 130, 131, 133, 138, 141, 142, 145, 146, 147, 149, 152, 153, 157, 159, 162, 165, 168, 169, 171, 172, 173, 176, 181, 182, 184, 186, 187, 188, 189, 192, 194, 195, 198, 199, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 222, 223, 224, 225, 229, 230, 233, 237, 238, 239, 245, 248, 268, 275, 280, 286, 287, 290, 296, 297, 298, 300, 302, 309, 310, 311, 312, 313, 314, 317, 322, 326, 331, 332, 337, 338, 340, 345, 347, 348, 349, 359, 367, 369, 371, 372, 373, 374, 375, 379, 385, 386, 393, 397, 398, 404, 406, 409, 415, 426, 427, 428, 432, 433, 439, 440, 443, 448, 453, 460, 461, 467, 471, 500, 514, 527, 528, 529, 531, 532, 533, 534, 535, 536, 538, 539, 551, 554, 557, 558, 562, 564, 566, 567, 572, 575, 576, 580, 582, 588, 608, 627, 639, 647, 655, 661, 669, 671, 686, 692, 694, 711, 725, 727, 728, 729, 733, 735, 737, 738, 739, 740, 741, 743, 747, 751, 752, 753, 754, 758, 760, 761], "2": [4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 104, 105, 106, 108, 109, 110, 117, 119, 120, 121, 123, 124, 125, 126, 127, 132, 133, 134, 135, 136, 137, 138, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 248, 254, 255, 259, 262, 264, 266, 268, 273, 274, 275, 276, 277, 278, 280, 284, 285, 286, 288, 290, 291, 293, 295, 296, 297, 298, 300, 302, 304, 307, 308, 310, 314, 317, 331, 334, 335, 336, 337, 338, 340, 344, 345, 346, 347, 348, 349, 351, 352, 354, 355, 359, 360, 362, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 382, 384, 385, 386, 387, 388, 390, 393, 394, 395, 397, 398, 401, 403, 404, 405, 406, 409, 412, 414, 415, 417, 422, 427, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 449, 450, 451, 452, 453, 455, 456, 457, 461, 464, 466, 467, 468, 471, 499, 500, 512, 515, 516, 517, 518, 519, 520, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 549, 552, 554, 555, 557, 558, 559, 560, 562, 563, 565, 566, 567, 570, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 602, 604, 607, 609, 610, 611, 614, 615, 618, 620, 621, 622, 625, 626, 628, 629, 631, 632, 633, 634, 659, 668, 669, 672, 673, 675, 680, 681, 684, 686, 688, 693, 694, 698, 699, 704, 705, 717, 735, 737, 738, 742, 743, 746, 747, 749, 750, 753, 758, 759, 760, 761], "98": [4, 37, 227, 228, 235], "99": [4, 22, 23, 37, 40, 105, 151, 153, 227, 228, 235, 345, 352], "i64": [4, 9, 10, 11, 12, 13, 15, 17, 18, 20, 21, 23, 24, 28, 29, 30, 31, 32, 34, 36, 37, 38, 42, 43, 45, 46, 49, 50, 53, 54, 55, 56, 59, 60, 61, 62, 65, 67, 69, 70, 72, 73, 75, 76, 77, 79, 84, 86, 87, 88, 89, 90, 92, 94, 95, 96, 106, 109, 110, 123, 127, 134, 135, 136, 137, 139, 140, 148, 150, 151, 153, 154, 155, 158, 160, 161, 162, 163, 166, 169, 171, 172, 173, 175, 177, 180, 183, 184, 185, 186, 189, 190, 193, 194, 196, 197, 200, 201, 203, 204, 216, 218, 219, 221, 222, 226, 227, 232, 233, 234, 235, 236, 241, 243, 246, 248, 254, 255, 259, 262, 264, 267, 268, 273, 276, 277, 278, 284, 285, 286, 288, 291, 293, 295, 297, 298, 300, 302, 307, 308, 327, 333, 334, 335, 336, 338, 351, 352, 354, 355, 360, 362, 370, 388, 401, 405, 408, 412, 415, 422, 426, 430, 431, 436, 437, 438, 444, 450, 452, 455, 457, 464, 466, 468, 500, 512, 516, 517, 518, 519, 520, 521, 525, 526, 527, 529, 530, 531, 532, 535, 537, 539, 540, 549, 552, 553, 555, 557, 559, 562, 567, 569, 580, 581, 582, 585, 587, 589, 590, 593, 594, 597, 614, 615, 629, 631, 632, 633, 634, 669, 737, 742, 746, 747, 754, 758], "10": [4, 12, 21, 29, 31, 32, 34, 36, 37, 38, 51, 54, 56, 60, 61, 76, 87, 95, 98, 102, 109, 117, 118, 119, 120, 121, 127, 132, 137, 139, 141, 142, 156, 159, 160, 162, 167, 178, 179, 182, 194, 207, 226, 234, 263, 264, 267, 278, 291, 298, 308, 327, 345, 351, 360, 370, 381, 383, 393, 436, 471, 497, 500, 524, 528, 529, 531, 532, 533, 534, 535, 536, 538, 539, 573, 579, 583, 591, 592, 595, 627, 668, 672, 680, 681, 684, 735, 737, 743, 748], "3": [4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 105, 106, 107, 110, 119, 120, 121, 123, 124, 126, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 174, 175, 176, 178, 180, 181, 182, 183, 185, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 225, 227, 228, 229, 232, 234, 235, 236, 242, 243, 244, 246, 248, 254, 255, 259, 262, 263, 264, 266, 267, 268, 269, 273, 274, 275, 276, 277, 278, 280, 284, 285, 286, 288, 290, 291, 293, 295, 296, 297, 298, 300, 302, 304, 307, 308, 309, 311, 312, 313, 317, 322, 331, 332, 333, 334, 335, 336, 337, 338, 340, 344, 346, 351, 352, 354, 355, 359, 360, 362, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 384, 385, 386, 387, 388, 390, 393, 394, 395, 397, 398, 401, 403, 404, 408, 412, 414, 415, 417, 422, 427, 428, 429, 430, 431, 433, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 450, 451, 452, 453, 455, 456, 457, 461, 464, 466, 467, 468, 471, 497, 500, 512, 515, 516, 517, 518, 519, 520, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 549, 550, 551, 552, 553, 554, 558, 560, 564, 565, 566, 569, 570, 571, 572, 573, 578, 579, 580, 581, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603, 605, 606, 607, 608, 611, 613, 617, 618, 619, 620, 621, 622, 623, 628, 629, 631, 632, 633, 634, 659, 668, 669, 672, 675, 680, 681, 684, 689, 690, 691, 692, 695, 702, 706, 717, 728, 737, 738, 742, 743, 746, 747, 749, 750, 758, 759, 760, 761], "4": [4, 9, 10, 11, 12, 14, 17, 20, 21, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 51, 53, 54, 55, 56, 60, 64, 68, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 104, 105, 109, 110, 120, 123, 124, 126, 127, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 149, 150, 152, 153, 157, 158, 160, 161, 162, 163, 169, 171, 172, 173, 178, 180, 182, 185, 193, 195, 196, 198, 199, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 219, 220, 222, 226, 227, 228, 229, 232, 234, 235, 236, 239, 248, 254, 255, 262, 263, 264, 267, 268, 269, 273, 274, 275, 276, 277, 278, 280, 285, 286, 288, 290, 291, 293, 295, 296, 297, 298, 300, 307, 310, 317, 327, 337, 338, 340, 351, 354, 362, 365, 370, 372, 373, 374, 375, 377, 393, 394, 395, 398, 412, 415, 417, 426, 430, 431, 437, 438, 448, 455, 456, 461, 466, 468, 497, 500, 516, 517, 518, 519, 520, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 551, 555, 558, 559, 560, 564, 565, 567, 570, 571, 572, 574, 579, 580, 583, 591, 592, 595, 603, 612, 616, 618, 620, 621, 624, 631, 632, 633, 654, 659, 668, 669, 672, 680, 681, 684, 687, 695, 696, 700, 702, 704, 705, 708, 737, 743, 746, 747, 749, 750, 754, 758], "95": [4, 105], "96": [4, 105], "97": [4, 37, 105], "row": [5, 9, 10, 17, 21, 24, 26, 31, 33, 34, 39, 41, 43, 44, 45, 49, 72, 76, 77, 80, 87, 89, 96, 98, 100, 102, 110, 150, 156, 160, 179, 194, 203, 226, 234, 250, 254, 256, 259, 260, 263, 265, 269, 270, 271, 272, 276, 288, 292, 293, 294, 300, 307, 351, 360, 381, 393, 402, 430, 436, 505, 508, 511, 514, 518, 519, 521, 524, 527, 530, 540, 632, 633, 727, 728, 729, 733, 737, 739, 740, 741, 748, 752, 753], "width": [6, 9, 612, 616, 627, 696, 700, 711, 727], "draw": 6, "char": [6, 456], "utf8": [7, 18, 19, 26, 66, 82, 150, 156, 351, 378, 446, 456, 468, 584, 602, 606, 608, 609, 610, 618, 619, 620, 621, 624, 657, 673, 686, 690, 692, 693, 694, 702, 703, 704, 705, 708, 727, 737, 751, 760, 761], "off": [8, 244, 250, 256, 272, 279, 465, 727, 737, 756], "class": [9, 18, 66, 82, 83, 103, 302, 344, 444, 445, 446, 456, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 516, 520, 751, 752, 760, 761, 768, 770], "dict": [9, 53, 59, 66, 79, 80, 102, 272, 282, 356, 517, 518, 631, 727, 728, 729, 730, 733, 734, 737, 739, 741, 753, 761], "sequenc": [9, 21, 30, 42, 67, 86, 90, 95, 148, 163, 167, 184, 268, 284, 289, 298, 302, 307, 370, 419, 457, 458, 459, 462, 464, 465, 466, 467, 468, 487, 512, 514, 517, 518, 519, 521, 525, 630, 718, 719, 722, 742, 746, 747, 752, 753, 754], "ani": [9, 10, 17, 21, 23, 24, 26, 53, 54, 63, 64, 79, 80, 82, 83, 89, 98, 110, 124, 153, 167, 184, 203, 205, 220, 227, 235, 254, 258, 278, 302, 307, 308, 354, 370, 402, 404, 419, 437, 445, 446, 459, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 513, 517, 518, 519, 521, 566, 577, 580, 601, 624, 655, 666, 669, 708, 717, 727, 737, 751, 753, 754], "np": [9, 24, 31, 82, 165, 168, 235, 302, 367, 371, 372, 373, 404, 419, 437, 446, 519], "ndarrai": [9, 24, 82, 235, 302, 419, 437, 446, 519], "pa": [9, 78, 442, 516, 738], "pd": [9, 83, 239, 447, 448, 520, 728, 735], "pli": [9, 24, 31, 32, 42, 55, 235, 263, 264, 268, 437, 497, 514, 538, 549, 550, 553, 569, 573, 579, 596, 605, 606, 634, 635, 638, 658, 662, 668, 689, 690, 725], "none": [9, 10, 11, 14, 17, 22, 23, 31, 32, 33, 38, 42, 43, 49, 52, 63, 65, 70, 72, 79, 81, 86, 87, 88, 89, 90, 95, 97, 98, 99, 100, 101, 102, 106, 109, 110, 120, 123, 127, 132, 141, 142, 145, 146, 147, 148, 151, 152, 153, 158, 159, 162, 169, 170, 171, 172, 173, 175, 178, 184, 192, 194, 200, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 220, 221, 222, 226, 239, 248, 254, 257, 258, 263, 264, 267, 268, 269, 272, 276, 286, 287, 288, 294, 295, 298, 301, 302, 308, 315, 316, 326, 327, 338, 340, 345, 347, 348, 349, 352, 353, 354, 358, 359, 361, 362, 374, 375, 379, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 419, 423, 425, 426, 429, 430, 433, 441, 448, 453, 457, 459, 468, 469, 471, 476, 485, 497, 498, 499, 512, 513, 517, 518, 519, 520, 521, 522, 570, 582, 592, 596, 602, 603, 605, 606, 607, 610, 611, 612, 616, 618, 620, 621, 622, 624, 627, 628, 629, 631, 659, 671, 681, 686, 687, 689, 690, 691, 694, 695, 696, 700, 702, 704, 705, 706, 708, 717, 718, 726, 727, 728, 729, 731, 733, 735, 736, 737, 739, 740, 741, 743, 745, 746, 749, 750, 751, 752, 753, 754, 756, 757], "columnstyp": 9, "orient": [9, 100, 519, 521], "two": [9, 26, 49, 55, 85, 105, 140, 227, 228, 235, 276, 340, 457, 470, 517, 519, 521, 525, 526, 527, 537, 724, 735, 744, 746], "dimension": [9, 302, 517, 519, 521], "structur": [9, 21, 307, 504, 509, 510], "repres": [9, 98, 302, 419, 433, 453, 464, 485, 493, 497, 516, 517, 519, 520, 521, 561, 650, 717], "panda": [9, 83, 239, 447, 448, 520, 728, 735, 743], "variou": [9, 103, 302, 768], "form": [9, 89, 194, 302, 393], "must": [9, 31, 32, 43, 63, 148, 184, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 272, 302, 471, 517, 519, 521, 749], "contain": [9, 55, 167, 279, 302, 356, 389, 442, 517, 520, 604, 607, 608, 609, 610, 621, 622, 688, 691, 692, 693, 694, 705, 706], "mai": [9, 19, 21, 43, 69, 70, 89, 102, 138, 148, 151, 206, 207, 208, 209, 210, 212, 213, 214, 219, 220, 272, 285, 286, 300, 307, 337, 346, 352, 422, 423, 466, 471, 514, 516, 550, 556, 591, 631, 635, 641, 659, 680, 727, 729, 738, 739], "other": [9, 17, 21, 27, 42, 43, 49, 63, 109, 127, 128, 129, 140, 167, 228, 239, 254, 268, 269, 276, 299, 302, 307, 327, 328, 329, 340, 370, 417, 448, 455, 497, 577, 666, 727, 728, 737, 749, 750, 768], "datatyp": [9, 10, 18, 26, 66, 98, 110, 124, 148, 184, 239, 272, 302, 308, 322, 338, 344, 361, 364, 376, 378, 448, 459, 464, 512, 624, 631, 708, 717, 718, 727, 728, 730, 734, 751, 752, 753, 754, 760, 761, 768], "pair": [9, 59, 282], "default": [9, 19, 30, 32, 33, 43, 49, 55, 65, 96, 97, 98, 99, 100, 101, 102, 144, 159, 163, 181, 194, 199, 216, 221, 262, 264, 269, 276, 301, 302, 345, 346, 359, 393, 398, 415, 433, 453, 462, 516, 517, 519, 520, 521, 549, 592, 596, 608, 618, 624, 634, 681, 692, 702, 717, 727, 737, 751, 752, 753, 754], "label": [9, 205, 206, 207, 208, 209, 210, 212, 213, 214, 404, 405, 406, 407, 408, 409, 411, 412, 413, 471, 517, 519, 521], "result": [9, 21, 31, 70, 98, 100, 101, 145, 146, 147, 176, 203, 205, 206, 207, 208, 209, 210, 212, 213, 214, 218, 220, 247, 272, 286, 301, 307, 347, 348, 349, 379, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 420, 423, 446, 517, 519, 521, 525, 619, 620, 703, 704, 718, 735, 737, 739, 741, 747, 754], "If": [9, 10, 21, 31, 32, 43, 49, 53, 65, 72, 82, 83, 86, 98, 100, 101, 102, 110, 127, 128, 129, 154, 176, 184, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 218, 221, 225, 226, 227, 228, 240, 263, 264, 268, 269, 272, 276, 288, 301, 302, 307, 308, 327, 328, 329, 358, 379, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 420, 429, 430, 442, 446, 449, 456, 457, 460, 462, 469, 471, 497, 517, 519, 520, 521, 527, 537, 592, 618, 619, 620, 621, 624, 631, 681, 702, 703, 704, 705, 708, 717, 727, 728, 729, 733, 735, 737, 739, 740, 741], "specifi": [9, 19, 23, 98, 145, 146, 147, 153, 202, 258, 302, 346, 347, 348, 349, 354, 497, 506, 517, 519, 521, 612, 616, 696, 700, 753], "overrid": [9, 517, 751, 752, 754], "alreadi": [9, 138, 337, 517, 580, 669], "present": [9, 167, 517, 753], "match": [9, 43, 63, 269, 466, 508, 517, 519, 521, 603, 604, 607, 609, 610, 614, 615, 622, 624, 687, 688, 691, 693, 694, 698, 699, 706, 708, 749, 750], "dimens": [9, 203, 402, 517, 519, 521], "col": [9, 10, 24, 30, 31, 32, 40, 54, 63, 73, 88, 94, 95, 98, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 161, 162, 163, 164, 166, 167, 170, 174, 175, 176, 177, 181, 182, 183, 186, 187, 188, 189, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 259, 262, 264, 266, 278, 295, 297, 298, 402, 460, 461, 467, 468, 499, 513, 515, 519, 521, 523, 525, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 593, 594, 596, 597, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 652, 669, 692, 694, 708, 725, 737, 746, 747, 752, 753, 758, 766], "whether": [9, 31, 32, 98, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 461, 497, 519, 521, 754], "interpret": [9, 519, 521, 727, 737], "infer": [9, 10, 98, 203, 302, 402, 519, 521, 624, 727, 728, 737, 740, 751], "thi": [9, 10, 17, 19, 21, 26, 30, 31, 32, 33, 37, 39, 41, 43, 44, 46, 47, 48, 49, 50, 51, 53, 56, 57, 58, 65, 67, 70, 72, 74, 75, 78, 80, 82, 83, 86, 87, 89, 90, 91, 92, 96, 98, 100, 102, 107, 109, 110, 119, 121, 132, 138, 148, 150, 151, 156, 161, 162, 163, 167, 178, 183, 184, 193, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 218, 220, 221, 226, 227, 228, 240, 241, 242, 243, 244, 247, 250, 254, 256, 262, 263, 264, 266, 269, 272, 276, 279, 284, 286, 287, 288, 294, 299, 300, 301, 302, 307, 308, 317, 320, 337, 342, 344, 346, 351, 352, 358, 363, 364, 369, 370, 376, 378, 380, 384, 385, 386, 387, 389, 390, 391, 392, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 408, 411, 412, 413, 415, 418, 419, 420, 421, 423, 424, 425, 430, 431, 433, 435, 442, 444, 445, 446, 447, 449, 450, 453, 454, 456, 457, 460, 461, 465, 466, 467, 469, 471, 495, 512, 513, 514, 516, 517, 518, 519, 520, 521, 525, 527, 549, 550, 556, 563, 573, 580, 584, 598, 599, 612, 616, 627, 628, 631, 634, 635, 641, 652, 659, 662, 669, 673, 696, 700, 711, 712, 715, 727, 728, 729, 733, 737, 738, 739, 740, 741, 742, 747, 749, 750, 751, 752, 753, 754, 756, 763, 768, 770], "doe": [9, 21, 242, 256, 262, 272, 307, 358, 424, 454, 508, 513, 519, 521, 573, 629, 662, 727, 728, 737, 749, 750], "yield": [9, 19, 21, 86, 307, 346, 519, 521, 727, 737], "conclus": [9, 519, 521], "note": [9, 22, 30, 31, 32, 42, 43, 47, 63, 80, 82, 86, 87, 90, 136, 137, 141, 142, 206, 207, 208, 209, 210, 212, 213, 214, 225, 233, 250, 256, 257, 263, 264, 265, 271, 287, 294, 335, 336, 418, 419, 424, 429, 435, 446, 497, 519, 521, 537, 563, 580, 624, 652, 669, 727, 735, 752, 753, 754, 763], "some": [9, 17, 254, 370, 727, 737], "method": [9, 10, 17, 38, 57, 97, 99, 102, 103, 107, 110, 122, 125, 143, 198, 199, 206, 207, 208, 209, 210, 212, 213, 214, 231, 242, 254, 267, 280, 302, 308, 321, 323, 343, 362, 397, 398, 409, 434, 448, 456, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 527, 538, 631, 725, 727, 728, 751, 766, 768, 771], "intern": [9, 20, 22, 29, 30, 36, 67, 73, 79, 94, 95, 140, 152, 163, 193, 195, 202, 217, 220, 226, 228, 255, 257, 259, 262, 266, 279, 284, 286, 289, 297, 298, 353, 355, 423, 444, 459, 460, 461, 462, 465, 467, 468, 470, 496, 498, 515, 719, 722, 724, 728, 736, 742, 744, 746, 747, 749, 751, 753, 758], "convert": [9, 64, 79, 80, 81, 82, 83, 85, 445, 446, 447, 520, 522, 596, 715, 728, 735], "befor": [9, 21, 43, 88, 136, 137, 138, 194, 205, 206, 207, 208, 209, 210, 212, 213, 214, 233, 266, 269, 295, 307, 335, 336, 337, 393, 404, 405, 406, 407, 408, 409, 411, 412, 413, 435, 627, 711, 737], "collect": [9, 44, 78, 110, 193, 254, 255, 256, 259, 262, 267, 268, 273, 274, 275, 276, 277, 278, 280, 284, 285, 286, 288, 290, 291, 293, 296, 297, 298, 300, 460, 465, 467, 631, 736, 738, 746], "back": [9, 21, 307], "can": [9, 10, 18, 26, 30, 31, 55, 73, 86, 89, 103, 110, 138, 148, 162, 175, 190, 201, 206, 207, 208, 209, 210, 212, 213, 214, 218, 225, 244, 250, 263, 289, 300, 302, 308, 337, 388, 400, 420, 429, 457, 460, 464, 497, 504, 512, 525, 527, 551, 554, 556, 558, 560, 561, 563, 564, 565, 566, 571, 572, 574, 580, 596, 610, 631, 636, 639, 641, 647, 649, 650, 652, 653, 654, 655, 660, 661, 663, 669, 694, 719, 727, 728, 729, 737, 738, 739, 747, 752, 753, 754, 766], "lead": [9, 218, 235, 244, 272, 420, 613, 617, 623, 627, 631, 697, 707, 711, 719, 722], "unexpect": [9, 507], "behavior": [9, 110, 459, 719, 722], "when": [9, 10, 18, 19, 21, 23, 26, 31, 63, 127, 128, 129, 145, 146, 147, 153, 184, 258, 302, 307, 327, 328, 329, 346, 347, 348, 349, 354, 418, 419, 456, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 599, 624, 727, 729, 733, 737, 739, 740, 753, 754, 756], "subclass": 9, "For": [9, 21, 32, 42, 43, 73, 124, 201, 225, 264, 269, 307, 400, 429, 446, 514, 515, 527, 599, 728], "mydatafram": 9, "pass": [9, 10, 102, 161, 266, 272, 287, 308, 497, 517, 553, 638, 728, 752, 753, 754], "isinst": [9, 753, 754], "lazi": [9, 43, 110, 193, 248, 254, 255, 259, 262, 266, 267, 268, 269, 273, 274, 275, 276, 277, 278, 280, 284, 285, 286, 288, 290, 291, 293, 295, 296, 297, 298, 300, 460, 466, 525, 631, 737, 753, 759, 760, 761, 768, 770], "fals": [9, 11, 12, 14, 26, 27, 29, 30, 31, 36, 37, 39, 40, 41, 43, 47, 51, 53, 55, 56, 65, 71, 73, 79, 83, 86, 87, 90, 92, 95, 100, 102, 107, 108, 119, 121, 133, 134, 135, 136, 137, 138, 144, 145, 146, 147, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 184, 199, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 218, 225, 227, 228, 240, 241, 244, 248, 250, 256, 262, 263, 268, 269, 272, 279, 287, 289, 298, 302, 307, 317, 320, 322, 326, 333, 334, 335, 336, 337, 345, 347, 348, 349, 355, 363, 365, 367, 370, 371, 372, 373, 374, 375, 377, 379, 394, 395, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 420, 424, 429, 431, 445, 446, 449, 450, 452, 454, 455, 460, 461, 462, 465, 528, 529, 531, 532, 533, 535, 539, 566, 578, 580, 593, 603, 605, 607, 614, 615, 619, 620, 622, 624, 655, 669, 682, 687, 689, 691, 698, 699, 703, 704, 706, 708, 717, 727, 728, 729, 733, 736, 737, 740, 741, 746, 749, 750, 751, 752, 753, 754, 758], "construct": [9, 261, 281, 302, 516, 517, 518, 519, 520, 521], "from": [9, 14, 15, 19, 21, 31, 32, 43, 44, 49, 59, 63, 65, 67, 86, 87, 89, 90, 98, 133, 148, 162, 176, 194, 216, 227, 228, 242, 244, 253, 254, 256, 261, 263, 264, 276, 281, 282, 284, 294, 299, 307, 342, 346, 364, 379, 393, 415, 452, 455, 496, 497, 498, 499, 512, 516, 517, 518, 519, 520, 521, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 608, 624, 636, 637, 639, 640, 641, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 692, 717, 726, 727, 728, 729, 731, 732, 733, 735, 737, 739, 740, 741, 751, 752, 753, 754], "dictionari": [9, 53, 79, 80, 338, 356, 517, 518, 521, 727, 730, 734, 737], "b": [9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 36, 37, 39, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 65, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 106, 109, 110, 120, 123, 124, 125, 132, 140, 141, 142, 148, 150, 152, 153, 154, 158, 159, 162, 165, 168, 169, 170, 171, 172, 173, 175, 178, 180, 185, 190, 192, 196, 204, 226, 231, 232, 242, 244, 246, 248, 254, 255, 259, 262, 268, 273, 274, 275, 276, 277, 278, 280, 284, 285, 286, 288, 290, 291, 293, 295, 296, 297, 298, 300, 307, 338, 340, 345, 346, 354, 370, 378, 401, 417, 451, 456, 457, 466, 468, 470, 500, 512, 515, 516, 517, 518, 519, 520, 521, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 549, 577, 580, 584, 586, 614, 628, 629, 631, 632, 633, 634, 669, 698, 724, 728, 744, 746, 747, 759, 760, 761], "notic": [9, 302], "dtype": [9, 31, 32, 43, 83, 110, 111, 112, 113, 114, 115, 116, 119, 121, 124, 127, 128, 129, 130, 131, 136, 137, 148, 150, 156, 183, 184, 201, 202, 206, 207, 208, 209, 210, 212, 213, 214, 223, 224, 233, 235, 237, 238, 239, 243, 244, 263, 264, 269, 302, 322, 326, 327, 328, 329, 335, 336, 346, 351, 361, 366, 403, 417, 435, 446, 448, 459, 467, 469, 512, 552, 555, 557, 559, 562, 567, 573, 575, 576, 577, 584, 602, 618, 637, 640, 645, 648, 651, 656, 662, 664, 665, 666, 673, 686, 702, 708, 717, 718, 727, 737, 746, 751, 752, 753, 754], "automat": [9, 302, 727, 735, 737, 753, 754], "int64": [9, 18, 26, 31, 32, 54, 66, 78, 136, 137, 148, 201, 233, 239, 263, 264, 278, 302, 335, 336, 344, 400, 417, 435, 446, 448, 512, 552, 555, 557, 559, 562, 567, 637, 640, 645, 648, 651, 656, 760, 761], "In": [9, 10, 19, 21, 31, 32, 110, 227, 228, 263, 264, 302, 307, 346, 399, 598, 741, 753, 754], "order": [9, 30, 31, 32, 53, 55, 65, 87, 90, 119, 121, 125, 199, 216, 217, 218, 227, 228, 241, 242, 262, 263, 264, 289, 294, 317, 320, 398, 403, 415, 416, 420, 450, 451, 462, 549, 629, 634, 714, 749], "your": [9, 250, 265, 271, 272, 727, 749, 750], "initi": [9, 514], "list": [9, 13, 15, 17, 18, 19, 20, 24, 29, 31, 32, 36, 43, 49, 51, 53, 55, 64, 73, 79, 80, 81, 86, 87, 88, 89, 95, 103, 105, 122, 148, 150, 156, 175, 184, 193, 202, 203, 205, 206, 207, 208, 209, 210, 212, 213, 214, 220, 227, 228, 235, 253, 254, 255, 259, 262, 263, 264, 269, 276, 294, 295, 298, 299, 302, 321, 325, 346, 351, 355, 361, 370, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 437, 445, 465, 467, 471, 476, 500, 522, 526, 537, 599, 600, 609, 619, 628, 629, 693, 703, 713, 714, 719, 722, 726, 727, 729, 733, 735, 737, 746, 747, 752, 753, 754, 759, 760, 768], "col1": [9, 89], "float32": [9, 26, 98, 302, 366], "col2": [9, 89], "df2": [9, 21, 27, 92, 456, 466, 749], "f32": [9, 199, 302, 398, 500, 580, 669], "Or": [9, 31, 32, 43, 90, 193, 263, 264, 269, 758], "name": [9, 13, 15, 16, 17, 25, 28, 42, 43, 49, 55, 59, 66, 79, 85, 86, 88, 94, 95, 96, 106, 148, 175, 185, 196, 232, 253, 268, 269, 276, 282, 289, 295, 298, 300, 302, 304, 326, 356, 401, 457, 458, 464, 470, 471, 497, 503, 512, 518, 519, 520, 521, 524, 570, 596, 598, 600, 628, 629, 630, 659, 712, 713, 714, 716, 724, 725, 726, 727, 728, 729, 730, 733, 734, 736, 737, 739, 740, 741, 744, 747, 748, 749, 750, 751, 752, 753, 754, 759, 761, 768], "compat": [9, 102], "all": [9, 17, 39, 41, 44, 47, 49, 51, 58, 72, 81, 90, 103, 108, 109, 122, 123, 125, 132, 138, 143, 148, 158, 159, 162, 165, 168, 169, 171, 172, 173, 178, 180, 184, 185, 190, 192, 196, 199, 204, 226, 231, 232, 244, 254, 272, 276, 288, 302, 321, 323, 337, 343, 365, 377, 398, 430, 434, 464, 465, 466, 474, 497, 512, 516, 518, 520, 521, 522, 580, 584, 594, 604, 609, 610, 614, 615, 669, 673, 683, 688, 693, 694, 698, 699, 727, 728, 729, 737, 739, 740, 746, 751, 752, 754, 766, 768], "valid": [9, 19, 138, 227, 337, 346, 358, 603, 604, 608, 609, 610, 687, 688, 692, 693, 694, 698, 699, 729, 733, 754], "df3": 9, "numpi": [9, 82, 302, 367, 371, 372, 373, 404, 446, 454, 519, 743], "import": [9, 14, 31, 43, 83, 89, 90, 98, 272, 331, 364, 367, 371, 372, 373, 404, 427, 439, 476, 497, 499, 516, 519, 520, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 659, 717, 735, 737, 738, 751, 752, 753, 754], "arrai": [9, 19, 78, 82, 127, 128, 129, 133, 134, 135, 136, 137, 182, 206, 207, 209, 212, 213, 214, 218, 302, 327, 328, 329, 333, 334, 335, 336, 346, 383, 405, 406, 408, 411, 412, 413, 420, 424, 442, 446, 454, 467, 484, 500, 516, 519, 577, 586, 587, 588, 589, 590, 593, 594, 604, 606, 608, 609, 610, 666, 675, 676, 677, 678, 679, 682, 683, 688, 690, 692, 693, 694, 727], "df4": 9, "6": [9, 10, 13, 15, 16, 17, 18, 20, 21, 24, 25, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 40, 42, 45, 46, 47, 48, 49, 50, 52, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 88, 89, 90, 91, 92, 94, 95, 96, 98, 110, 123, 124, 136, 137, 140, 144, 150, 152, 153, 158, 160, 162, 180, 193, 197, 199, 200, 203, 206, 207, 208, 209, 210, 212, 213, 214, 227, 228, 234, 236, 254, 255, 259, 262, 264, 267, 268, 276, 284, 285, 286, 288, 293, 295, 297, 298, 300, 307, 331, 335, 336, 338, 340, 351, 398, 417, 435, 457, 500, 516, 518, 519, 520, 521, 525, 530, 537, 539, 540, 551, 563, 564, 565, 566, 572, 604, 632, 633, 661, 688, 746, 747, 759, 760, 761], "c": [9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 26, 27, 29, 30, 31, 34, 36, 37, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 61, 62, 63, 65, 66, 67, 69, 70, 72, 73, 74, 75, 76, 78, 81, 82, 83, 84, 86, 87, 89, 91, 92, 95, 98, 102, 110, 242, 244, 248, 254, 255, 259, 262, 268, 276, 284, 288, 298, 338, 378, 451, 456, 457, 468, 515, 520, 528, 529, 530, 531, 532, 533, 535, 537, 539, 540, 577, 584, 586, 620, 624, 631, 632, 633, 704, 708, 728, 737, 746, 747, 752, 759, 760, 761], "attribut": [9, 103, 302, 476, 477, 484, 751, 768], "get": [9, 13, 18, 28, 29, 31, 32, 34, 35, 39, 41, 45, 51, 63, 66, 68, 72, 76, 81, 93, 105, 117, 118, 119, 120, 121, 133, 134, 135, 136, 137, 155, 160, 164, 166, 174, 177, 179, 186, 187, 188, 189, 198, 226, 230, 233, 234, 241, 245, 260, 263, 264, 265, 270, 271, 288, 292, 302, 315, 316, 317, 318, 319, 320, 325, 333, 334, 335, 336, 344, 356, 360, 361, 365, 368, 377, 381, 384, 386, 387, 389, 391, 394, 395, 397, 430, 433, 436, 441, 442, 443, 450, 453, 454, 495, 513, 524, 530, 540, 542, 543, 544, 545, 546, 547, 548, 553, 581, 585, 586, 597, 598, 600, 611, 632, 633, 638, 670, 674, 675, 685, 695, 713, 719, 720, 721, 722, 730, 734, 745, 748, 755, 757, 759, 760, 761], "height": [9, 17], "schema": [9, 10, 11, 12, 18, 248, 249, 272, 330, 466, 509, 598, 631, 727, 730, 734, 737, 740, 753, 760], "__init__": [9, 103, 302, 456, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 751], "f": [10, 14, 17, 45, 78, 86, 89, 110, 184, 185, 254, 272, 298, 459, 467, 514, 527, 596, 624, 631, 708, 718], "callabl": [10, 26, 54, 110, 184, 185, 205, 272, 278, 308, 404, 459, 514, 527, 596, 631, 718, 737], "tupl": [10, 63, 64, 68, 203, 279, 287, 402, 421, 735], "return_dtyp": [10, 110, 184, 308, 459, 718], "option": [10, 17, 33, 43, 49, 63, 65, 72, 79, 81, 86, 90, 95, 110, 123, 145, 146, 147, 158, 159, 176, 184, 205, 206, 207, 208, 209, 210, 212, 213, 214, 221, 225, 226, 254, 268, 269, 276, 287, 288, 298, 308, 379, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 425, 429, 445, 457, 459, 471, 498, 499, 517, 522, 570, 592, 618, 624, 631, 702, 717, 718, 727, 728, 729, 733, 735, 739, 740, 741, 743, 751, 752, 753, 754], "inference_s": 10, "256": [10, 393], "custom": [10, 110, 184, 205, 272, 404, 459, 527, 596, 718], "over": [10, 21, 30, 86, 110, 138, 153, 162, 184, 185, 205, 206, 207, 208, 209, 210, 212, 213, 214, 307, 308, 337, 404, 405, 406, 408, 412, 459, 514, 527, 537, 631, 718, 727, 737, 753], "The": [10, 31, 32, 33, 38, 43, 63, 88, 90, 102, 123, 151, 156, 158, 159, 184, 199, 202, 205, 206, 207, 208, 209, 210, 212, 213, 214, 225, 228, 248, 250, 256, 262, 263, 264, 265, 267, 269, 271, 272, 279, 295, 326, 352, 359, 362, 398, 404, 405, 406, 407, 408, 409, 411, 412, 413, 429, 462, 484, 487, 537, 551, 560, 561, 563, 564, 570, 571, 602, 605, 606, 612, 616, 627, 631, 636, 649, 650, 652, 653, 659, 660, 686, 689, 690, 696, 700, 711, 727, 733, 735, 737, 766, 771], "ar": [10, 17, 19, 22, 26, 31, 32, 43, 44, 49, 63, 79, 83, 90, 102, 107, 136, 137, 141, 142, 144, 165, 167, 168, 169, 171, 172, 173, 176, 199, 202, 203, 205, 211, 225, 227, 228, 233, 254, 257, 263, 264, 265, 269, 271, 272, 276, 279, 299, 302, 305, 307, 335, 336, 345, 346, 356, 358, 367, 370, 371, 372, 373, 374, 375, 379, 398, 402, 404, 410, 429, 435, 446, 454, 456, 460, 462, 466, 468, 497, 505, 511, 516, 518, 520, 521, 570, 596, 659, 727, 728, 735, 737, 739, 740, 749, 750, 752, 753, 756, 766, 768, 771], "implement": [10, 102, 110, 527, 631], "logic": [10, 110, 239, 261, 268, 281, 301, 448, 527, 631], "gener": [10, 65, 86, 110, 216, 221, 415, 425, 527, 596, 631, 735, 751, 752, 753, 754], "slower": [10, 53, 90, 100, 110, 519, 521, 527, 631], "more": [10, 30, 44, 49, 63, 65, 87, 100, 102, 110, 127, 128, 129, 176, 184, 216, 225, 241, 262, 276, 294, 308, 327, 328, 329, 379, 415, 429, 450, 511, 527, 631, 733, 747], "memori": [10, 21, 71, 102, 110, 200, 307, 399, 424, 466, 516, 519, 520, 521, 527, 537, 631, 727, 729, 733, 737, 739, 740, 741], "intens": [10, 110, 527, 631], "than": [10, 30, 43, 63, 65, 89, 110, 216, 225, 227, 262, 269, 415, 429, 497, 511, 519, 521, 527, 612, 616, 621, 627, 631, 696, 700, 705, 711, 727, 747], "same": [10, 87, 104, 109, 110, 150, 156, 205, 206, 207, 208, 209, 210, 212, 213, 214, 294, 303, 307, 308, 351, 404, 405, 406, 407, 408, 409, 411, 412, 413, 455, 456, 465, 527, 631, 749, 752], "becaus": [10, 19, 31, 44, 89, 110, 263, 308, 346, 527, 580, 631, 669], "python": [10, 64, 110, 184, 308, 445, 459, 486, 497, 527, 631, 642, 643, 644, 646, 727, 743], "an": [10, 11, 12, 19, 22, 26, 31, 32, 43, 53, 55, 61, 63, 78, 82, 89, 103, 106, 107, 110, 122, 124, 125, 127, 128, 129, 133, 134, 135, 136, 137, 138, 143, 154, 184, 185, 197, 205, 206, 207, 208, 209, 210, 212, 213, 214, 231, 235, 248, 249, 263, 264, 269, 272, 289, 299, 302, 321, 322, 323, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 343, 346, 404, 405, 406, 407, 408, 409, 411, 412, 413, 418, 419, 434, 446, 460, 464, 500, 501, 504, 507, 516, 527, 537, 573, 580, 582, 599, 605, 609, 624, 631, 662, 669, 671, 689, 693, 708, 717, 727, 728, 735, 737, 739, 742, 752, 753, 754, 768], "rust": [10, 98, 102, 110, 507, 527, 631, 729, 733], "materi": [10, 110, 279, 527, 631], "parallelis": [10, 110, 527, 631], "optimis": [10, 110, 527, 631], "possibl": [10, 110, 183, 243, 302, 527, 598, 621, 631, 705, 727], "best": [10, 110, 527, 631], "perform": [10, 31, 32, 43, 58, 102, 110, 263, 264, 269, 300, 504, 527, 551, 554, 556, 558, 560, 561, 564, 565, 566, 571, 572, 574, 631, 636, 639, 641, 647, 649, 650, 653, 654, 655, 660, 661, 663, 727, 729, 733, 737, 739, 740, 741], "lambda": [10, 17, 26, 110, 145, 146, 147, 184, 185, 205, 254, 272, 308, 347, 348, 349, 527, 596, 631, 737, 747], "oper": [10, 21, 26, 30, 37, 44, 53, 58, 78, 82, 83, 86, 89, 105, 133, 134, 135, 136, 137, 138, 199, 201, 256, 262, 265, 268, 271, 307, 333, 334, 335, 336, 337, 398, 400, 442, 445, 446, 454, 456, 457, 458, 466, 500, 504, 516, 517, 518, 519, 520, 521, 525, 537, 601], "given": [10, 19, 63, 69, 70, 144, 151, 181, 199, 202, 203, 206, 207, 209, 212, 213, 214, 219, 220, 240, 285, 286, 308, 345, 346, 352, 382, 398, 402, 405, 406, 408, 411, 412, 413, 422, 423, 449, 455, 457, 471, 569, 578, 591, 609, 624, 631, 658, 667, 680, 693, 727, 737, 751, 752, 753, 754], "tri": 10, "onli": [10, 17, 30, 43, 47, 73, 75, 105, 126, 127, 128, 129, 157, 201, 242, 250, 254, 265, 269, 271, 289, 324, 327, 328, 329, 357, 400, 442, 456, 466, 563, 652, 727, 728, 729, 733, 736, 737, 739, 740, 741, 746, 753, 754], "case": [10, 21, 31, 32, 184, 263, 264, 302, 307, 598, 599, 741, 758], "return": [10, 11, 15, 17, 18, 19, 20, 22, 23, 26, 34, 36, 42, 44, 45, 51, 53, 54, 55, 63, 65, 76, 77, 83, 86, 87, 94, 98, 100, 101, 107, 108, 111, 112, 113, 114, 115, 116, 119, 121, 130, 131, 150, 156, 160, 163, 165, 166, 167, 168, 169, 171, 172, 173, 179, 183, 190, 202, 203, 216, 223, 224, 234, 235, 236, 237, 238, 240, 242, 243, 244, 250, 256, 265, 271, 272, 278, 279, 287, 293, 294, 301, 304, 305, 306, 308, 318, 338, 346, 351, 356, 358, 360, 361, 365, 367, 368, 370, 371, 372, 373, 374, 375, 377, 381, 388, 402, 403, 415, 417, 419, 436, 438, 449, 451, 455, 459, 460, 461, 464, 465, 471, 496, 497, 498, 499, 505, 508, 511, 516, 517, 518, 519, 520, 521, 524, 525, 527, 530, 534, 540, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 574, 575, 576, 578, 582, 583, 584, 595, 599, 602, 604, 606, 608, 609, 610, 612, 616, 618, 619, 620, 621, 627, 632, 633, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 667, 671, 672, 673, 684, 686, 687, 688, 690, 692, 693, 694, 695, 696, 700, 702, 703, 704, 705, 708, 711, 717, 718, 726, 727, 728, 729, 730, 733, 734, 737, 742, 748, 758, 760], "first": [10, 34, 43, 45, 51, 55, 86, 87, 90, 119, 120, 121, 138, 160, 166, 179, 250, 265, 269, 271, 294, 302, 317, 320, 337, 338, 360, 368, 381, 462, 524, 530, 537, 563, 580, 582, 583, 608, 610, 614, 615, 632, 652, 669, 671, 672, 692, 694, 698, 699, 727, 728, 735, 737, 740], "determin": [10, 26, 31, 32, 86, 90, 202, 206, 207, 208, 209, 210, 212, 213, 214, 225, 263, 264, 429, 462, 466, 493, 518, 521, 549, 596, 598, 634, 727, 728, 733, 741], "foo": [10, 13, 15, 16, 17, 18, 21, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 40, 42, 45, 46, 47, 48, 50, 52, 53, 55, 57, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 80, 81, 82, 83, 84, 86, 88, 91, 92, 93, 98, 106, 127, 156, 160, 161, 195, 203, 219, 220, 234, 236, 254, 259, 266, 267, 268, 284, 295, 298, 327, 457, 460, 464, 523, 525, 537, 563, 578, 581, 582, 585, 586, 602, 604, 605, 606, 609, 613, 617, 619, 621, 623, 625, 626, 631, 652, 673, 688, 689, 690, 693, 695, 705, 717, 725, 742, 758, 759, 760, 761], "bar": [10, 13, 15, 16, 17, 18, 21, 24, 25, 26, 27, 28, 29, 34, 36, 37, 38, 40, 42, 45, 46, 47, 48, 50, 52, 53, 55, 57, 59, 60, 61, 63, 65, 66, 67, 69, 70, 72, 73, 74, 75, 76, 78, 80, 81, 82, 83, 84, 88, 91, 92, 98, 106, 161, 225, 254, 259, 266, 267, 268, 284, 295, 429, 457, 525, 537, 586, 605, 606, 619, 621, 631, 673, 689, 690, 705, 742, 758, 759, 760, 761], "8": [10, 13, 14, 15, 16, 17, 18, 20, 24, 25, 27, 34, 36, 42, 46, 47, 48, 50, 57, 59, 61, 63, 65, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 81, 82, 83, 84, 89, 91, 92, 95, 98, 109, 120, 132, 138, 141, 142, 162, 178, 193, 195, 196, 203, 204, 207, 208, 210, 212, 214, 226, 232, 236, 254, 255, 259, 268, 284, 293, 298, 337, 393, 404, 483, 492, 494, 500, 579, 580, 612, 616, 624, 668, 669, 696, 700, 708, 743, 746, 747, 752, 753, 759, 760, 761], "map": [10, 18, 59, 79, 185, 244, 282, 459, 517, 518, 727, 729, 730, 733, 734, 737, 739, 760], "each": [10, 43, 110, 156, 199, 269, 279, 325, 398, 459, 527, 528, 530, 540, 583, 595, 609, 620, 621, 631, 632, 633, 672, 684, 693, 704, 705, 740, 749, 750, 752], "t": [10, 89, 138, 144, 145, 146, 147, 337, 345, 347, 348, 349, 417, 454, 459, 466, 580, 624, 669, 708, 728, 737, 758], "column_0": [10, 86, 519, 521], "column_1": [10, 86, 519, 521], "15": [10, 31, 32, 37, 138, 264, 337], "24": [10, 19, 32, 136, 138, 264, 337, 498, 555], "It": [10, 110, 272, 302, 497, 527, 598, 631], "better": [10, 110, 244, 527, 631], "select": [10, 43, 47, 63, 72, 84, 88, 90, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 155, 156, 157, 158, 159, 161, 162, 164, 165, 167, 168, 170, 174, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 241, 242, 243, 244, 245, 266, 269, 288, 295, 430, 437, 457, 459, 460, 461, 464, 467, 499, 512, 515, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 593, 594, 596, 597, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 616, 617, 619, 620, 621, 623, 625, 626, 628, 629, 669, 692, 694, 726, 727, 729, 733, 735, 737, 738, 746, 747, 759, 768], "scalar": [10, 217, 416], "9": [10, 26, 32, 34, 38, 76, 81, 89, 92, 94, 95, 98, 109, 120, 132, 137, 141, 142, 162, 167, 178, 193, 203, 205, 207, 213, 222, 226, 236, 264, 267, 297, 298, 351, 370, 404, 412, 414, 426, 467, 525, 539, 551, 564, 571, 572, 590, 593, 746], "14": [10, 87, 162, 528, 529, 531, 532, 533, 534, 535, 536, 538, 539, 743], "follow": [10, 31, 32, 43, 90, 110, 156, 199, 206, 207, 208, 209, 210, 212, 213, 214, 262, 263, 264, 269, 398, 459, 563, 570, 652, 659, 727, 735, 737, 766, 771, 772], "creat": [11, 12, 31, 32, 52, 55, 90, 103, 122, 125, 143, 200, 231, 244, 248, 249, 251, 252, 263, 264, 302, 321, 323, 326, 330, 342, 343, 399, 434, 446, 460, 467, 471, 496, 497, 498, 499, 516, 519, 521, 570, 618, 659, 702, 752, 753, 754], "empti": [11, 12, 40, 49, 98, 248, 249, 276, 302, 326, 330, 366, 504, 728, 742], "copi": [11, 12, 78, 248, 249, 304, 326, 330, 342, 442, 446, 516, 627, 711], "current": [11, 12, 95, 194, 248, 249, 298, 326, 330, 393], "ident": [11, 12, 248, 249, 326, 330], "clone": [11, 82, 83, 248, 326, 445, 446, 454, 517, 518, 519, 520, 521], "cheap": [11, 12, 248, 249, 307, 326, 330], "deepcopi": [11, 12, 248, 249, 326, 330], "13": [11, 12, 22, 23, 29, 32, 37, 51, 87, 95, 205, 207, 248, 264, 298, 308, 467, 528, 529, 531, 532, 533, 534, 535, 536, 538, 539], "true": [11, 12, 14, 17, 26, 27, 29, 31, 37, 39, 40, 41, 43, 47, 51, 53, 55, 56, 73, 79, 86, 87, 88, 89, 90, 95, 98, 105, 107, 108, 109, 110, 124, 133, 134, 135, 136, 137, 144, 145, 146, 147, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 201, 211, 216, 225, 227, 228, 235, 240, 241, 244, 248, 250, 251, 254, 256, 262, 263, 268, 269, 272, 279, 287, 294, 295, 298, 302, 305, 306, 307, 308, 318, 322, 326, 345, 347, 348, 349, 355, 358, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 394, 395, 400, 410, 417, 429, 431, 446, 449, 455, 460, 461, 465, 466, 516, 520, 525, 526, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 566, 578, 603, 605, 607, 610, 619, 620, 622, 624, 628, 629, 631, 655, 687, 689, 691, 694, 703, 704, 706, 708, 727, 728, 729, 733, 736, 737, 738, 739, 740, 741, 746, 749, 750, 751, 752, 753, 758], "f64": [11, 12, 14, 15, 17, 18, 22, 23, 26, 29, 37, 42, 43, 47, 48, 56, 57, 72, 73, 74, 87, 91, 94, 95, 104, 111, 112, 113, 114, 115, 116, 124, 126, 130, 131, 138, 141, 142, 144, 145, 146, 147, 148, 149, 157, 162, 169, 171, 172, 173, 176, 181, 182, 187, 188, 194, 195, 198, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 223, 224, 225, 229, 230, 237, 238, 245, 248, 254, 268, 274, 275, 280, 290, 296, 297, 298, 309, 310, 311, 312, 313, 314, 331, 332, 337, 338, 393, 404, 406, 414, 427, 428, 432, 439, 440, 467, 471, 512, 529, 531, 532, 533, 534, 535, 538, 539, 566, 588, 738, 753], "bool": [11, 12, 24, 26, 27, 29, 30, 31, 36, 37, 39, 40, 41, 43, 47, 53, 55, 65, 71, 73, 79, 83, 86, 87, 88, 90, 92, 95, 98, 100, 102, 107, 108, 109, 119, 121, 124, 133, 134, 135, 136, 137, 138, 144, 145, 146, 147, 151, 152, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 184, 199, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 218, 220, 225, 227, 228, 240, 241, 244, 248, 250, 251, 256, 259, 262, 263, 268, 269, 272, 279, 287, 289, 294, 295, 298, 301, 302, 305, 306, 307, 308, 317, 320, 322, 326, 333, 334, 335, 336, 337, 345, 347, 348, 349, 352, 353, 355, 356, 358, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 394, 395, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 419, 420, 424, 429, 431, 445, 446, 449, 450, 452, 454, 460, 461, 462, 465, 466, 516, 520, 529, 531, 533, 566, 578, 580, 593, 603, 605, 607, 614, 615, 619, 620, 622, 624, 628, 629, 655, 667, 669, 682, 687, 689, 691, 698, 699, 703, 704, 706, 708, 717, 727, 729, 731, 733, 736, 737, 738, 739, 740, 741, 746, 749, 750, 751, 752, 753, 754, 756, 758], "clear": [12, 249, 330], "properti": [13, 18, 35, 66, 68, 93, 122, 125, 143, 231, 321, 323, 343, 344, 356, 361, 391, 421, 434, 441, 713, 759, 760, 761, 768], "7": [13, 14, 15, 16, 18, 20, 24, 25, 27, 31, 32, 34, 36, 38, 42, 46, 47, 48, 50, 52, 57, 59, 61, 63, 65, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 81, 82, 83, 84, 89, 90, 91, 92, 98, 137, 149, 160, 162, 193, 203, 207, 213, 234, 236, 255, 259, 264, 267, 268, 280, 284, 293, 314, 412, 497, 551, 564, 572, 574, 746, 759, 760, 761], "ham": [13, 15, 16, 17, 18, 24, 25, 27, 33, 34, 36, 42, 46, 47, 48, 50, 52, 57, 59, 61, 63, 65, 66, 67, 69, 70, 72, 73, 74, 75, 76, 81, 82, 83, 84, 91, 92, 98, 254, 259, 268, 284, 464, 759, 760, 761], "appl": [13, 36, 42, 59, 61, 79, 196, 204, 232, 268, 528, 529, 531, 532, 533, 534, 535, 536, 538, 539, 607, 622, 691, 706], "banana": [13, 79, 196, 204, 232, 528, 529, 531, 532, 533, 534, 535, 536, 538, 539], "orang": [13, 456, 528, 529, 531, 532, 533, 535, 538, 539], "summari": [14, 338], "statist": [14, 102, 146, 147, 176, 206, 207, 208, 209, 210, 211, 212, 213, 214, 225, 338, 348, 349, 379, 410, 429, 727], "datetim": [14, 31, 32, 43, 90, 98, 103, 143, 163, 206, 207, 208, 209, 210, 212, 213, 214, 239, 263, 264, 269, 302, 343, 364, 384, 387, 419, 441, 448, 497, 499, 578, 624, 667, 708, 717], "date": [14, 31, 32, 43, 83, 206, 207, 208, 209, 210, 212, 213, 214, 239, 263, 264, 269, 364, 384, 387, 419, 448, 476, 497, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 578, 624, 636, 641, 642, 643, 644, 646, 649, 652, 653, 654, 657, 659, 660, 661, 663, 667, 708, 727, 737, 738, 768], "d": [14, 33, 34, 37, 42, 45, 76, 78, 89, 92, 95, 98, 156, 268, 298, 456, 528, 529, 531, 532, 533, 534, 535, 536, 538, 539, 553, 604, 609, 620, 624, 638, 688, 693, 704, 708, 738], "e": [14, 34, 45, 76, 78, 89, 95, 98, 144, 148, 156, 181, 218, 225, 298, 345, 417, 420, 429, 446, 456, 512, 727, 728, 729, 733, 739, 741], "usd": 14, "eur": [14, 751], "2020": [14, 32, 264, 552, 555, 557, 559, 562, 567], "2021": [14, 31, 90, 364, 624, 708, 717], "2022": [14, 497, 499, 624, 708, 743], "count": [14, 31, 32, 43, 52, 55, 86, 90, 96, 133, 178, 191, 192, 206, 207, 208, 209, 210, 212, 213, 214, 242, 244, 263, 264, 269, 300, 338, 390, 392, 451, 452, 527, 536, 563, 604, 652, 688, 723, 727, 729, 733, 737, 739, 740, 741], "null_count": [14, 17, 138, 337, 338], "mean": [14, 23, 55, 81, 102, 150, 153, 156, 207, 225, 258, 338, 351, 354, 358, 406, 429, 463, 522, 608, 692, 727, 737], "266667": 14, "null": [14, 17, 23, 26, 27, 38, 42, 47, 48, 52, 57, 69, 70, 73, 74, 75, 79, 88, 91, 98, 106, 109, 119, 121, 123, 127, 132, 139, 141, 142, 145, 146, 147, 148, 151, 152, 153, 154, 158, 162, 169, 170, 171, 172, 173, 175, 178, 192, 194, 200, 205, 206, 207, 208, 209, 210, 212, 213, 214, 219, 220, 222, 227, 239, 246, 254, 258, 267, 268, 285, 286, 289, 295, 308, 317, 320, 327, 339, 342, 347, 348, 349, 352, 354, 358, 374, 375, 392, 393, 404, 405, 406, 407, 408, 409, 411, 412, 413, 417, 422, 423, 426, 446, 448, 457, 466, 467, 468, 512, 533, 552, 555, 557, 559, 562, 567, 579, 581, 582, 585, 591, 596, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 618, 620, 621, 622, 627, 668, 680, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 702, 704, 705, 706, 717, 727, 737, 746], "std": [14, 205, 338, 411], "101514": 14, "707107": [14, 146], "min": [14, 23, 31, 32, 55, 102, 127, 129, 135, 153, 199, 209, 258, 264, 327, 329, 334, 338, 354, 398, 408, 742, 753, 754], "01": [14, 31, 32, 90, 264, 497, 499, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 624, 659, 708], "max": [14, 23, 31, 32, 55, 102, 127, 128, 134, 153, 193, 199, 206, 258, 264, 327, 328, 333, 338, 354, 398, 405, 621, 630, 705, 753, 754], "median": [14, 55, 208, 407], "remov": [15, 148, 253, 512, 613, 617, 623, 697, 701, 707], "new": [15, 17, 36, 37, 52, 59, 60, 77, 89, 94, 106, 150, 156, 162, 185, 236, 282, 293, 304, 308, 342, 351, 401, 438, 455, 614, 615, 620, 621, 628, 629, 631, 698, 699, 704, 705, 712, 714], "": [15, 17, 19, 30, 31, 37, 42, 43, 60, 61, 77, 98, 148, 151, 176, 190, 193, 194, 201, 205, 228, 254, 262, 263, 269, 293, 302, 307, 308, 309, 310, 311, 312, 313, 314, 317, 322, 326, 327, 331, 332, 333, 334, 335, 336, 337, 340, 344, 346, 351, 352, 354, 355, 359, 360, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 385, 386, 387, 388, 390, 393, 394, 395, 397, 398, 401, 403, 404, 405, 406, 408, 412, 414, 415, 417, 422, 426, 427, 428, 430, 431, 433, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 471, 499, 512, 515, 525, 553, 570, 579, 583, 584, 591, 592, 595, 599, 611, 612, 616, 618, 619, 621, 624, 627, 629, 630, 638, 659, 668, 672, 673, 675, 680, 681, 684, 687, 688, 689, 690, 691, 693, 695, 696, 698, 700, 702, 705, 706, 708, 711, 714, 719, 722, 724, 727, 747, 754], "drop": [16, 17, 87, 139, 141, 142, 254, 294, 339, 341, 579, 668], "place": [16, 36, 37, 60, 69, 70, 73, 92, 98, 119, 121, 219, 220, 285, 286, 289, 317, 320, 399, 401, 422, 423, 431, 584, 591, 673, 680], "subset": [17, 81, 87, 254, 294, 522], "union": [17, 18, 30, 46, 47, 49, 50, 59, 66, 67, 73, 75, 86, 90, 95, 110, 124, 148, 163, 167, 184, 226, 250, 254, 256, 272, 276, 284, 287, 289, 298, 370, 457, 458, 459, 462, 464, 465, 466, 467, 468, 484, 495, 498, 499, 512, 517, 525, 570, 624, 630, 631, 708, 718, 719, 722, 742, 746, 747, 751, 752, 753, 754, 761], "where": [17, 21, 49, 94, 144, 217, 225, 276, 307, 318, 345, 416, 429, 433, 453, 455, 461, 572, 661, 735, 758], "which": [17, 21, 73, 87, 97, 98, 99, 100, 101, 102, 107, 165, 168, 169, 171, 172, 173, 254, 294, 301, 307, 367, 371, 372, 373, 374, 375, 599, 727, 728, 735, 737], "appli": [17, 26, 54, 98, 146, 147, 184, 193, 205, 206, 207, 209, 213, 254, 265, 271, 272, 278, 348, 349, 404, 405, 406, 408, 412, 457, 461, 466, 514, 525, 718, 737, 751, 753, 754, 768], "wise": [17, 26, 111, 112, 113, 114, 115, 116, 130, 131, 149, 182, 222, 223, 224, 237, 238, 254, 309, 310, 311, 312, 313, 314, 331, 332, 350, 383, 426, 427, 428, 439, 440, 514], "singl": [17, 21, 28, 73, 154, 184, 200, 203, 246, 254, 289, 302, 307, 399, 402, 442, 464, 466, 525, 563, 602, 630, 652, 686, 718, 727, 735, 736, 737, 752], "below": [17, 30, 162, 254, 758], "snippet": [17, 254], "show": [17, 44, 52, 254, 287], "how": [17, 42, 89, 139, 162, 202, 254, 268, 302, 339, 456, 466, 518, 521, 549, 579, 605, 634, 668, 689, 735], "you": [17, 21, 43, 82, 86, 102, 127, 128, 129, 148, 154, 184, 201, 206, 207, 208, 209, 210, 212, 213, 214, 250, 254, 265, 269, 271, 287, 302, 307, 327, 328, 329, 400, 446, 454, 460, 517, 537, 580, 669, 727, 728, 737], "could": [17, 31, 124, 254, 263, 322, 493, 502, 514], "base": [17, 24, 31, 32, 144, 181, 182, 254, 259, 263, 264, 345, 382, 383, 455, 474, 537, 719, 722, 768], "condit": [17, 24, 63, 254, 259, 461, 607, 622], "filter": [17, 40, 246, 254, 256, 266, 418, 460, 527, 607, 622, 737, 738], "fold": [17, 254, 599, 747], "acc": [17, 254, 514], "is_nul": [17, 254], "expr": [17, 20, 22, 24, 30, 31, 32, 42, 55, 63, 67, 73, 94, 95, 254, 255, 257, 259, 262, 263, 264, 268, 284, 286, 289, 297, 298, 337, 353, 423, 437, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 496, 498, 499, 500, 512, 513, 514, 515, 523, 524, 525, 630, 669, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 736, 742, 744, 745, 746, 747, 748, 757, 758, 766], "also": [18, 30, 31, 32, 73, 148, 162, 199, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 299, 398, 497, 514, 753, 754, 766], "found": [18, 98, 506, 610, 624, 629, 694], "header": [18, 55, 86, 98, 102, 727, 728, 737], "colnam": [18, 185, 753, 760], "float64": [18, 19, 26, 66, 98, 111, 112, 113, 114, 115, 116, 124, 130, 131, 148, 223, 224, 237, 238, 512, 566, 655, 753, 760, 761], "unit": [19, 183, 243, 279, 302, 346, 441, 476, 477, 497, 550, 553, 569, 573, 599, 635, 638, 658, 662, 753, 754], "sizeunit": [19, 346], "float": [19, 22, 43, 57, 65, 70, 126, 127, 128, 129, 141, 142, 144, 145, 146, 147, 151, 152, 157, 162, 169, 171, 172, 173, 181, 195, 198, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 220, 257, 269, 280, 286, 287, 322, 324, 327, 328, 329, 340, 345, 346, 347, 348, 349, 352, 353, 357, 369, 379, 382, 384, 385, 386, 387, 396, 397, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 429, 433, 435, 453, 463, 471, 478, 479, 538, 566, 578, 655, 667, 719, 720, 721, 722, 725, 736, 738, 745, 747, 749, 750, 751, 753, 754, 757], "estim": [19, 146, 147, 176, 346, 348, 349, 379, 727], "total": [19, 346], "heap": [19, 346], "alloc": [19, 58, 346, 727], "size": [19, 31, 89, 102, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 263, 346, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 460, 727, 752, 753, 754, 755], "byte": [19, 98, 346, 727, 728, 729, 730, 733, 734, 737], "sum": [19, 26, 30, 32, 55, 110, 136, 137, 144, 154, 193, 206, 207, 209, 212, 213, 214, 246, 262, 264, 335, 336, 345, 346, 405, 406, 408, 411, 412, 413, 457, 514, 525, 631, 722], "its": [19, 88, 295, 346], "buffer": [19, 346, 727], "includ": [19, 31, 86, 89, 98, 163, 346, 454, 566, 619, 620, 655, 703, 704, 753], "nest": [19, 346, 456, 484, 768], "multipl": [19, 21, 24, 31, 36, 53, 55, 73, 95, 148, 190, 203, 206, 207, 208, 209, 210, 212, 213, 214, 228, 253, 259, 263, 289, 298, 299, 307, 346, 388, 402, 462, 465, 466, 512, 514, 525, 599, 630, 718, 727, 737, 739, 741, 752, 754, 758], "share": [19, 346, 456], "bitmap": [19, 346], "therefor": [19, 346], "comput": [19, 43, 87, 102, 104, 111, 112, 113, 114, 115, 116, 130, 131, 133, 134, 135, 136, 137, 140, 144, 149, 176, 181, 182, 190, 194, 197, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 222, 223, 224, 225, 229, 237, 238, 266, 268, 269, 294, 299, 303, 309, 310, 311, 312, 313, 314, 331, 332, 333, 334, 335, 336, 340, 345, 346, 350, 379, 382, 383, 388, 393, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 426, 427, 428, 429, 432, 439, 440, 465, 466, 470, 500, 502, 538, 587, 588, 589, 676, 677, 678, 724, 744, 768, 770], "particular": [19, 346, 727, 729, 733, 739, 741], "structarrai": [19, 346], "upper": [19, 31, 163, 243, 263, 346, 460, 497, 727], "bound": [19, 31, 163, 183, 243, 263, 346, 460, 497, 582, 671, 727], "slice": [19, 205, 206, 207, 208, 209, 210, 212, 213, 214, 250, 256, 272, 279, 287, 346, 404, 405, 406, 407, 408, 409, 411, 412, 413, 465, 583, 595, 672, 684], "remain": [19, 30, 110, 262, 272, 346, 620, 621, 704, 705, 727, 737], "constant": [19, 32, 264, 346], "unchang": [19, 110, 239, 272, 346, 448, 631], "howev": [19, 346], "smaller": [19, 102, 256, 346], "visibl": [19, 346], "capac": [19, 71, 346, 424], "ffi": [19, 346], "kb": [19, 346], "mb": [19, 346], "gb": [19, 346], "tb": [19, 346], "scale": [19, 346], "x": [19, 36, 39, 41, 42, 49, 110, 159, 184, 202, 225, 239, 268, 276, 288, 304, 308, 354, 378, 429, 448, 577, 584, 620, 631, 704, 727, 737, 747, 752, 753], "revers": [19, 73, 119, 121, 133, 134, 135, 136, 137, 185, 196, 199, 218, 227, 228, 232, 240, 289, 317, 320, 333, 334, 335, 336, 398, 420, 431, 449, 462, 593, 682], "1_000_000": [19, 346], "y": [19, 39, 41, 42, 49, 202, 268, 276, 288, 304, 577, 584, 624, 708, 747, 752, 753], "v": [19, 102, 217, 416, 471], "1000": [19, 498, 627, 728], "z": [19, 39, 41, 42, 49, 159, 202, 268, 276, 288, 354, 549, 577, 634, 752, 753], "uint32": [19, 119, 121, 202, 235, 239, 318, 322, 346, 417, 448, 495, 551, 554, 558, 560, 561, 564, 565, 566, 571, 572, 575, 576, 586, 604, 611, 636, 639, 647, 649, 650, 653, 654, 655, 660, 661, 664, 665, 675, 688, 743], "25888898": 19, "689577102661133": 19, "long": [20, 49, 89, 255, 276], "format": [20, 49, 98, 100, 255, 261, 276, 301, 568, 624, 657, 708, 726, 727, 731, 737, 738], "largelist": 20, "letter": [20, 148, 231, 255, 512, 530, 540, 632, 633], "differ": [21, 31, 32, 86, 139, 242, 263, 264, 307, 339, 417, 513, 551, 563, 564, 571, 579, 624, 636, 652, 653, 660, 668, 708, 719, 722, 727], "vstack": [21, 466], "add": [21, 31, 95, 96, 196, 232, 263, 268, 297, 298, 299, 300, 307, 499, 758], "chunk": [21, 51, 102, 109, 200, 307, 325, 389, 399, 442, 727, 737, 739, 740, 741], "append": [21, 42, 43, 200, 268, 269, 753], "underli": [21, 78, 201, 215, 302, 307, 400, 414, 424, 441, 442, 446, 501, 507, 550, 551, 554, 556, 558, 560, 561, 564, 565, 566, 571, 572, 573, 574, 635, 636, 639, 641, 647, 649, 650, 653, 654, 655, 660, 661, 662, 663, 733, 753, 754], "locat": [21, 61, 84, 88, 295, 307, 419, 437], "thu": [21, 307, 737], "caus": [21, 307, 507, 727, 737], "realloc": [21, 307, 737, 739, 740], "have": [21, 58, 138, 145, 146, 147, 199, 287, 300, 307, 337, 347, 348, 349, 358, 398, 537, 599, 727, 728, 749, 756], "extra": [21, 53, 102, 307, 727, 728, 729, 733, 739, 741], "faster": [21, 89, 205, 242, 307, 308, 404], "queri": [21, 44, 250, 251, 252, 256, 265, 271, 279, 287, 300, 307, 610, 631, 694, 729, 735, 737, 739, 740, 741, 770], "prefer": [21, 205, 307, 404, 418, 419], "want": [21, 102, 127, 128, 129, 154, 184, 206, 207, 208, 209, 210, 212, 213, 214, 250, 265, 271, 307, 327, 328, 329, 446], "do": [21, 43, 78, 86, 89, 138, 250, 269, 272, 279, 287, 307, 337, 446, 454, 457, 465, 537, 580, 669, 737], "after": [21, 88, 199, 295, 307, 398, 627, 711, 726, 727, 729, 733, 737, 739, 740, 741], "instanc": [21, 26, 124, 206, 207, 208, 209, 210, 212, 213, 214, 272, 300, 307, 322, 514, 599, 727, 737, 753, 754], "dure": [21, 307, 727, 737], "onlin": [21, 307], "rerun": [21, 307], "mani": [21, 307, 518, 521, 735], "time": [21, 31, 32, 43, 90, 239, 240, 250, 263, 264, 269, 279, 302, 307, 441, 448, 449, 465, 467, 468, 476, 477, 496, 497, 498, 499, 550, 553, 563, 569, 573, 577, 578, 624, 635, 638, 652, 658, 662, 666, 708, 736, 737, 768], "read": [21, 184, 256, 261, 281, 307, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 739, 740, 741], "file": [21, 97, 98, 99, 100, 101, 102, 256, 281, 301, 307, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 739, 740, 741], "store": [21, 307], "them": [21, 31, 32, 43, 90, 263, 264, 269, 307, 467, 584, 673], "latter": [21, 307], "finish": [21, 307, 456, 502], "rechunk": [21, 307, 466, 516, 520, 727, 729, 737, 739, 740, 741], "vertic": [21, 89, 92, 466, 602, 686, 719], "df1": [21, 27, 92, 456, 466, 749], "20": [21, 36, 37, 54, 56, 60, 61, 117, 118, 119, 121, 139, 159, 162, 278, 570, 659, 717, 753, 754], "30": [21, 31, 36, 54, 60, 61, 79, 95, 117, 118, 119, 121, 139, 159, 278, 298, 471, 552, 565, 570, 574, 659], "40": [21, 54, 159, 278], "50": [21, 127, 327, 518, 521], "60": [21, 498, 566, 567, 624, 655, 708], "fill_valu": [22, 70, 89, 152, 220, 257, 286, 353, 423], "fill": [22, 23, 70, 89, 123, 151, 152, 153, 158, 162, 206, 207, 209, 212, 213, 214, 220, 257, 258, 286, 352, 353, 354, 405, 406, 408, 411, 412, 413, 423, 466, 515, 612, 616, 627, 696, 700, 711], "point": [22, 44, 65, 126, 141, 142, 152, 157, 215, 216, 257, 272, 324, 353, 357, 369, 414, 415, 478, 479, 566, 655], "nan": [22, 141, 142, 152, 162, 169, 171, 172, 173, 257, 302, 310, 314, 341, 353, 372, 373, 404, 520, 749, 750, 753], "evalu": [22, 24, 43, 47, 95, 138, 161, 163, 167, 259, 266, 268, 269, 297, 298, 318, 337, 455, 458, 460, 461, 500, 746], "replac": [22, 23, 61, 86, 94, 257, 297, 418, 419, 605, 615, 689, 699, 727, 737], "Not": [22, 257], "miss": [22, 123, 158, 162, 257, 454, 466], "To": [22, 141, 142, 153, 257, 747], "fill_nul": [22, 257, 624, 708], "strategi": [23, 42, 43, 51, 153, 258, 268, 269, 354, 596, 727, 751, 752, 753, 754], "fillnullstrategi": [23, 153, 258, 354], "limit": [23, 123, 127, 128, 129, 153, 158, 258, 265, 327, 328, 329, 354, 737], "forward": [23, 43, 153, 158, 258, 269, 354], "backward": [23, 43, 123, 153, 258, 269, 354], "zero": [23, 63, 78, 152, 153, 225, 258, 354, 429, 442, 446, 516, 627, 711, 726, 727, 729, 733], "one": [23, 24, 31, 32, 49, 55, 63, 81, 85, 105, 153, 205, 227, 228, 235, 253, 258, 259, 263, 264, 276, 299, 307, 354, 404, 457, 505, 525, 526, 537, 628, 712, 746, 747], "consecut": [23, 123, 153, 158, 258, 354, 602, 686], "fill_nan": 23, "predic": [24, 63, 154, 246, 250, 256, 259, 272, 279, 287, 300, 355, 418, 419, 465, 737, 739, 740, 741, 758], "boolean": [24, 26, 47, 95, 107, 108, 154, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 246, 259, 298, 305, 306, 318, 355, 363, 365, 367, 368, 370, 371, 372, 373, 374, 375, 377, 394, 395, 418, 455, 461, 578, 667, 687, 768], "find": [25, 217, 416, 462, 466], "index": [25, 31, 32, 37, 43, 55, 61, 63, 72, 84, 90, 96, 105, 117, 118, 119, 120, 121, 206, 207, 208, 209, 210, 212, 213, 214, 226, 235, 263, 264, 269, 288, 300, 315, 316, 317, 318, 319, 320, 419, 430, 437, 462, 495, 563, 575, 576, 582, 592, 608, 618, 652, 664, 665, 671, 681, 692, 702, 743], "horizont": [26, 36, 89, 466, 468, 500, 514, 719, 722, 747], "reduct": 26, "effect": [26, 102, 300], "aggreg": [26, 30, 31, 46, 47, 48, 50, 55, 56, 57, 74, 75, 89, 91, 105, 154, 175, 180, 184, 193, 205, 206, 207, 208, 209, 210, 212, 213, 214, 244, 272, 273, 274, 275, 277, 280, 290, 291, 296, 404, 405, 406, 408, 411, 412, 413, 466, 514, 525, 526, 529, 531, 537, 630, 716, 719, 722, 727, 747, 768], "level": [26, 102, 154, 265, 271, 737, 739, 740, 741], "supercast": 26, "cast": [26, 31, 32, 47, 54, 83, 109, 125, 136, 137, 201, 233, 239, 263, 264, 278, 335, 336, 400, 435, 444, 448, 468, 516, 549, 550, 610, 627, 634, 635, 694, 756], "similar": [26, 43, 193, 269], "parent": 26, "rule": [26, 568, 657], "arithmet": 26, "int8": [26, 136, 137, 233, 335, 336, 403, 435], "take": [26, 77, 236, 293, 438, 455, 500, 513, 563, 652, 753], "A": [26, 31, 43, 53, 55, 79, 81, 89, 90, 98, 104, 165, 168, 175, 184, 185, 196, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 231, 232, 263, 269, 289, 302, 404, 405, 406, 408, 411, 412, 413, 464, 465, 467, 473, 497, 500, 515, 522, 537, 552, 555, 557, 559, 562, 567, 596, 599, 603, 604, 608, 609, 610, 627, 637, 640, 645, 648, 651, 656, 687, 688, 692, 693, 694, 698, 699, 708, 711, 727, 737, 766], "s1": [26, 455, 750], "s2": [26, 302, 307, 340, 370, 417, 455, 750], "minimum": [26, 50, 127, 129, 145, 146, 147, 189, 199, 277, 327, 329, 347, 348, 349, 395, 398, 646, 722, 752, 753, 754], "zip_with": 26, "concaten": [26, 466], "foo11": 26, "bar22": 26, "null_equ": [27, 417], "check": [27, 40, 107, 108, 163, 167, 272, 305, 306, 363, 364, 366, 369, 370, 376, 378, 417, 578, 603, 607, 622, 667, 687, 691, 706, 727, 737, 749, 750], "equal": [27, 31, 43, 205, 206, 207, 208, 209, 210, 212, 213, 214, 263, 269, 404, 405, 406, 407, 408, 409, 411, 412, 413, 417, 460, 612, 616, 627, 696, 700, 711, 727, 737, 749, 750, 756], "compar": [27, 87, 294, 417, 749, 750], "consid": [27, 49, 89, 95, 102, 127, 128, 129, 138, 206, 207, 208, 209, 210, 212, 213, 214, 227, 265, 271, 276, 298, 302, 327, 328, 329, 337, 417, 419, 471, 525, 537, 659, 738], "retriev": [28, 575, 576, 628, 664, 665, 712], "maintain_ord": [30, 53, 55, 87, 90, 105, 110, 235, 241, 262, 294, 450, 525, 526, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 631], "start": [30, 31, 44, 72, 90, 96, 148, 163, 226, 262, 288, 300, 430, 464, 512, 514, 551, 553, 554, 558, 560, 564, 565, 569, 570, 571, 572, 574, 592, 603, 607, 618, 622, 636, 649, 653, 659, 660, 681, 691, 702, 706, 726, 727, 729, 733, 737, 739, 740, 741, 758], "group": [30, 31, 32, 53, 55, 89, 90, 102, 105, 110, 193, 227, 228, 235, 262, 263, 264, 459, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 580, 608, 630, 631, 632, 633, 669, 692], "make": [30, 31, 32, 58, 90, 146, 147, 202, 262, 263, 264, 348, 349, 466, 487, 516, 520, 620, 627, 704, 711, 727, 729, 733, 735, 739, 741], "sure": [30, 58, 262, 460, 466, 516, 520, 727, 729, 735], "consist": [30, 262], "expens": [30, 86, 262, 307, 727, 733, 737, 740, 741], "work": [30, 32, 60, 87, 126, 127, 128, 129, 157, 241, 262, 264, 294, 324, 327, 328, 329, 357, 450, 580, 629, 669, 728], "we": [30, 43, 73, 175, 269, 272, 308, 580, 669, 717, 727, 728, 737, 758], "agg": [30, 31, 32, 105, 110, 154, 175, 227, 235, 246, 262, 264, 631], "sort": [30, 31, 32, 43, 53, 55, 90, 119, 121, 154, 175, 218, 228, 244, 246, 263, 264, 269, 317, 320, 420, 450, 452, 462, 525, 530, 540, 549, 632, 633, 634], "11": [30, 32, 102, 141, 142, 162, 194, 213, 226, 262, 264, 308, 404, 464, 563, 627, 747], "loop": 30, "sub_df": 30, "index_column": [31, 32, 263, 264], "everi": [31, 77, 80, 90, 133, 134, 135, 136, 137, 138, 150, 156, 236, 256, 263, 293, 333, 334, 335, 336, 337, 351, 438, 570, 575, 576, 579, 582, 583, 592, 595, 659, 664, 665, 668, 671, 672, 681, 684, 727, 737], "period": [31, 32, 69, 70, 90, 145, 146, 147, 194, 219, 220, 263, 264, 285, 286, 347, 348, 349, 393, 422, 423, 497, 570, 591, 659, 680], "offset": [31, 32, 72, 90, 96, 226, 263, 264, 288, 300, 430, 563, 570, 592, 618, 652, 659, 681, 702, 727, 729, 733, 737, 739, 740, 741], "truncat": [31, 263], "include_boundari": [31, 263], "close": [31, 32, 206, 207, 208, 209, 210, 212, 213, 214, 225, 263, 264, 429, 497], "closedwindow": [31, 32, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 497], "left": [31, 32, 42, 43, 145, 146, 147, 162, 206, 207, 208, 209, 210, 212, 213, 214, 239, 263, 264, 268, 269, 347, 348, 349, 448, 497, 514, 612, 627, 696, 711, 749, 750], "dynamicgroupbi": 31, "int32": [31, 32, 124, 239, 263, 264, 448, 556, 574, 641, 663, 753, 754], "window": [31, 32, 138, 145, 146, 147, 193, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 263, 264, 337, 347, 348, 349, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 467, 497, 570, 659, 768], "calcul": [31, 139, 145, 146, 147, 176, 183, 211, 225, 243, 263, 339, 347, 348, 349, 379, 410, 429, 433, 453, 579, 668], "assign": [31, 199, 263, 398, 471, 620, 621, 704, 705, 752], "normal": [31, 144, 176, 225, 263, 345, 379, 429], "groupbi": [31, 32, 105, 110, 138, 154, 175, 193, 227, 228, 235, 246, 263, 264, 337, 459, 580, 669, 768], "member": [31, 263, 370], "seen": [31, 123, 158, 263], "roll": [31, 32, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 263, 264, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 467], "instead": [31, 47, 53, 98, 100, 101, 119, 121, 257, 262, 263, 301, 317, 320, 460, 733, 747, 753], "slot": [31, 138, 139, 263, 337, 339, 579, 668], "defin": [31, 32, 98, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 476, 497, 717, 751, 752, 753], "interv": [31, 32, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 497, 566, 570, 659], "length": [31, 32, 72, 138, 205, 206, 207, 208, 209, 210, 212, 213, 214, 226, 263, 264, 288, 325, 337, 380, 404, 405, 406, 407, 408, 409, 411, 412, 413, 430, 466, 471, 570, 592, 599, 612, 616, 618, 627, 659, 681, 696, 700, 702, 711, 740, 752], "argument": [31, 32, 47, 54, 55, 75, 83, 90, 100, 102, 206, 207, 208, 209, 210, 212, 213, 214, 250, 256, 263, 264, 278, 301, 302, 465, 570, 659, 727, 731, 733], "languag": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 563, 570, 652, 659, 737], "1n": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 563, 570, 652, 659], "nanosecond": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 499, 563, 566, 570, 652, 655, 659], "1u": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 563, 570, 652, 659], "microsecond": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 279, 563, 566, 570, 652, 659], "1m": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 557, 562, 563, 567, 570, 652, 659], "millisecond": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 498, 499, 563, 570, 652, 659], "second": [31, 32, 43, 90, 98, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 462, 497, 498, 499, 561, 563, 570, 624, 650, 652, 659], "minut": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 497, 498, 499, 563, 570, 652, 659], "1h": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 563, 570, 652, 659], "hour": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 497, 498, 499, 563, 570, 652, 659], "1d": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 497, 550, 555, 559, 563, 570, 573, 652, 659], "dai": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 488, 496, 497, 498, 499, 553, 560, 563, 564, 565, 569, 570, 571, 572, 574, 652, 653, 659, 661], "1w": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 563, 570, 652, 659], "week": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 499, 563, 570, 572, 652, 659, 661], "1mo": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 497, 552, 563, 570, 652, 659], "calendar": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 475, 476, 556, 563, 570, 574, 641, 652, 659, 663], "month": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 496, 498, 551, 563, 570, 636, 652, 659], "1y": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 563, 570, 652, 659], "year": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 496, 498, 556, 563, 564, 570, 571, 641, 652, 653, 659, 660], "1i": [31, 32, 43, 90, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 269, 563, 652], "combin": [31, 32, 33, 43, 90, 263, 264, 269, 287, 509, 510, 525], "3d12h4m25": [31, 32, 43, 90, 263, 264, 269, 497, 570, 659], "12": [31, 32, 43, 90, 136, 194, 263, 264, 269, 287, 308, 414, 471, 496, 497, 498, 554, 560, 565, 570, 574, 649, 659], "25": [31, 32, 43, 90, 94, 95, 263, 264, 269, 274, 296, 297, 298, 345, 393, 497, 570, 574, 659], "integ": [31, 32, 126, 157, 201, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 324, 357, 400, 419, 480, 481, 482, 483, 489, 490, 491, 492, 566, 655, 717, 752, 753], "10i": [31, 32, 263, 264], "often": [31, 32, 175, 202, 263, 264], "ascend": [31, 32, 263, 264, 462], "sens": [31, 32, 90, 263, 264, 727, 729, 733, 739, 741], "dynam": [31, 206, 207, 208, 209, 210, 212, 213, 214, 263], "indic": [31, 32, 165, 168, 169, 171, 172, 173, 206, 207, 208, 209, 210, 212, 213, 214, 217, 222, 235, 263, 264, 302, 367, 371, 372, 373, 374, 375, 416, 426, 437, 461, 522, 726, 727, 729, 733, 737, 751, 752, 754], "need": [31, 32, 71, 82, 263, 264, 446, 630, 727, 728, 749, 750], "temporarili": [31, 32, 263, 264, 456], "so": [31, 32, 55, 263, 264, 456, 462, 582, 671, 737], "matter": [31, 32, 263, 264], "neg": [31, 69, 70, 72, 219, 220, 226, 263, 285, 286, 288, 300, 422, 423, 430, 591, 592, 618, 680, 681, 702], "lower": [31, 57, 163, 183, 198, 201, 210, 256, 263, 280, 397, 400, 409, 460, 497, 538, 725, 737], "_lower_bound": [31, 263], "_upper_bound": [31, 263], "impact": [31, 263], "harder": [31, 263], "parallel": [31, 43, 44, 138, 263, 268, 269, 337, 465, 466, 580, 669, 733, 735, 741, 768], "right": [31, 32, 42, 43, 145, 146, 147, 206, 207, 208, 209, 210, 212, 213, 214, 225, 263, 264, 268, 269, 347, 348, 349, 429, 497, 616, 700, 727, 749, 750], "both": [31, 32, 42, 43, 63, 98, 109, 163, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 268, 269, 456, 497, 613, 617, 623], "tempor": [31, 32, 206, 207, 208, 209, 210, 212, 213, 214, 263, 264, 497], "date_rang": [31, 90, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 659], "low": [31, 460, 497, 566], "16": [31, 32, 94, 95, 162, 207, 264, 287, 297, 298, 393, 427, 439, 480, 489, 499, 500, 743], "high": [31, 460, 497, 566], "30m": 31, "\u03bc": [31, 32, 43, 90, 264, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 659], "00": [31, 43, 90, 497, 499, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 624, 659, 708], "02": [31, 32, 90, 215, 264, 497, 499, 550, 553, 554, 555, 558, 559, 560, 567, 569, 570, 571, 573, 659], "03": [31, 32, 90, 264, 497, 550, 552, 553, 555, 559, 560, 566, 567, 569, 570, 571, 573, 659], "alia": [31, 32, 45, 88, 94, 95, 110, 121, 127, 133, 134, 135, 136, 137, 154, 156, 161, 166, 167, 178, 179, 193, 194, 201, 239, 246, 264, 266, 271, 295, 297, 298, 320, 381, 463, 467, 468, 499, 500, 515, 550, 551, 552, 553, 555, 557, 559, 562, 563, 564, 566, 567, 569, 572, 573, 580, 601, 603, 604, 607, 609, 611, 618, 620, 621, 622, 630, 669, 704, 705, 736, 746, 747], "time_min": 31, "time_max": 31, "boundari": [31, 127, 128, 129, 327, 328, 329], "ad": [31, 86, 94, 109, 297], "time_count": 31, "_lower_boundari": 31, "_upper_boundari": 31, "u32": [31, 52, 96, 105, 117, 118, 119, 120, 121, 132, 133, 178, 191, 192, 199, 239, 242, 300, 317, 322, 398, 448, 451, 452, 461, 528, 532, 535, 536, 539, 551, 554, 558, 560, 564, 565, 566, 571, 572, 575, 576, 586, 604, 611, 675, 688, 695], "23": [31, 32, 264, 554, 570, 639, 659, 743], "should": [31, 43, 97, 98, 99, 100, 101, 102, 105, 138, 205, 206, 207, 208, 209, 210, 212, 213, 214, 217, 225, 253, 268, 269, 272, 287, 301, 308, 337, 404, 405, 406, 407, 408, 409, 411, 412, 413, 416, 429, 549, 573, 580, 634, 662, 669, 717, 751, 752, 754], "end": [31, 148, 163, 265, 271, 464, 512, 592, 603, 607, 618, 622, 681, 691, 702, 706, 727, 737], "lower_bound": 31, "upper_bound": 31, "time_agg_list": 31, "belong": 31, "kei": [31, 43, 53, 55, 59, 62, 269, 282, 537], "04": [31, 90, 497, 499, 551, 552, 555, 558, 559, 560, 564, 567, 570, 571, 572, 573, 624, 659, 708, 738], "idx": [31, 419, 596], "arang": [31, 89, 527], "2i": 31, "3i": 31, "a_agg_list": 31, "rollinggroupbi": 32, "dynamic_groupbi": [32, 264], "now": [32, 264], "individu": [32, 110, 122, 125, 231, 264, 325, 609, 693], "groupby_dynam": [32, 264], "45": [32, 264, 604, 609, 688, 693], "48": [32, 264], "42": [32, 33, 264, 359], "09": [32, 264], "18": [32, 162, 264, 570, 573, 659], "19": [32, 43, 264, 570, 659], "32": [32, 264, 340, 393, 478, 481, 490, 743], "08": [32, 264, 497, 499, 624, 708, 749, 750], "43": [32, 264], "dt": [32, 103, 264, 302, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 659, 766, 771], "with_column": [32, 54, 110, 124, 127, 159, 162, 163, 166, 169, 171, 172, 173, 193, 194, 239, 264, 278, 460, 467, 468, 500, 549, 580, 607, 614, 615, 618, 620, 621, 622, 624, 627, 629, 634, 669, 708, 746, 747, 758], "strptime": [32, 264, 568, 657], "out": [32, 165, 168, 264, 582, 671, 738, 743], "2d": [32, 82, 264], "sum_a": [32, 264], "min_a": [32, 264], "max_a": [32, 264], "assert": [32, 264, 358, 570, 659, 749, 750, 752, 753, 754, 768], "to_list": [32, 264, 596], "seed": [33, 65, 159, 216, 221, 359, 415, 425], "seed_1": [33, 159, 359], "seed_2": [33, 159, 359], "seed_3": [33, 159, 359], "hash": 33, "uint64": [33, 159, 201, 359, 400, 495, 575, 576, 664, 665], "random": [33, 65, 159, 199, 216, 221, 359, 398, 415, 425, 752, 753], "u64": [33, 159, 201, 359], "1381515935931787907": 33, "14326417405130769253": 33, "12561864296213327929": 33, "11391467306893437193": 33, "frame": [36, 83, 89, 98, 266, 279, 444, 465, 728, 749, 753], "in_plac": [36, 71, 92, 399, 401, 424, 431], "grown": 36, "stack": [36, 92, 466], "modifi": [36, 92, 401, 573, 662, 709, 710, 727, 737], "insert": [37, 60, 86, 88, 217, 295, 416, 602, 627, 686, 711, 727, 729, 733, 737, 739, 740, 741], "certain": [37, 90, 148, 250, 279, 302, 512], "baz": [37, 38, 55, 88, 267, 295, 537, 619, 621, 705], "intermedi": [38, 267, 362], "linear": [38, 57, 162, 188, 198, 210, 267, 280, 362, 397, 409, 467, 468, 538, 577, 666, 725], "mask": [39, 41, 164, 166, 174, 355, 365, 368, 377, 394, 395, 418, 455, 578, 667, 687], "duplic": [39, 42, 43, 87, 164, 268, 269, 294, 365, 462, 503], "uniqu": [41, 120, 166, 174, 191, 242, 244, 319, 338, 368, 377, 390, 451, 452, 536, 723, 751, 752, 754], "left_on": [42, 43, 268, 269], "right_on": [42, 43, 268, 269], "joinstrategi": [42, 268], "inner": [42, 140, 268, 302, 340, 361, 456, 484, 584, 673], "suffix": [42, 43, 169, 171, 172, 173, 204, 268, 269, 525, 607, 691], "_right": [42, 43, 268, 269], "sql": [42, 735, 768], "like": [42, 199, 256, 281, 398, 497, 537, 580, 601, 669, 726, 727, 728, 729, 730, 731, 732, 733, 734], "fashion": 42, "outer": [42, 268], "semi": [42, 268], "anti": [42, 268, 302, 418, 419], "cross": [42, 268], "join_asof": [42, 268], "categor": [42, 103, 125, 239, 302, 323, 448, 456, 522, 756], "see": [42, 122, 125, 127, 128, 129, 153, 162, 176, 184, 225, 231, 327, 328, 329, 379, 429, 568, 657, 728, 735, 749, 750, 753, 754, 772], "stringcach": [42, 768], "other_df": [42, 268], "by_left": [43, 269], "by_right": [43, 269], "asofjoinstrategi": [43, 269], "toler": [43, 269, 749, 750], "allow_parallel": [43, 268, 269], "force_parallel": [43, 268, 269], "asof": [43, 269], "join": [43, 162, 193, 250, 256, 269, 287, 456, 465], "nearest": [43, 57, 126, 157, 198, 210, 269, 280, 324, 357, 397, 409, 538, 725], "rather": [43, 269, 627, 711], "asof_join": 43, "search": [43, 269], "last": [43, 55, 73, 76, 87, 119, 121, 138, 234, 269, 289, 292, 294, 317, 320, 337, 436, 540, 551, 564, 571, 582, 595, 621, 633, 636, 653, 660, 671, 684, 705, 748], "whose": [43, 55, 148, 269, 512], "less": [43, 269, 612, 616, 621, 627, 696, 700, 705, 711, 737], "greater": [43, 225, 269, 429, 621, 705], "numer": [43, 47, 127, 128, 129, 202, 269, 302, 327, 328, 329, 376, 417, 768], "By": [43, 73, 269, 433, 446, 453, 717, 727, 728], "done": [43, 109, 124, 269, 289, 322, 612, 616, 630, 696, 700, 727, 737], "within": [43, 269, 484, 749, 750], "distanc": [43, 269], "durat": [43, 90, 239, 269, 448, 497, 552, 555, 557, 559, 562, 567, 573, 637, 640, 645, 648, 651, 656, 662], "allow": [43, 44, 65, 201, 216, 268, 269, 272, 299, 400, 415, 417, 456, 563, 624, 652, 708, 737, 739, 740, 741, 753, 754], "physic": [43, 125, 239, 247, 268, 269, 448, 549, 634, 727], "plan": [43, 44, 247, 251, 252, 261, 268, 269, 281, 287, 301], "up": [43, 126, 268, 269, 272, 324, 487, 627, 711], "forc": [43, 268, 269], "gdp": 43, "2016": 43, "2017": 43, "2018": 43, "2019": 43, "record": 43, "jan": 43, "1st": 43, "4164": 43, "4411": 43, "4566": 43, "4696": 43, "popul": 43, "12th": 43, "82": 43, "66": 43, "83": 43, "52": [43, 95, 215, 298], "05": [43, 90, 497, 552, 566, 570, 659, 738, 749, 750], "object": [44, 83, 102, 103, 122, 125, 143, 231, 262, 266, 281, 302, 321, 323, 343, 434, 442, 497, 517, 717, 726, 727, 728, 729, 730, 731, 732, 733, 734, 739, 741, 752, 753, 754, 768], "execut": [44, 247, 279, 466, 580, 669], "until": [44, 456], "request": 44, "either": [44, 47, 63, 75, 753], "call": [44, 308, 753, 754, 763, 770], "fetch": [44, 248, 250, 265, 271, 295, 737], "run": [44, 138, 250, 256, 279, 287, 337, 465, 476, 580, 669, 736, 742], "small": [44, 227, 228, 256], "describe_plan": 44, "unoptim": [44, 252], "describe_optimized_plan": 44, "optim": [44, 58, 250, 251, 256, 272, 279, 287, 300, 465, 733, 737, 739, 740, 741], "show_graph": 44, "un": 44, "graphviz": [44, 287], "graph": [44, 266, 299, 465, 770], "advis": 44, "thei": [44, 148, 205, 404], "head": [45, 109, 179, 271, 381], "axi": [46, 47, 49, 50, 75, 276], "liter": [46, 47, 50, 51, 53, 75, 79, 107, 108, 200, 305, 306, 460, 461, 496, 498, 603, 614, 615, 687, 698, 699, 717, 728, 736, 746, 754, 758], "maximum": [46, 98, 127, 128, 186, 199, 273, 327, 328, 384, 394, 398, 575, 642, 664, 719, 727, 737, 752, 753, 754], "null_strategi": [47, 75], "nullstrategi": [47, 75], "ignor": [47, 75, 100, 139, 250, 256, 301, 339, 465, 579, 668, 753, 754], "propag": [47, 75], "uint8": [47, 136, 137, 233, 335, 336, 435, 456, 751], "666667": [47, 145, 296], "id_var": [49, 276], "value_var": [49, 276], "variable_nam": [49, 276], "value_nam": [49, 276], "unpivot": [49, 276], "wide": [49, 89, 276], "leav": [49, 276], "identifi": [49, 276], "massag": [49, 276], "variabl": [49, 81, 276, 443, 522], "while": [49, 86, 276, 728, 753, 754], "measur": [49, 276], "just": [49, 276, 737], "non": [49, 194, 205, 206, 207, 208, 209, 210, 212, 213, 214, 276, 393, 404, 405, 406, 407, 408, 409, 411, 412, 413, 446, 468, 561, 604, 609, 650, 688, 693], "give": [49, 176, 202, 276, 379, 553, 638, 729, 733, 739, 740, 741, 768], "chunkedarrai": [51, 516], "per": [52, 98, 534, 536, 538, 541, 542, 543, 544, 545, 546, 547, 548, 580, 582, 669, 671, 752, 753], "as_dict": 53, "split": [53, 156, 525, 620, 621, 704, 705], "partit": [53, 733, 735, 738], "keep": [53, 87, 90, 175, 294, 727, 737], "predict": [53, 55, 58, 90], "requir": [53, 83, 87, 95, 102, 145, 146, 147, 241, 294, 298, 347, 348, 349, 446, 450, 520, 624, 708, 749, 750], "distinct": [53, 199, 398, 496, 498, 499, 597, 685, 754], "k": [53, 176, 240, 379, 449, 549, 634], "l": [53, 156], "m": [53, 302, 441, 476, 477, 497, 499, 550, 553, 569, 573, 624, 635, 638, 658, 662, 708], "func": [54, 278, 308], "arg": [54, 83, 103, 278, 308, 446, 456, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 515], "kwarg": [54, 83, 95, 103, 278, 298, 446, 456, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494], "self": [54, 193, 250, 256, 278, 287, 307, 418, 419, 455, 465], "keyword": [54, 63, 278, 302, 733], "def": [54, 86, 278, 752, 753, 754], "cast_str_to_int": [54, 278], "col_nam": [54, 278], "aggregate_fn": 55, "pivotagg": 55, "sort_column": 55, "spreadsheet": [55, 728], "style": 55, "well": 55, "One": [55, 299, 302], "predefin": 55, "transpos": [55, 537], "discoveri": 55, "interpol": [57, 153, 188, 198, 210, 280, 397, 409, 538, 725], "interpolationmethod": [57, 198, 210, 280, 397, 409, 538, 725], "between": [57, 100, 124, 140, 163, 194, 198, 210, 280, 322, 340, 393, 397, 409, 466, 470, 538, 584, 602, 673, 686, 724, 725, 731, 744, 751, 752, 753, 754], "higher": [57, 102, 198, 210, 280, 397, 409, 538, 725], "midpoint": [57, 198, 210, 280, 397, 409, 538, 725], "contigu": [58, 466, 516, 520, 727, 729, 737, 739, 740, 741], "subsequ": 58, "old": [59, 282], "new_col": 60, "val": [62, 239, 549, 634], "by_pred": 63, "accord": 63, "param": [63, 753, 754], "mutual": 63, "exclus": 63, "addition": 63, "ensur": [63, 244, 272, 446, 452, 756], "clariti": 63, "suppli": 63, "error": [63, 124, 302, 322, 501, 584, 605, 610, 624, 631, 673, 689, 694, 708, 727, 737], "anyth": 63, "rais": [63, 195, 446, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 598, 624, 708, 717, 749, 750], "toomanyrowsreturn": [63, 768], "norowsreturn": [63, 768], "inherit": 63, "rowsexcept": [63, 768], "columnar": [64, 519, 521], "frac": [65, 145, 146, 147, 216, 225, 240, 347, 348, 349, 415, 429, 449], "with_replac": [65, 216, 415], "shuffl": [65, 216, 415, 527], "item": [65, 150, 156, 216, 351, 415, 466, 578, 582, 584, 621, 667, 671, 673, 705], "cannot": [65, 216, 287, 415, 620, 704, 727], "fraction": [65, 98, 194, 216, 393, 415, 566, 624, 655, 749, 750], "onc": [65, 216, 247, 415, 727, 728], "shift_and_fil": 69, "shift": [70, 139, 194, 220, 286, 339, 393, 423, 467, 579, 668], "shrink": [71, 424], "usag": [71, 424, 727, 737, 753, 754], "fit": [71, 89, 424], "exact": [71, 624, 708, 752, 753, 754], "hold": [71, 464], "support": [72, 95, 102, 226, 288, 298, 302, 430, 516, 592, 618, 681, 702, 728, 735, 751, 754], "nulls_last": [73, 119, 121, 227, 289, 317, 320], "accept": [73, 726, 727, 729, 733], "descend": [73, 119, 121, 218, 289, 317, 320, 420], "syntax": [73, 287, 302], "ddof": [74, 91, 230, 245, 290, 296, 433, 453, 724, 744, 745, 757], "standard": [74, 146, 212, 225, 230, 290, 348, 429, 433, 556, 610, 641, 694, 743, 745], "deviat": [74, 146, 212, 230, 290, 348, 433, 745], "degre": [74, 91, 230, 245, 433, 453, 724, 744], "freedom": [74, 91, 230, 245, 433, 453, 724, 744], "21": [75, 570, 659], "nth": [77, 236, 293, 438, 621, 705], "arrow": [78, 99, 442, 446, 501, 516, 537, 729, 739], "mostli": [78, 154], "categoricaltyp": 78, "pyarrow": [78, 82, 83, 102, 302, 442, 445, 446, 516, 520, 727, 729, 733, 738, 743, 769], "large_str": 78, "as_seri": 79, "fruit": [79, 196, 204, 232, 607, 622, 691, 706], "car": [79, 196, 204, 232], "beetl": [79, 196, 204, 232], "audi": [79, 196, 204, 232], "28": [79, 573], "300": [79, 405, 406, 408], "slow": [80, 138, 337, 518, 521, 727, 737], "hot": 81, "encod": [81, 473, 494, 605, 689, 727, 737], "dummi": [81, 443, 522], "foo_1": 81, "foo_2": 81, "foo_3": 81, "bar_6": 81, "bar_7": 81, "bar_8": 81, "ham_a": 81, "ham_b": 81, "ham_c": 81, "u8": [81, 443, 456], "re": [82, 716], "attempt": [82, 446], "ll": [82, 446], "instal": [82, 83, 287, 446, 520, 727, 729, 733, 735, 743], "numpy_arrai": 82, "date_as_object": 83, "sent": [83, 446], "datetime64": 83, "pandas_df": 83, "core": 83, "struct": [85, 88, 103, 244, 295, 302, 596, 620, 621, 704, 705, 768], "three": [85, 746], "four": [85, 746], "five": 85, "num": [85, 163, 166, 627], "include_head": 86, "header_nam": 86, "column_nam": 86, "iter": [86, 138, 337], "diagon": [86, 466], "Will": [86, 250, 256, 287, 302, 465, 719, 722], "veri": [86, 102, 249, 330], "perhap": 86, "column_2": 86, "auto": [86, 733, 741], "separ": [86, 98, 156, 468, 584, 673], "name_gener": [86, 596], "base_nam": 86, "my_column_": 86, "my_column_0": 86, "my_column_1": 86, "my_column_2": 86, "uniquekeepstrategi": [87, 294], "origin": [87, 175, 201, 294, 604, 608, 609, 610, 612, 616, 627, 688, 692, 693, 694, 696, 700, 711, 727], "fail": [87, 294, 308, 624, 708], "decompos": [88, 295], "field": [88, 98, 295, 487, 596, 620, 621, 629, 704, 705, 714], "t_a": [88, 295], "t_b": [88, 295], "t_c": [88, 295], "t_d": [88, 295], "womp": [88, 295], "t_": [88, 295], "t_struct": [88, 295], "step": [89, 460], "unstackdirect": 89, "without": [89, 138, 206, 207, 208, 209, 210, 212, 213, 214, 337, 342, 471, 659, 730, 734, 738, 742], "much": [89, 138, 337], "pivot": [89, 768], "skip": [89, 308, 727, 728, 737], "phase": 89, "direct": [89, 733, 735, 741], "don": [89, 138, 337, 417, 454, 459, 466, 580, 669], "experiment": [89, 95, 138, 206, 207, 208, 209, 210, 212, 213, 214, 298, 337, 471, 659, 738], "subject": 89, "chang": [89, 90, 138, 175, 194, 206, 207, 208, 209, 210, 212, 213, 214, 337, 393, 424, 471, 659, 727, 738], "being": [89, 138, 206, 207, 208, 209, 210, 212, 213, 214, 337, 471, 659, 727, 737, 738, 758], "break": [89, 138, 206, 207, 208, 209, 210, 212, 213, 214, 337, 471, 659, 738], "ascii_uppercas": 89, "eager": [89, 460, 461, 717, 736, 746, 766, 768], "g": [89, 148, 218, 417, 420, 446, 512, 727, 728, 729, 733, 739, 741], "h": [89, 156], "col1_0": 89, "col1_1": 89, "col1_2": 89, "col2_0": 89, "col2_1": 89, "col2_2": 89, "time_column": 90, "regular": [90, 148, 464, 495, 512], "frequenc": 90, "ha": [90, 102, 110, 138, 240, 248, 326, 337, 358, 369, 449, 459, 599, 631], "forward_fil": 90, "06": [90, 565, 574], "varianc": [91, 147, 176, 214, 245, 296, 349, 379, 413, 453, 757], "grow": 92, "b_squar": [94, 297], "36": [94, 297], "named_expr": [95, 298], "overwrit": [95, 256, 297, 298, 727, 737], "provid": [95, 298, 605, 606, 608, 610, 631, 689, 690, 692, 694, 727, 735, 737, 753, 754, 772], "is_not": [95, 298], "opt": [95, 298], "via": [95, 298, 727, 728, 737, 739, 741], "flag": [95, 218, 272, 298, 302, 420, 751], "with_columns_kwarg": [95, 298], "row_nr": [96, 300], "binaryio": [97, 99, 726, 727, 728, 729, 730, 733, 734], "bytesio": [97, 98, 99, 102, 726, 727, 728, 729, 733], "path": [97, 98, 99, 100, 101, 102, 218, 281, 301, 420, 610, 694, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 739, 740, 741], "compress": [97, 99, 102], "avrocompress": 97, "uncompress": [97, 99, 102, 729, 739], "write": [97, 98, 99, 100, 102, 127, 128, 129, 287, 301, 327, 328, 329], "apach": [97, 102, 726], "avro": [97, 726, 768], "written": [97, 98, 99, 100, 101, 102, 301], "snappi": [97, 102], "deflat": 97, "has_head": [98, 727, 728, 737], "sep": [98, 468, 727, 737], "quot": [98, 727, 737], "batch_siz": [98, 727, 740], "1024": [98, 727, 740], "datetime_format": 98, "date_format": 98, "time_format": 98, "float_precis": 98, "null_valu": [98, 727, 737], "textio": [98, 727], "_io": [98, 726, 728, 729], "pathlib": [98, 100, 101, 281, 301, 726, 728, 729, 730, 731, 732, 734, 737, 739, 740], "comma": 98, "csv": [98, 630, 727, 728, 737, 768], "symbol": 98, "process": 98, "thread": [98, 580, 669, 727, 735, 755], "chrono": [98, 568, 624, 657, 708], "crate": 98, "precis": [98, 550, 624, 635], "timeunit": [98, 441, 476, 477, 497, 550, 569, 573, 635, 658, 662], "decim": [98, 215, 414], "dirpath": [98, 737], "new_fil": 98, "ipccompress": 99, "ipc": [99, 729, 730, 738, 739, 768], "binari": 99, "stream": 99, "feather": [99, 729, 739, 768], "lz4": [99, 102], "zstd": [99, 102], "pretti": 100, "row_ori": 100, "json_lin": [100, 731], "to_str": [100, 301], "io": [100, 101, 281, 301, 731, 732, 772], "iobas": [100, 101, 281, 301, 731, 732], "serial": [100, 101], "json": [100, 101, 261, 281, 301, 610, 694, 731, 732, 740, 768], "represent": [100, 101, 239, 251, 252, 448, 549, 551, 554, 556, 558, 560, 561, 564, 565, 566, 571, 572, 574, 634, 636, 639, 641, 647, 649, 650, 653, 654, 655, 660, 661, 663, 770], "common": 100, "deprec": [100, 250, 256, 301, 465, 731, 763], "toggl": [100, 731, 756], "ndjson": [100, 731], "write_ndjson": 100, "newlin": [101, 732, 740], "delimit": [101, 602, 686, 727, 732, 737, 740], "parquetcompress": 102, "compression_level": 102, "row_group_s": 102, "use_pyarrow": [102, 445, 727, 729, 733], "pyarrow_opt": [102, 733], "parquet": [102, 733, 734, 741, 768], "gzip": 102, "lzo": 102, "brotli": 102, "actual": [102, 424, 728, 753, 754], "lz4raw": 102, "good": 102, "yet": 102, "been": [102, 199, 398], "older": 102, "reader": [102, 729, 733], "guarante": [102, 256, 727], "disk": [102, 287], "22": [102, 464, 570, 573, 624, 659, 708], "reduc": [102, 385, 396, 435, 532, 533, 535, 539, 727, 733, 737, 739, 740, 741], "pressur": [102, 733, 740, 741], "improv": [102, 729, 739], "speed": 102, "At": 102, "moment": [102, 176, 225, 379, 429], "featur": [102, 456], "write_t": 102, "context": [103, 105, 110, 154, 227, 228, 244, 299, 456, 459, 469, 513, 580, 598, 669, 742, 766], "arr": [103, 302, 446, 500, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 668, 669, 672, 673, 675, 680, 681, 684, 766, 771], "namespac": [103, 122, 125, 143, 231, 302, 321, 323, 343, 434, 763, 768, 770], "relat": [103, 122, 125, 143, 231, 302, 321, 323, 343, 434], "cat": [103, 239, 302, 456, 468, 471, 549, 603, 625, 626, 634, 687, 766, 771], "meta": [103, 768], "absolut": [104, 303, 749, 750], "94": 105, "renam": [106, 185, 601, 629, 714, 727, 766], "confus": 107, "tt": 107, "tf": [107, 108], "ff": [107, 108], "upcast": 109, "supertyp": 109, "tail": [109, 225, 429, 525], "project": [110, 227, 228, 250, 256, 272, 279, 287, 465, 737, 739, 740, 741], "depend": [110, 199, 398, 459, 513, 575, 576, 598, 664, 665, 743], "expect": [110, 272, 459, 505, 508, 511], "assum": [110, 272, 631], "a_times_2": 110, "element": [111, 112, 113, 114, 115, 116, 130, 131, 133, 134, 135, 136, 137, 138, 149, 159, 167, 182, 194, 199, 202, 217, 222, 223, 224, 229, 237, 238, 240, 308, 309, 310, 311, 312, 313, 314, 331, 332, 333, 334, 335, 336, 337, 350, 355, 370, 383, 393, 398, 416, 426, 427, 428, 432, 433, 439, 440, 449, 450, 453, 580, 620, 621, 669, 704, 705], "invers": [111, 112, 113, 114, 115, 116, 309, 310, 311, 312, 313, 314], "cosin": [111, 112, 130, 131, 184, 309, 310, 331, 332], "570796": [111, 113, 309, 311], "hyperbol": [112, 114, 116, 131, 224, 238, 310, 312, 314, 332, 428, 440], "sine": [113, 114, 184, 223, 224, 311, 312, 427, 428], "881374": [114, 312], "tangent": [115, 116, 237, 238, 313, 314, 439, 440], "785398": [115, 313], "inf": [116, 165, 168, 314, 367, 371, 393, 471], "maxim": [117, 315, 532, 544], "minim": [118, 316, 387, 535, 547, 576, 665], "would": [119, 121, 199, 317, 320, 398, 446, 462, 582, 598, 671], "arg_sort": [121, 320], "exprlistnamespac": 122, "page": [122, 125, 231, 729, 739, 768], "full": [122, 125, 231, 476, 727, 737], "detail": [122, 125, 231, 735, 749, 750, 772], "next": [123, 199, 398], "strict": [124, 302, 322, 417, 605, 624, 689, 708], "throw": [124, 302, 322, 610, 694], "due": [124, 322], "overflow": [124, 136, 137, 233, 302, 322, 335, 336, 435], "i32": [124, 574, 753, 758], "exprcatnamespac": 125, "set_ord": 125, "round": [126, 157, 237, 324, 357], "min_val": [127, 129, 327, 329], "max_val": [127, 128, 327, 328], "otherwis": [127, 128, 129, 145, 146, 147, 201, 308, 327, 328, 329, 347, 348, 349, 400, 418, 419, 758], "inform": [127, 128, 129, 176, 225, 279, 327, 328, 329, 379, 429], "foo_clip": 127, "clip": [128, 129, 328, 329], "543081": [131, 332], "cumul": [133, 134, 135, 136, 137, 333, 334, 335, 336], "len": [133, 203, 402, 471, 611, 612, 616, 627, 696, 700, 711, 752, 753, 754], "a_revers": [133, 134, 135, 136, 137, 185, 204, 232], "product": [136, 140, 335, 340], "int16": [136, 137, 233, 335, 336, 435], "uint16": [136, 137, 233, 335, 336, 435], "prevent": [136, 137, 233, 335, 336, 435], "issu": [136, 137, 233, 335, 336, 435, 727, 728, 737], "min_period": [138, 145, 146, 147, 205, 206, 207, 208, 209, 210, 212, 213, 214, 337, 347, 348, 349, 404, 405, 406, 407, 408, 409, 411, 412, 413], "slide": [138, 337], "increas": [138, 337, 733], "anoth": [138, 228, 308, 337, 417, 550, 635], "realli": [138, 337], "o": [138, 156, 240, 337, 449, 729, 739], "complex": [138, 240, 337, 449], "visit": [138, 337], "null_behavior": [139, 339, 579, 668], "nullbehavior": [139, 339, 579, 668], "th": [139, 225, 339, 429, 579, 668], "discret": [139, 144, 339, 345, 471, 579, 668], "handl": [139, 339, 579, 605, 627, 668, 689, 711, 727, 737], "44": 140, "drop_nul": 141, "drop_nan": 142, "exprdatetimenamespac": 143, "718281828459045": [144, 181, 345, 382], "formula": [144, 345], "pk": [144, 345], "log": [144, 240, 345, 449], "probabl": [144, 345], "doesn": [144, 345, 454, 737], "459148": 144, "754888": 144, "com": [145, 146, 147, 347, 348, 349, 608, 692], "span": [145, 146, 147, 347, 348, 349], "half_lif": [145, 146, 147, 347, 348, 349], "alpha": [145, 146, 147, 347, 348, 349], "adjust": [145, 146, 147, 225, 347, 348, 349, 429], "exponenti": [145, 146, 147, 149, 347, 348, 349, 350], "weight": [145, 146, 147, 205, 206, 207, 208, 209, 210, 212, 213, 214, 225, 347, 348, 349, 404, 405, 406, 407, 408, 409, 411, 412, 413, 429], "move": [145, 146, 147, 206, 207, 209, 213, 347, 348, 349, 405, 406, 408, 412], "averag": [145, 199, 347, 398], "decai": [145, 146, 147, 347, 348, 349], "term": [145, 146, 147, 347, 348, 349], "center": [145, 146, 147, 205, 206, 207, 208, 209, 210, 212, 213, 214, 347, 348, 349, 404, 405, 406, 407, 408, 409, 411, 412, 413], "mass": [145, 146, 147, 347, 348, 349], "gamma": [145, 146, 147, 347, 348, 349], "foral": [145, 146, 147, 347, 348, 349], "geq": [145, 146, 147, 347, 348, 349], "theta": [145, 146, 147, 347, 348, 349], "half": [145, 146, 147, 347, 348, 349], "life": [145, 146, 147, 347, 348, 349], "exp": [145, 146, 147, 347, 348, 349], "ln": [145, 146, 147, 347, 348, 349], "smooth": [145, 146, 147, 347, 348, 349], "factor": [145, 146, 147, 239, 347, 348, 349, 448], "directli": [145, 146, 147, 347, 348, 349, 753, 754], "leq": [145, 146, 147, 347, 348, 349], "divid": [145, 146, 147, 176, 347, 348, 349, 379, 570, 659], "begin": [145, 146, 147, 347, 348, 349, 608, 692], "account": [145, 146, 147, 347, 348, 349, 563, 652], "imbal": [145, 146, 147, 347, 348, 349], "rel": [145, 146, 147, 347, 348, 349, 537, 563, 652, 749, 750], "ew": [145, 146, 147, 347, 348, 349], "w_i": [145, 146, 147, 347, 348, 349], "recurs": [145, 146, 147, 347, 348, 349], "y_0": [145, 146, 147, 347, 348, 349], "x_0": [145, 146, 147, 347, 348, 349], "y_t": [145, 146, 147, 347, 348, 349], "y_": [145, 146, 147, 347, 348, 349], "x_t": [145, 146, 147, 347, 348, 349], "observ": [145, 146, 147, 347, 348, 349], "428571": 145, "bia": [146, 147, 176, 211, 225, 348, 349, 379, 410, 429], "correct": [146, 147, 176, 211, 225, 272, 348, 349, 379, 410, 429, 728], "unbias": [146, 147, 348, 349], "963624": 146, "928571": 147, "wildcard": [148, 457, 464, 512, 514, 766], "regex": [148, 464, 512, 603, 604, 607, 608, 609, 614, 615, 622, 687, 688, 691, 692, 693, 698, 699, 706], "aa": [148, 512], "ba": [148, 512], "cc": [148, 512], "718282": 149, "389056": 149, "54": 149, "59815": 149, "expand": [150, 156, 202, 351], "extend": [151, 307, 352], "group_col": [154, 246], "g1": [154, 193, 246], "g2": [154, 193, 246], "lt": [154, 246], "gte": [154, 246], "explod": 156, "hello": [156, 457, 673, 695], "world": [156, 673, 695], "r": [156, 604, 608, 609, 614, 688, 692, 693, 698], "word": 156, "down": [157, 357, 737, 739, 740, 741], "latest": [158, 599], "2461716855791224000": 159, "16174362112783765148": 159, "13569566217648818014": 159, "11638928888656214026": 159, "6351727772611549480": 159, "fmt": [161, 266, 515, 568, 624, 657, 708], "cumsum": [161, 266], "regrid": 162, "grid": 162, "df_original_grid": 162, "grid_point": 162, "df_new_grid": 162, "include_bound": 163, "primit": [163, 167, 446], "exclud": [163, 464, 753, 754], "finit": [165, 367], "optional_memb": [167, 370], "infinit": [168, 371], "_isnan": 169, "a_isnan": 169, "b_isnan": 169, "negat": 170, "_is_not_nan": 171, "a_is_not_nan": 171, "b_is_not_nan": 171, "_not_nul": 172, "a_not_nul": 172, "b_not_nul": 172, "_isnul": 173, "a_isnul": 173, "b_isnul": 173, "root": [175, 185, 196, 229, 232, 432, 600], "With": [175, 728], "fisher": [176, 225, 379, 429], "pearson": [176, 225, 379, 429, 724], "dataset": [176, 379, 727, 737, 738, 768], "fourth": [176, 379], "central": [176, 225, 379, 429], "squar": [176, 229, 379, 432, 527], "definit": [176, 379], "subtract": [176, 379], "distribut": [176, 225, 379, 429], "elimin": [176, 379], "come": [176, 379, 763, 770], "bias": [176, 225, 379, 429], "scipi": [176, 225, 379, 429], "stat": [176, 225, 379, 429, 768], "153061": 176, "logarithm": [181, 182, 382, 383], "584963": 181, "30103": 182, "60206": 182, "lowest": 183, "9223372036854775808": 183, "agg_list": 184, "elementwis": [184, 205, 206, 207, 208, 209, 210, 212, 213, 214, 404, 405, 406, 407, 408, 409, 411, 412, 413, 457, 458], "transform": [184, 625, 626], "third": 184, "parti": 184, "librari": [184, 501, 507, 772], "book": 184, "to_numpi": 184, "argmax": 184, "_revers": [185, 204, 232], "b_revers": [185, 204, 232], "most": [190, 194, 244, 388, 393, 452, 516, 599, 621, 705], "occur": [190, 199, 250, 256, 287, 388, 398, 465], "subgroup": 193, "postgr": [193, 735], "max_by_group": 193, "percentag": [194, 393, 751, 753, 754], "recent": [194, 393], "least": [194, 244, 393, 452, 505, 753], "previou": [194, 393], "percent": [194, 393], "090909": 194, "expon": 195, "power": 195, "27": [195, 539, 565, 574], "64": [195, 393, 479, 482, 491], "reverse_": 196, "reverse_a": 196, "reverse_fruit": 196, "reverse_b": 196, "reverse_car": 196, "rankmethod": [199, 398], "deal": [199, 302, 398, 624, 708], "ti": [199, 398], "appropri": [199, 398], "dens": [199, 398], "ordin": [199, 398, 564, 653], "avail": [199, 256, 398, 752, 763, 766, 770, 771], "competit": [199, 398], "highest": [199, 243, 398], "immedi": [199, 398, 746], "those": [199, 398], "correspond": [199, 398, 556, 641], "repeat": [200, 202, 729, 739], "sign": [201, 400, 480, 481, 482, 483, 563, 627, 652, 711], "bit": [201, 400, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 603, 687], "unsign": [201, 400, 489, 490, 491, 492], "64bit": [201, 400], "safe": [201, 400, 446], "coerc": 202, "coercion": [202, 250, 256, 279, 287, 465], "op": [202, 754], "dim": [203, 402], "flat": [203, 402], "fruits_revers": [204, 232], "cars_revers": [204, 232], "window_s": [205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "specif": [205, 302, 404, 624, 708, 735, 746, 753], "rolling_min": [205, 404], "rolling_max": [205, 404], "rolling_mean": [205, 404], "rolling_sum": [205, 404], "multipli": [205, 206, 207, 208, 209, 210, 212, 213, 214, 404, 405, 406, 407, 408, 409, 411, 412, 413], "358899": 205, "041452": 205, "567764": 205, "travers": [206, 207, 209, 212, 213, 214, 405, 406, 408, 411, 412, 413], "vector": [206, 207, 209, 212, 213, 214, 405, 406, 408, 411, 412, 413], "fix": [206, 207, 208, 209, 210, 212, 213, 214, 573, 662, 728, 752, 753], "5h": [206, 207, 208, 209, 210, 212, 213, 214], "groupby_rol": [206, 207, 208, 209, 210, 212, 213, 214, 263], "quantil": [210, 409], "33": [210, 215, 464], "skew": [211, 410], "527525": 212, "333333": [214, 393], "digit": [215, 414, 627, 688, 711], "17": [215, 331], "maintain": [217, 241, 416, 450], "enabl": [218, 420], "downstream": [218, 420], "code": [218, 420], "user": [218, 420], "fast": [218, 420], "incorrect": [218, 420, 573, 631, 662], "care": [218, 420], "content": [221, 244, 425], "modul": 221, "175201": [224, 428], "sampl": [225, 429, 527, 727], "about": [225, 429], "unimod": [225, 429], "continu": [225, 429], "skewtest": [225, 429], "enough": [225, 429, 580, 669], "speak": [225, 429], "coeffici": [225, 429], "g_1": [225, 429], "m_3": [225, 429], "m_2": [225, 429], "m_i": [225, 429], "sum_": [225, 429], "texttt": [225, 429], "k_3": [225, 429], "k_2": [225, 429], "sqrt": [225, 429], "343622": 225, "whole": [227, 228, 561, 608, 650, 692, 728], "larg": [227, 228, 537], "larger": 227, "414214": [229, 432], "exprstringnamespac": 231, "to_uppercas": 231, "taken": [235, 592, 618, 681, 702], "56": [237, 743], "761594": [238, 440], "replic": [239, 448], "vals_phys": 239, "largest": [240, 449], "smallest": [240, 449], "appear": [242, 451], "value_count": 242, "might": [242, 598, 727, 737], "id": [242, 244, 451, 527, 614, 615], "9223372036854775807": 243, "multithread": 244, "ldf": [247, 249, 253, 254, 255, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 630, 631, 632, 633], "hit": 247, "node": [247, 266, 272, 279], "type_coercion": [250, 251, 256, 279, 287, 465], "predicate_pushdown": [250, 251, 256, 272, 279, 287, 465], "projection_pushdown": [250, 251, 256, 272, 279, 287, 465], "simplify_express": [250, 251, 256, 279, 287, 465], "string_cach": [250, 256, 465], "no_optim": [250, 256, 272, 279, 465], "slice_pushdown": [250, 251, 256, 272, 279, 287, 465], "common_subplan_elimin": [250, 251, 256, 287, 465], "huge": 250, "saver": 250, "debug": [250, 256, 272], "pushdown": [250, 256, 272, 279, 287, 300, 465], "simplifi": [250, 256, 279, 287, 465], "pleas": [250, 256], "try": [250, 256, 287, 465, 509, 510, 727, 728, 729, 733, 737, 739, 741], "branch": [250, 256, 287, 465], "subplan": [250, 256, 287, 465], "n_row": [256, 726, 727, 729, 733, 737, 739, 740, 741], "500": [256, 405, 406, 408], "purpos": 256, "scan": [256, 265, 271, 518, 521, 727, 733, 737, 738, 739, 740, 741], "help": [256, 766], "final": [256, 741], "influenc": [256, 272], "lf": [259, 760, 761], "read_json": [261, 301], "lazygroupbi": [262, 263, 264], "NOT": [262, 629], "typeerror": 262, "subscript": 262, "load": [265, 271, 735], "wherea": [265, 271], "validate_output_schema": 272, "past": 272, "paramount": 272, "hard": 272, "bug": [272, 631], "alwai": [272, 418, 419, 598, 727], "caller": [272, 631], "invari": 272, "upheld": 272, "prune": 272, "from_json": 281, "write_json": 281, "output_path": 287, "raw_output": 287, "figsiz": 287, "plot": 287, "figur": 287, "dot": 287, "matplotlib": 287, "290994": 290, "extern": 299, "access": 299, "part": [299, 516, 620, 621, 704, 705], "block": 300, "arraylik": 302, "nan_to_nul": 302, "dtype_if_empti": 302, "position": 302, "posit": 302, "pattern": [302, 418, 419, 603, 604, 608, 609, 614, 615, 687, 688, 692, 693, 698, 699, 727, 737, 739, 741], "scenario": 302, "through": [302, 735], "s3": [302, 738], "inner_dtyp": 302, "time_unit": [302, 476, 477, 497, 573], "u": [302, 441, 476, 477, 497, 550, 553, 569, 573, 624, 635, 638, 658, 662, 736], "sr": 304, "new_aliased_sr": 304, "append_chunk": 307, "super": 307, "skip_nul": 308, "special": [308, 727, 737], "141593": 309, "292432": 310, "549306": 314, "listnamespac": 321, "catnamespac": 323, "math": [331, 427, 439], "pi": [331, 427, 439], "1232e": 331, "quick": 338, "mix": 338, "series_num": 338, "581139": 338, "series_str": 338, "datetimenamespac": 343, "005": 345, "06293300616044681": 345, "65": 345, "8568409950394724": 345, "4000000": 346, "814697265625": 346, "lit": [354, 514, 747, 758], "bitmask": 358, "swiftli": 358, "89438004737668041": 359, "14107061265552512458": 359, "15437026767517145468": 359, "datelik": 364, "sublist": [370, 575, 576, 578, 579, 581, 582, 583, 584, 585, 592, 595, 664, 665, 667, 668, 670, 671, 672, 673, 674, 681, 684], "timedelta": [384, 387, 497, 551, 553, 554, 558, 560, 563, 564, 565, 566, 569, 570, 571, 572, 574, 642, 644, 646, 652, 659], "166667": 393, "142857": 393, "125": 393, "128": 393, "512": 393, "local": [394, 395], "peak": [394, 395], "i8": 403, "nanstd": 404, "858612": 404, "200": [405, 406, 408], "400": [405, 406, 408], "150": 406, "250": 406, "350": 406, "450": 406, "dev": 411, "12345": 414, "56789": 414, "901234": 414, "57": 414, "mutat": 419, "exactli": [424, 620, 621, 704, 705, 749, 750, 753, 754], "2246e": [427, 439], "syntact": [432, 512, 513, 523, 725, 742, 747], "sugar": [432, 512, 513, 523, 725, 742, 747], "delta": [433, 453, 477, 724, 744], "divisor": [433, 453], "stringnamespac": 434, "6331e16": 439, "lib": 442, "int64arrai": 442, "a_1": [443, 620, 704], "a_2": 443, "a_3": 443, "convers": [445, 446, 624, 708, 768], "zero_copy_onli": 446, "writabl": 446, "complet": [446, 525], "view": 446, "know": [446, 454], "what": [446, 454], "presenc": 446, "immut": 446, "made": 446, "ignore_nul": 454, "seriesview": 454, "unless": [454, 517], "manag": 456, "categori": [456, 471, 549, 634, 756, 768], "invalid": [456, 605, 610, 689, 694, 727, 737], "outermost": 456, "exit": 456, "color": [456, 527], "red": [456, 527], "green": [456, 527], "blue": 456, "yellow": 456, "black": 456, "succe": [456, 727, 737], "df_join": 456, "thing": [457, 513, 737], "columnwis": [457, 458], "AND": 457, "bitwis": [457, 458], "OR": 458, "etc": [460, 519, 521, 727, 729, 733, 739, 741], "Be": 460, "eagerli": [461, 736], "oppos": 461, "lazili": [461, 727, 737, 739, 740, 741], "to_seri": [461, 596], "argsort": 462, "hamburg": 464, "lazy_fram": 465, "threadpool": 465, "concatmethod": 466, "relev": 466, "concatten": 466, "concat": [467, 468], "lag": 467, "mimic": 467, "a_lag_": 467, "a_rol": 467, "dog": [468, 603, 625, 626, 687], "plai": 468, "swim": 468, "walk": 468, "full_sent": 468, "covari": 470, "bin": 471, "break_point_label": 471, "break_point": 471, "category_label": 471, "breakpoint": 471, "string_repr": [472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494], "tu": [476, 477, 550, 553, 569, 573, 635, 638, 658, 662], "tz": 476, "time_zon": 476, "timezon": 476, "zoneinfo": 476, "available_timezon": 476, "wrap": 486, "arbitrari": [486, 753], "composit": 487, "static": [493, 631], "utf": 494, "polars_u64_idx": 495, "compon": [496, 498, 499, 566, 624, 655], "31": [496, 498, 551, 552, 560, 571, 624, 636, 708, 743], "granular": 497, "finer": 497, "permut": 497, "drang": 497, "1985": 497, "07": [497, 551, 564, 572, 624, 708], "add_week": 499, "add_dai": 499, "add_second": 499, "add_millisecond": 499, "add_hour": 499, "add_millisec": 499, "ond": 499, "001": [499, 557, 562], "002": [499, 557, 562], "eval": 500, "rank": [500, 580, 669, 744], "concat_list": [500, 580, 669], "mathemat": 500, "a_b_doubl": 500, "encount": [501, 610, 694], "state": 507, "panic": 507, "mismatch": 509, "incompat": 510, "intoexpr": 514, "accumul": 514, "fn": 514, "new_valu": 514, "fstring": 515, "placehold": 515, "hello_": 515, "_world": 515, "foo_": 515, "_bar_": 515, "foo_a_bar_1": 515, "foo_b_bar_2": 515, "foo_c_bar_3": 515, "closest": 516, "infer_schema_length": [518, 521, 727, 728, 737, 740], "nan_to_non": 520, "datetimeindex": 520, "pd_df": 520, "pd_seri": 520, "agg_group": 523, "idiomat": 525, "_sum": 525, "_tail_sum": 525, "bar_sum": 525, "bar_tail_sum": 525, "sub": [527, 607, 622, 691, 706], "triangl": 527, "group_df": 527, "nr": [530, 540, 632, 633], "833333": 533, "pivot_column": 537, "values_column": 537, "pivotop": 537, "ideal": 537, "categoricalord": [549, 634], "lexic": [549, 634], "lose": [550, 635], "2001": [550, 551, 553, 554, 558, 560, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 624, 659, 708], "tu_m": 550, "tu_n": 550, "extract": [551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 571, 572, 574, 609, 610, 636, 637, 639, 640, 641, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 660, 661, 663, 693, 694], "stop": [551, 553, 554, 558, 560, 564, 565, 569, 570, 571, 572, 574, 659, 726, 727, 729, 733, 737, 739, 740, 741], "weekdai": [551, 564], "day_of_month": [551, 564, 572], "ordinal_dai": [551, 572], "day_of_year": [551, 564, 572], "diff": [552, 555, 557, 559, 562, 567], "days_diff": 552, "epochtimeunit": [553, 638], "sinc": [553, 561, 638, 650], "unix": [553, 638], "epoch_n": 553, "epoch_": 553, "978307200000000": [553, 569], "978307200": 553, "978393600000000": [553, 569], "978393600": 553, "978480000000000": [553, 569], "978480000": 553, "hours_diff": 555, "iso": [556, 571, 641, 660], "milliseconds_diff": 557, "1001": [557, 562], "003": [557, 562], "997": [557, 562], "998": [557, 562], "999": [557, 561, 562, 650], "59": [558, 566, 647, 655], "minutes_diff": 559, "1440": 559, "leap": [561, 563, 650, 652], "000": [561, 650], "nanoseconds_diff": 562, "1000000": [562, 627], "minu": [563, 652], "dictat": [563, 652], "2000": 563, "2005": 563, "date_plus_1i": 563, "1y2mo": 563, "date_min": 563, "1998": 563, "2002": [563, 565, 574], "1999": 563, "2003": 563, "2004": 563, "2006": 563, "366": [564, 653], "180": [565, 574], "milli": [566, 655], "micro": [566, 655], "456789": 566, "654321": 566, "111110": 566, "765431": 566, "sec": 566, "11111": 566, "seconds_diff": 567, "timestamp_n": 569, "timestamp_m": 569, "978307200000": 569, "978393600000": 569, "978480000000": 569, "bucket": [570, 659], "49": [570, 659], "53": [571, 660], "mondai": [572, 661], "sundai": [572, 661], "tu_u": 573, "32971": 573, "32974": 573, "32976": 573, "compil": [575, 576, 664, 665], "membership": [578, 667], "against": [580, 669], "activ": [580, 669], "blindli": [580, 669], "worth": [580, 669], "n_field_strategi": 596, "tostructstrategi": 596, "first_non_nul": 596, "max_width": 596, "field_0": 596, "field_1": 596, "field_n": 596, "col_name_": 596, "col_name_0": 596, "col_name_1": 596, "col_name_2": 596, "produc": [598, 718, 753, 754], "computeerror": [598, 768], "undo": 601, "keep_nam": 601, "substr": [603, 607, 614, 615, 619, 620, 621, 622, 687, 691, 698, 699, 703, 704, 705, 706], "treat": [603, 614, 615, 687, 698, 699], "starts_with": [603, 607, 691], "ends_with": [603, 622, 706], "crab": [603, 687], "rab": [603, 687], "success": [604, 609, 688, 693], "overlap": [604, 609, 688, 693], "captur": [604, 608, 609, 688, 692, 693], "noth": [604, 608, 609, 610, 688, 692, 693, 694], "123": [604, 609, 615, 688, 693, 699], "bla": [604, 609, 688, 693], "asd": [604, 609, 688, 693], "xyz": [604, 609, 688, 693], "678": [604, 609, 688, 693], "910t": [604, 609, 688, 693], "count_digit": 604, "transferencod": [605, 606, 689, 690], "hex": [605, 606, 689, 690], "base64": [605, 606, 689, 690], "thrown": [605, 689], "unabl": [605, 689], "unhandl": [605, 689], "666f6f": [605, 606, 689, 690], "626172": [605, 606, 689, 690], "mango": [607, 622, 691, 706], "go": [607, 691], "has_suffix": 607, "group_index": [608, 692], "target": [608, 624, 692, 708], "http": [608, 692, 772], "vote": [608, 692], "ballon_dor": [608, 692], "candid": [608, 692], "messi": [608, 692], "ref": [608, 692], "candidat": [608, 692], "jorginho": [608, 692], "ronaldo": [608, 692], "w": [608, 692], "extracted_nr": 609, "910": [609, 693], "json_path": [610, 694], "jsonpath": [610, 694], "regardless": [610, 694], "document": [610, 624, 694, 708, 728, 735], "here": [610, 694, 735, 752, 753, 754], "json_val": [610, 694], "bear": 611, "110": 611, "fillchar": [612, 616, 696, 700], "justifi": [612, 616, 696, 700], "pad": [612, 616, 627, 696, 700, 711], "cow": [612, 616, 696, 700], "monkei": [612, 616, 696, 700], "hippopotamu": [612, 616, 696, 700], "whitespac": [613, 617, 623, 697, 701, 707], "trail": [613, 617, 623, 701, 707], "replace_al": [614, 698], "text": [614, 615], "123abc": [614, 698], "abc456": [614, 698], "abc": [614, 698], "abcabc": [615, 699], "123a123": [615, 699], "bc": [615, 699], "subslic": [618, 702], "pear": [618, 702], "papaya": [618, 702], "dragonfruit": [618, 702], "s_slice": 618, "ear": [618, 702], "aya": [618, 702], "uit": [618, 702], "ya": [618, 702], "onf": [618, 702], "inclus": [619, 620, 703, 704], "d_4": [620, 704], "_": [620, 704], "rename_field": [620, 621, 704, 705], "first_part": [620, 621, 704, 705], "second_part": [620, 621, 704, 705], "unnest": [620, 621, 704, 705], "restrict": [621, 705], "remaind": [621, 705], "prefix": [622, 627, 706, 711], "app": [622, 706], "has_prefix": 622, "pars": [624, 708, 727, 728, 737, 739, 740], "strftime": [624, 708], "anywher": [624, 708], "eg": 624, "3f": 624, "sun": [624, 708], "jul": [624, 708, 743], "34": [624, 708], "to_fram": [624, 628, 629, 704, 705, 708], "lowercas": [625, 709], "variant": [625, 626], "uppercas": [626, 710], "align": [627, 711], "10000": 627, "100000": 627, "0010": 627, "0001": 627, "00000": 627, "00001": 627, "to_struct": [628, 629], "my_struct": [628, 629, 746], "anymor": 629, "panicexcept": [629, 768], "describ": [630, 753], "scan_csv": [630, 727], "n_uniqu": 630, "unique_nam": 630, "known": [631, 753], "equival": [709, 710], "export": 716, "allow_object": 717, "unknown": 717, "valueexcept": 717, "correl": [724, 744], "new_column": [727, 728], "comment_char": [727, 737], "quote_char": [727, 737], "skip_row": [727, 737], "ignore_error": [727, 737], "parse_d": [727, 737], "n_thread": 727, "8192": 727, "csvencod": [727, 737], "low_memori": [727, 733, 737, 740, 741], "storage_opt": [727, 729, 733, 739, 741], "skip_rows_after_head": [727, 737], "row_count_nam": [727, 729, 733, 737, 739, 740, 741], "row_count_offset": [727, 729, 733, 737, 739, 740, 741], "sample_s": 727, "eol_char": [727, 737], "handler": [727, 728], "builtin": [727, 728], "open": [727, 728, 729, 733, 739, 741], "stringio": 727, "fsspec": [727, 729, 733, 739, 741, 743], "remot": [727, 729, 733], "autogener": [727, 737], "column_x": [727, 737], "enumer": [727, 737], "shorter": 727, "comment": [727, 737], "line": [727, 728, 737], "escap": [727, 737], "cpu": 727, "system": 727, "multi": 727, "lossi": [727, 737], "decod": 727, "im": 727, "nativ": [727, 729, 733], "parser": 727, "even": 727, "regard": 727, "storag": [727, 729, 733, 739, 741], "connect": [727, 729, 733, 735, 738, 739, 741, 769], "host": [727, 729, 733, 739, 741], "port": [727, 729, 733, 735, 739, 741], "usernam": [727, 729, 733, 735, 739, 741], "password": [727, 729, 733, 735, 739, 741], "row_count": [727, 729, 733, 737, 739, 740, 741], "glob": [727, 737, 739, 741], "sheet_id": 728, "sheet_nam": 728, "xlsx2csv_option": 728, "read_csv_opt": 728, "excel": [728, 768], "xlsx": 728, "sheet": 728, "xlsx2csv": [728, 743], "read_csv": [728, 737], "skip_empty_lin": 728, "my": [728, 738], "datasheet": 728, "excel_fil": 728, "As": [728, 736], "look": 728, "twice": 728, "xl": 728, "xlsm": 728, "xlsb": 728, "odf": 728, "od": 728, "odt": 728, "from_panda": [728, 735], "memory_map": [729, 733, 739], "v2": [729, 739], "greatli": [729, 739], "read_ndjson": 731, "parallelstrategi": [733, 741], "directori": 733, "awar": 733, "stabl": 733, "row_group": [733, 741], "read_tabl": 733, "connection_uri": 735, "partition_on": 735, "partition_rang": 735, "partition_num": 735, "protocol": 735, "mysql": 735, "sqlite": 735, "redshift": 735, "clickhous": 735, "databas": 735, "altern": 735, "solut": 735, "engin": 735, "raw": 735, "connectorx": [735, 743], "uri": 735, "postgresql": 735, "server": 735, "backend": 735, "transfer": 735, "lineitem": 735, "partition_col": 735, "explicitli": [735, 752, 753], "mode": 736, "polarsdatatyp": 737, "with_column_nam": 737, "push": [737, 739, 740, 741], "therebi": [737, 739, 740, 741], "potenti": [737, 739, 740, 741], "overhead": [737, 739, 740, 741], "updat": 737, "my_long_fil": 737, "breezah": 737, "terribl": 737, "mydf": 737, "write_csv": 737, "cloud": 738, "dset": 738, "folder": 738, "1970": 738, "batch": 740, "version": 743, "stdout": 743, "info": 743, "platform": 743, "linux": 743, "microsoft": 743, "wsl2": 743, "x86_64": 743, "glibc2": 743, "main": 743, "gcc": 743, "20210110": 743, "spearman": 744, "sever": 746, "a_and_b": 746, "across": 747, "get_column": 747, "check_dtyp": [749, 750], "check_exact": [749, 750], "check_column_nam": 749, "rtol": [749, 750], "1e": [749, 750], "atol": [749, 750], "nans_compare_equ": [749, 750], "assertionerror": [749, 750], "inexact": [749, 750], "check_nam": 750, "searchstrategi": [751, 753, 754], "null_prob": [751, 753, 754], "recognis": 751, "chanc": [751, 753, 754], "addit": [751, 752], "hypothesi": [751, 752, 753, 754, 772], "sampled_from": 751, "unique_small_int": 751, "ccy": 751, "gbp": 751, "jpy": 751, "min_col": [752, 753], "max_col": [752, 753], "suitabl": 752, "standalon": [752, 753], "itself": 752, "explicit": 752, "omit": 752, "mincol": 752, "control": 752, "especi": 752, "punctuat": 752, "test_special_char_colname_init": 752, "test_unique_xyz": 752, "assert_someth": 752, "min_siz": [753, 754], "max_siz": [753, 754], "include_col": 753, "allowed_dtyp": [753, 754], "excluded_dtyp": [753, 754], "desir": 753, "onto": 753, "exist": 753, "independ": [753, 754], "basi": 753, "pct": 753, "preced": 753, "deploi": [753, 754], "decor": [753, 754], "characterist": [753, 754], "develop": [753, 754], "concret": [753, 754], "test_repr": [753, 754], "repr": [753, 754], "df_strategi": 753, "15836": 753, "1755e": 753, "38": 753, "575050513": 753, "constructor": [754, 768], "max_data_s": 754, "54666": 754, "35": 754, "6414": 754, "63290": 754, "pool": 755, "isn": 758, "thens": 758, "chain": 758, "favor": 763, "These": 766, "sometim": 766, "polar": [766, 768, 770, 772], "under": [766, 771], "overview": 768, "public": 768, "expos": 768, "descript": 768, "manipul": 768, "timeseri": 768, "set_ascii_t": 768, "set_fmt_str_length": 768, "set_global_string_cach": 768, "set_tbl_col": 768, "set_tbl_row": 768, "set_tbl_width_char": 768, "set_utf8_t": 768, "unset_global_string_cach": 768, "toggle_string_cach": 768, "arrowerror": 768, "duplicateerror": 768, "nodataerror": 768, "notfounderror": 768, "schemaerror": 768, "shapeerror": 768, "show_vers": 768, "readthedoc": 772}, "objects": {"polars.Config": [[1, 0, 1, "", "set_ascii_tables"], [2, 0, 1, "", "set_fmt_str_lengths"], [3, 0, 1, "", "set_global_string_cache"], [4, 0, 1, "", "set_tbl_cols"], [5, 0, 1, "", "set_tbl_rows"], [6, 0, 1, "", "set_tbl_width_chars"], [7, 0, 1, "", "set_utf8_tables"], [8, 0, 1, "", "unset_global_string_cache"]], "polars": [[9, 1, 1, "", "DataFrame"], [103, 1, 1, "", "Expr"], [770, 1, 1, "", "LazyFrame"], [302, 1, 1, "", "Series"], [456, 1, 1, "", "StringCache"], [457, 3, 1, "", "all"], [458, 3, 1, "", "any"], [459, 3, 1, "", "apply"], [460, 3, 1, "", "arange"], [461, 3, 1, "", "arg_where"], [462, 3, 1, "", "argsort_by"], [463, 3, 1, "", "avg"], [464, 3, 1, "", "col"], [465, 3, 1, "", "collect_all"], [466, 3, 1, "", "concat"], [467, 3, 1, "", "concat_list"], [468, 3, 1, "", "concat_str"], [469, 3, 1, "", "count"], [470, 3, 1, "", "cov"], [471, 3, 1, "", "cut"], [496, 3, 1, "", "date"], [497, 3, 1, "", "date_range"], [498, 3, 1, "", "datetime"], [499, 3, 1, "", "duration"], [500, 3, 1, "", "element"], [512, 3, 1, "", "exclude"], [513, 3, 1, "", "first"], [514, 3, 1, "", "fold"], [515, 3, 1, "", "format"], [516, 3, 1, "", "from_arrow"], [517, 3, 1, "", "from_dict"], [518, 3, 1, "", "from_dicts"], [519, 3, 1, "", "from_numpy"], [520, 3, 1, "", "from_pandas"], [521, 3, 1, "", "from_records"], [522, 3, 1, "", "get_dummies"], [523, 3, 1, "", "groups"], [524, 3, 1, "", "head"], [716, 3, 1, "", "list"], [717, 3, 1, "", "lit"], [718, 3, 1, "", "map"], [719, 3, 1, "", "max"], [720, 3, 1, "", "mean"], [721, 3, 1, "", "median"], [722, 3, 1, "", "min"], [723, 3, 1, "", "n_unique"], [724, 3, 1, "", "pearson_corr"], [725, 3, 1, "", "quantile"], [726, 3, 1, "", "read_avro"], [727, 3, 1, "", "read_csv"], [728, 3, 1, "", "read_excel"], [729, 3, 1, "", "read_ipc"], [730, 3, 1, "", "read_ipc_schema"], [731, 3, 1, "", "read_json"], [732, 3, 1, "", "read_ndjson"], [733, 3, 1, "", "read_parquet"], [734, 3, 1, "", "read_parquet_schema"], [735, 3, 1, "", "read_sql"], [736, 3, 1, "", "repeat"], [737, 3, 1, "", "scan_csv"], [738, 3, 1, "", "scan_ds"], [739, 3, 1, "", "scan_ipc"], [740, 3, 1, "", "scan_ndjson"], [741, 3, 1, "", "scan_parquet"], [742, 3, 1, "", "select"], [743, 3, 1, "", "show_versions"], [744, 3, 1, "", "spearman_rank_corr"], [745, 3, 1, "", "std"], [746, 3, 1, "", "struct"], [747, 3, 1, "", "sum"], [748, 3, 1, "", "tail"], [755, 3, 1, "", "threadpool_size"], [756, 3, 1, "", "toggle_string_cache"], [757, 3, 1, "", "var"], [758, 3, 1, "", "when"]], "polars.DataFrame": [[9, 0, 1, "", "__init__"], [10, 0, 1, "", "apply"], [11, 0, 1, "", "cleared"], [12, 0, 1, "", "clone"], [13, 2, 1, "", "columns"], [14, 0, 1, "", "describe"], [15, 0, 1, "", "drop"], [16, 0, 1, "", "drop_in_place"], [17, 0, 1, "", "drop_nulls"], [18, 2, 1, "", "dtypes"], [19, 0, 1, "", "estimated_size"], [20, 0, 1, "", "explode"], [21, 0, 1, "", "extend"], [22, 0, 1, "", "fill_nan"], [23, 0, 1, "", "fill_null"], [24, 0, 1, "", "filter"], [25, 0, 1, "", "find_idx_by_name"], [26, 0, 1, "", "fold"], [27, 0, 1, "", "frame_equal"], [28, 0, 1, "", "get_column"], [29, 0, 1, "", "get_columns"], [30, 0, 1, "", "groupby"], [31, 0, 1, "", "groupby_dynamic"], [32, 0, 1, "", "groupby_rolling"], [33, 0, 1, "", "hash_rows"], [34, 0, 1, "", "head"], [35, 2, 1, "", "height"], [36, 0, 1, "", "hstack"], [37, 0, 1, "", "insert_at_idx"], [38, 0, 1, "", "interpolate"], [39, 0, 1, "", "is_duplicated"], [40, 0, 1, "", "is_empty"], [41, 0, 1, "", "is_unique"], [42, 0, 1, "", "join"], [43, 0, 1, "", "join_asof"], [44, 0, 1, "", "lazy"], [45, 0, 1, "", "limit"], [46, 0, 1, "", "max"], [47, 0, 1, "", "mean"], [48, 0, 1, "", "median"], [49, 0, 1, "", "melt"], [50, 0, 1, "", "min"], [51, 0, 1, "", "n_chunks"], [52, 0, 1, "", "null_count"], [53, 0, 1, "", "partition_by"], [54, 0, 1, "", "pipe"], [55, 0, 1, "", "pivot"], [56, 0, 1, "", "product"], [57, 0, 1, "", "quantile"], [58, 0, 1, "", "rechunk"], [59, 0, 1, "", "rename"], [60, 0, 1, "", "replace"], [61, 0, 1, "", "replace_at_idx"], [62, 0, 1, "", "reverse"], [63, 0, 1, "", "row"], [64, 0, 1, "", "rows"], [65, 0, 1, "", "sample"], [66, 2, 1, "", "schema"], [67, 0, 1, "", "select"], [68, 2, 1, "", "shape"], [69, 0, 1, "", "shift"], [70, 0, 1, "", "shift_and_fill"], [71, 0, 1, "", "shrink_to_fit"], [72, 0, 1, "", "slice"], [73, 0, 1, "", "sort"], [74, 0, 1, "", "std"], [75, 0, 1, "", "sum"], [76, 0, 1, "", "tail"], [77, 0, 1, "", "take_every"], [78, 0, 1, "", "to_arrow"], [79, 0, 1, "", "to_dict"], [80, 0, 1, "", "to_dicts"], [81, 0, 1, "", "to_dummies"], [82, 0, 1, "", "to_numpy"], [83, 0, 1, "", "to_pandas"], [84, 0, 1, "", "to_series"], [85, 0, 1, "", "to_struct"], [86, 0, 1, "", "transpose"], [87, 0, 1, "", "unique"], [88, 0, 1, "", "unnest"], [89, 0, 1, "", "unstack"], [90, 0, 1, "", "upsample"], [91, 0, 1, "", "var"], [92, 0, 1, "", "vstack"], [93, 2, 1, "", "width"], [94, 0, 1, "", "with_column"], [95, 0, 1, "", "with_columns"], [96, 0, 1, "", "with_row_count"], [97, 0, 1, "", "write_avro"], [98, 0, 1, "", "write_csv"], [99, 0, 1, "", "write_ipc"], [100, 0, 1, "", "write_json"], [101, 0, 1, "", "write_ndjson"], [102, 0, 1, "", "write_parquet"]], "polars.Expr": [[103, 0, 1, "", "__init__"], [104, 0, 1, "", "abs"], [105, 0, 1, "", "agg_groups"], [106, 0, 1, "", "alias"], [107, 0, 1, "", "all"], [108, 0, 1, "", "any"], [109, 0, 1, "", "append"], [110, 0, 1, "", "apply"], [111, 0, 1, "", "arccos"], [112, 0, 1, "", "arccosh"], [113, 0, 1, "", "arcsin"], [114, 0, 1, "", "arcsinh"], [115, 0, 1, "", "arctan"], [116, 0, 1, "", "arctanh"], [117, 0, 1, "", "arg_max"], [118, 0, 1, "", "arg_min"], [119, 0, 1, "", "arg_sort"], [120, 0, 1, "", "arg_unique"], [121, 0, 1, "", "argsort"], [122, 2, 1, "", "arr"], [123, 0, 1, "", "backward_fill"], [124, 0, 1, "", "cast"], [125, 2, 1, "", "cat"], [126, 0, 1, "", "ceil"], [127, 0, 1, "", "clip"], [128, 0, 1, "", "clip_max"], [129, 0, 1, "", "clip_min"], [130, 0, 1, "", "cos"], [131, 0, 1, "", "cosh"], [132, 0, 1, "", "count"], [133, 0, 1, "", "cumcount"], [134, 0, 1, "", "cummax"], [135, 0, 1, "", "cummin"], [136, 0, 1, "", "cumprod"], [137, 0, 1, "", "cumsum"], [138, 0, 1, "", "cumulative_eval"], [139, 0, 1, "", "diff"], [140, 0, 1, "", "dot"], [141, 0, 1, "", "drop_nans"], [142, 0, 1, "", "drop_nulls"], [143, 2, 1, "", "dt"], [144, 0, 1, "", "entropy"], [145, 0, 1, "", "ewm_mean"], [146, 0, 1, "", "ewm_std"], [147, 0, 1, "", "ewm_var"], [148, 0, 1, "", "exclude"], [149, 0, 1, "", "exp"], [150, 0, 1, "", "explode"], [151, 0, 1, "", "extend_constant"], [152, 0, 1, "", "fill_nan"], [153, 0, 1, "", "fill_null"], [154, 0, 1, "", "filter"], [155, 0, 1, "", "first"], [156, 0, 1, "", "flatten"], [157, 0, 1, "", "floor"], [158, 0, 1, "", "forward_fill"], [159, 0, 1, "", "hash"], [160, 0, 1, "", "head"], [161, 0, 1, "", "inspect"], [162, 0, 1, "", "interpolate"], [163, 0, 1, "", "is_between"], [164, 0, 1, "", "is_duplicated"], [165, 0, 1, "", "is_finite"], [166, 0, 1, "", "is_first"], [167, 0, 1, "", "is_in"], [168, 0, 1, "", "is_infinite"], [169, 0, 1, "", "is_nan"], [170, 0, 1, "", "is_not"], [171, 0, 1, "", "is_not_nan"], [172, 0, 1, "", "is_not_null"], [173, 0, 1, "", "is_null"], [174, 0, 1, "", "is_unique"], [175, 0, 1, "", "keep_name"], [176, 0, 1, "", "kurtosis"], [177, 0, 1, "", "last"], [178, 0, 1, "", "len"], [179, 0, 1, "", "limit"], [180, 0, 1, "", "list"], [181, 0, 1, "", "log"], [182, 0, 1, "", "log10"], [183, 0, 1, "", "lower_bound"], [184, 0, 1, "", "map"], [185, 0, 1, "", "map_alias"], [186, 0, 1, "", "max"], [187, 0, 1, "", "mean"], [188, 0, 1, "", "median"], [189, 0, 1, "", "min"], [190, 0, 1, "", "mode"], [191, 0, 1, "", "n_unique"], [192, 0, 1, "", "null_count"], [193, 0, 1, "", "over"], [194, 0, 1, "", "pct_change"], [195, 0, 1, "", "pow"], [196, 0, 1, "", "prefix"], [197, 0, 1, "", "product"], [198, 0, 1, "", "quantile"], [199, 0, 1, "", "rank"], [200, 0, 1, "", "rechunk"], [201, 0, 1, "", "reinterpret"], [202, 0, 1, "", "repeat_by"], [203, 0, 1, "", "reshape"], [204, 0, 1, "", "reverse"], [205, 0, 1, "", "rolling_apply"], [206, 0, 1, "", "rolling_max"], [207, 0, 1, "", "rolling_mean"], [208, 0, 1, "", "rolling_median"], [209, 0, 1, "", "rolling_min"], [210, 0, 1, "", "rolling_quantile"], [211, 0, 1, "", "rolling_skew"], [212, 0, 1, "", "rolling_std"], [213, 0, 1, "", "rolling_sum"], [214, 0, 1, "", "rolling_var"], [215, 0, 1, "", "round"], [216, 0, 1, "", "sample"], [217, 0, 1, "", "search_sorted"], [218, 0, 1, "", "set_sorted"], [219, 0, 1, "", "shift"], [220, 0, 1, "", "shift_and_fill"], [221, 0, 1, "", "shuffle"], [222, 0, 1, "", "sign"], [223, 0, 1, "", "sin"], [224, 0, 1, "", "sinh"], [225, 0, 1, "", "skew"], [226, 0, 1, "", "slice"], [227, 0, 1, "", "sort"], [228, 0, 1, "", "sort_by"], [229, 0, 1, "", "sqrt"], [230, 0, 1, "", "std"], [231, 2, 1, "", "str"], [232, 0, 1, "", "suffix"], [233, 0, 1, "", "sum"], [234, 0, 1, "", "tail"], [235, 0, 1, "", "take"], [236, 0, 1, "", "take_every"], [237, 0, 1, "", "tan"], [238, 0, 1, "", "tanh"], [239, 0, 1, "", "to_physical"], [240, 0, 1, "", "top_k"], [241, 0, 1, "", "unique"], [242, 0, 1, "", "unique_counts"], [243, 0, 1, "", "upper_bound"], [244, 0, 1, "", "value_counts"], [245, 0, 1, "", "var"], [246, 0, 1, "", "where"]], "polars.LazyFrame": [[247, 0, 1, "", "cache"], [248, 0, 1, "", "cleared"], [249, 0, 1, "", "clone"], [250, 0, 1, "", "collect"], [759, 2, 1, "", "columns"], [251, 0, 1, "", "describe_optimized_plan"], [252, 0, 1, "", "describe_plan"], [253, 0, 1, "", "drop"], [254, 0, 1, "", "drop_nulls"], [760, 2, 1, "", "dtypes"], [255, 0, 1, "", "explode"], [256, 0, 1, "", "fetch"], [257, 0, 1, "", "fill_nan"], [258, 0, 1, "", "fill_null"], [259, 0, 1, "", "filter"], [260, 0, 1, "", "first"], [261, 0, 1, "", "from_json"], [262, 0, 1, "", "groupby"], [263, 0, 1, "", "groupby_dynamic"], [264, 0, 1, "", "groupby_rolling"], [265, 0, 1, "", "head"], [266, 0, 1, "", "inspect"], [267, 0, 1, "", "interpolate"], [268, 0, 1, "", "join"], [269, 0, 1, "", "join_asof"], [270, 0, 1, "", "last"], [271, 0, 1, "", "limit"], [272, 0, 1, "", "map"], [273, 0, 1, "", "max"], [274, 0, 1, "", "mean"], [275, 0, 1, "", "median"], [276, 0, 1, "", "melt"], [277, 0, 1, "", "min"], [278, 0, 1, "", "pipe"], [279, 0, 1, "", "profile"], [280, 0, 1, "", "quantile"], [281, 0, 1, "", "read_json"], [282, 0, 1, "", "rename"], [283, 0, 1, "", "reverse"], [761, 2, 1, "", "schema"], [284, 0, 1, "", "select"], [285, 0, 1, "", "shift"], [286, 0, 1, "", "shift_and_fill"], [287, 0, 1, "", "show_graph"], [288, 0, 1, "", "slice"], [289, 0, 1, "", "sort"], [290, 0, 1, "", "std"], [291, 0, 1, "", "sum"], [292, 0, 1, "", "tail"], [293, 0, 1, "", "take_every"], [294, 0, 1, "", "unique"], [295, 0, 1, "", "unnest"], [296, 0, 1, "", "var"], [297, 0, 1, "", "with_column"], [298, 0, 1, "", "with_columns"], [299, 0, 1, "", "with_context"], [300, 0, 1, "", "with_row_count"], [301, 0, 1, "", "write_json"]], "polars.Series": [[302, 0, 1, "", "__init__"], [303, 0, 1, "", "abs"], [304, 0, 1, "", "alias"], [305, 0, 1, "", "all"], [306, 0, 1, "", "any"], [307, 0, 1, "", "append"], [308, 0, 1, "", "apply"], [309, 0, 1, "", "arccos"], [310, 0, 1, "", "arccosh"], [311, 0, 1, "", "arcsin"], [312, 0, 1, "", "arcsinh"], [313, 0, 1, "", "arctan"], [314, 0, 1, "", "arctanh"], [315, 0, 1, "", "arg_max"], [316, 0, 1, "", "arg_min"], [317, 0, 1, "", "arg_sort"], [318, 0, 1, "", "arg_true"], [319, 0, 1, "", "arg_unique"], [320, 0, 1, "", "argsort"], [321, 2, 1, "", "arr"], [322, 0, 1, "", "cast"], [323, 2, 1, "", "cat"], [324, 0, 1, "", "ceil"], [325, 0, 1, "", "chunk_lengths"], [326, 0, 1, "", "cleared"], [327, 0, 1, "", "clip"], [328, 0, 1, "", "clip_max"], [329, 0, 1, "", "clip_min"], [330, 0, 1, "", "clone"], [331, 0, 1, "", "cos"], [332, 0, 1, "", "cosh"], [333, 0, 1, "", "cummax"], [334, 0, 1, "", "cummin"], [335, 0, 1, "", "cumprod"], [336, 0, 1, "", "cumsum"], [337, 0, 1, "", "cumulative_eval"], [338, 0, 1, "", "describe"], [339, 0, 1, "", "diff"], [340, 0, 1, "", "dot"], [341, 0, 1, "", "drop_nans"], [342, 0, 1, "", "drop_nulls"], [343, 2, 1, "", "dt"], [344, 2, 1, "", "dtype"], [345, 0, 1, "", "entropy"], [346, 0, 1, "", "estimated_size"], [347, 0, 1, "", "ewm_mean"], [348, 0, 1, "", "ewm_std"], [349, 0, 1, "", "ewm_var"], [350, 0, 1, "", "exp"], [351, 0, 1, "", "explode"], [352, 0, 1, "", "extend_constant"], [353, 0, 1, "", "fill_nan"], [354, 0, 1, "", "fill_null"], [355, 0, 1, "", "filter"], [356, 2, 1, "", "flags"], [357, 0, 1, "", "floor"], [358, 0, 1, "", "has_validity"], [359, 0, 1, "", "hash"], [360, 0, 1, "", "head"], [361, 2, 1, "", "inner_dtype"], [362, 0, 1, "", "interpolate"], [363, 0, 1, "", "is_boolean"], [364, 0, 1, "", "is_datelike"], [365, 0, 1, "", "is_duplicated"], [366, 0, 1, "", "is_empty"], [367, 0, 1, "", "is_finite"], [368, 0, 1, "", "is_first"], [369, 0, 1, "", "is_float"], [370, 0, 1, "", "is_in"], [371, 0, 1, "", "is_infinite"], [372, 0, 1, "", "is_nan"], [373, 0, 1, "", "is_not_nan"], [374, 0, 1, "", "is_not_null"], [375, 0, 1, "", "is_null"], [376, 0, 1, "", "is_numeric"], [377, 0, 1, "", "is_unique"], [378, 0, 1, "", "is_utf8"], [379, 0, 1, "", "kurtosis"], [380, 0, 1, "", "len"], [381, 0, 1, "", "limit"], [382, 0, 1, "", "log"], [383, 0, 1, "", "log10"], [384, 0, 1, "", "max"], [385, 0, 1, "", "mean"], [386, 0, 1, "", "median"], [387, 0, 1, "", "min"], [388, 0, 1, "", "mode"], [389, 0, 1, "", "n_chunks"], [390, 0, 1, "", "n_unique"], [391, 2, 1, "", "name"], [392, 0, 1, "", "null_count"], [393, 0, 1, "", "pct_change"], [394, 0, 1, "", "peak_max"], [395, 0, 1, "", "peak_min"], [396, 0, 1, "", "product"], [397, 0, 1, "", "quantile"], [398, 0, 1, "", "rank"], [399, 0, 1, "", "rechunk"], [400, 0, 1, "", "reinterpret"], [401, 0, 1, "", "rename"], [402, 0, 1, "", "reshape"], [403, 0, 1, "", "reverse"], [404, 0, 1, "", "rolling_apply"], [405, 0, 1, "", "rolling_max"], [406, 0, 1, "", "rolling_mean"], [407, 0, 1, "", "rolling_median"], [408, 0, 1, "", "rolling_min"], [409, 0, 1, "", "rolling_quantile"], [410, 0, 1, "", "rolling_skew"], [411, 0, 1, "", "rolling_std"], [412, 0, 1, "", "rolling_sum"], [413, 0, 1, "", "rolling_var"], [414, 0, 1, "", "round"], [415, 0, 1, "", "sample"], [416, 0, 1, "", "search_sorted"], [417, 0, 1, "", "series_equal"], [418, 0, 1, "", "set"], [419, 0, 1, "", "set_at_idx"], [420, 0, 1, "", "set_sorted"], [421, 2, 1, "", "shape"], [422, 0, 1, "", "shift"], [423, 0, 1, "", "shift_and_fill"], [424, 0, 1, "", "shrink_to_fit"], [425, 0, 1, "", "shuffle"], [426, 0, 1, "", "sign"], [427, 0, 1, "", "sin"], [428, 0, 1, "", "sinh"], [429, 0, 1, "", "skew"], [430, 0, 1, "", "slice"], [431, 0, 1, "", "sort"], [432, 0, 1, "", "sqrt"], [433, 0, 1, "", "std"], [434, 2, 1, "", "str"], [435, 0, 1, "", "sum"], [436, 0, 1, "", "tail"], [437, 0, 1, "", "take"], [438, 0, 1, "", "take_every"], [439, 0, 1, "", "tan"], [440, 0, 1, "", "tanh"], [441, 2, 1, "", "time_unit"], [442, 0, 1, "", "to_arrow"], [443, 0, 1, "", "to_dummies"], [444, 0, 1, "", "to_frame"], [445, 0, 1, "", "to_list"], [446, 0, 1, "", "to_numpy"], [447, 0, 1, "", "to_pandas"], [448, 0, 1, "", "to_physical"], [449, 0, 1, "", "top_k"], [450, 0, 1, "", "unique"], [451, 0, 1, "", "unique_counts"], [452, 0, 1, "", "value_counts"], [453, 0, 1, "", "var"], [454, 0, 1, "", "view"], [455, 0, 1, "", "zip_with"]], "polars.StringCache": [[456, 0, 1, "", "__init__"]], "polars.datatypes": [[472, 1, 1, "", "Boolean"], [473, 1, 1, "", "Categorical"], [474, 1, 1, "", "DataType"], [475, 1, 1, "", "Date"], [476, 1, 1, "", "Datetime"], [477, 1, 1, "", "Duration"], [478, 1, 1, "", "Float32"], [479, 1, 1, "", "Float64"], [480, 1, 1, "", "Int16"], [481, 1, 1, "", "Int32"], [482, 1, 1, "", "Int64"], [483, 1, 1, "", "Int8"], [484, 1, 1, "", "List"], [485, 1, 1, "", "Null"], [486, 1, 1, "", "Object"], [487, 1, 1, "", "Struct"], [488, 1, 1, "", "Time"], [489, 1, 1, "", "UInt16"], [490, 1, 1, "", "UInt32"], [491, 1, 1, "", "UInt64"], [492, 1, 1, "", "UInt8"], [493, 1, 1, "", "Unknown"], [494, 1, 1, "", "Utf8"], [495, 3, 1, "", "get_idx_type"]], "polars.datatypes.Boolean": [[472, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[473, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[474, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[475, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[476, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[477, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[478, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[479, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[480, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[481, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[482, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[483, 0, 1, "", "__init__"]], "polars.datatypes.List": [[484, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[485, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[486, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[487, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[488, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[489, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[490, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[491, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[492, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[493, 0, 1, "", "__init__"]], "polars.datatypes.Utf8": [[494, 0, 1, "", "__init__"]], "polars.exceptions": [[501, 4, 1, "", "ArrowError"], [502, 4, 1, "", "ComputeError"], [503, 4, 1, "", "DuplicateError"], [504, 4, 1, "", "NoDataError"], [505, 4, 1, "", "NoRowsReturned"], [506, 4, 1, "", "NotFoundError"], [507, 4, 1, "", "PanicException"], [508, 4, 1, "", "RowsException"], [509, 4, 1, "", "SchemaError"], [510, 4, 1, "", "ShapeError"], [511, 4, 1, "", "TooManyRowsReturned"]], "polars.internals.dataframe.groupby.GroupBy": [[525, 0, 1, "", "agg"], [526, 0, 1, "", "agg_list"], [527, 0, 1, "", "apply"], [528, 0, 1, "", "count"], [529, 0, 1, "", "first"], [530, 0, 1, "", "head"], [531, 0, 1, "", "last"], [532, 0, 1, "", "max"], [533, 0, 1, "", "mean"], [534, 0, 1, "", "median"], [535, 0, 1, "", "min"], [536, 0, 1, "", "n_unique"], [537, 0, 1, "", "pivot"], [538, 0, 1, "", "quantile"], [539, 0, 1, "", "sum"], [540, 0, 1, "", "tail"]], "polars.internals.dataframe.pivot.PivotOps": [[541, 0, 1, "", "count"], [542, 0, 1, "", "first"], [543, 0, 1, "", "last"], [544, 0, 1, "", "max"], [545, 0, 1, "", "mean"], [546, 0, 1, "", "median"], [547, 0, 1, "", "min"], [548, 0, 1, "", "sum"]], "polars.internals.expr.categorical.ExprCatNameSpace": [[549, 0, 1, "", "set_ordering"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace": [[550, 0, 1, "", "cast_time_unit"], [551, 0, 1, "", "day"], [552, 0, 1, "", "days"], [553, 0, 1, "", "epoch"], [554, 0, 1, "", "hour"], [555, 0, 1, "", "hours"], [556, 0, 1, "", "iso_year"], [557, 0, 1, "", "milliseconds"], [558, 0, 1, "", "minute"], [559, 0, 1, "", "minutes"], [560, 0, 1, "", "month"], [561, 0, 1, "", "nanosecond"], [562, 0, 1, "", "nanoseconds"], [563, 0, 1, "", "offset_by"], [564, 0, 1, "", "ordinal_day"], [565, 0, 1, "", "quarter"], [566, 0, 1, "", "second"], [567, 0, 1, "", "seconds"], [568, 0, 1, "", "strftime"], [569, 0, 1, "", "timestamp"], [570, 0, 1, "", "truncate"], [571, 0, 1, "", "week"], [572, 0, 1, "", "weekday"], [573, 0, 1, "", "with_time_unit"], [574, 0, 1, "", "year"]], "polars.internals.expr.list.ExprListNameSpace": [[575, 0, 1, "", "arg_max"], [576, 0, 1, "", "arg_min"], [577, 0, 1, "", "concat"], [578, 0, 1, "", "contains"], [579, 0, 1, "", "diff"], [580, 0, 1, "", "eval"], [581, 0, 1, "", "first"], [582, 0, 1, "", "get"], [583, 0, 1, "", "head"], [584, 0, 1, "", "join"], [585, 0, 1, "", "last"], [586, 0, 1, "", "lengths"], [587, 0, 1, "", "max"], [588, 0, 1, "", "mean"], [589, 0, 1, "", "min"], [590, 0, 1, "", "reverse"], [591, 0, 1, "", "shift"], [592, 0, 1, "", "slice"], [593, 0, 1, "", "sort"], [594, 0, 1, "", "sum"], [595, 0, 1, "", "tail"], [596, 0, 1, "", "to_struct"], [597, 0, 1, "", "unique"]], "polars.internals.expr.meta.ExprMetaNameSpace": [[598, 0, 1, "", "output_name"], [599, 0, 1, "", "pop"], [600, 0, 1, "", "root_names"], [601, 0, 1, "", "undo_aliases"]], "polars.internals.expr.string.ExprStringNameSpace": [[602, 0, 1, "", "concat"], [603, 0, 1, "", "contains"], [604, 0, 1, "", "count_match"], [605, 0, 1, "", "decode"], [606, 0, 1, "", "encode"], [607, 0, 1, "", "ends_with"], [608, 0, 1, "", "extract"], [609, 0, 1, "", "extract_all"], [610, 0, 1, "", "json_path_match"], [611, 0, 1, "", "lengths"], [612, 0, 1, "", "ljust"], [613, 0, 1, "", "lstrip"], [614, 0, 1, "", "replace"], [615, 0, 1, "", "replace_all"], [616, 0, 1, "", "rjust"], [617, 0, 1, "", "rstrip"], [618, 0, 1, "", "slice"], [619, 0, 1, "", "split"], [620, 0, 1, "", "split_exact"], [621, 0, 1, "", "splitn"], [622, 0, 1, "", "starts_with"], [623, 0, 1, "", "strip"], [624, 0, 1, "", "strptime"], [625, 0, 1, "", "to_lowercase"], [626, 0, 1, "", "to_uppercase"], [627, 0, 1, "", "zfill"]], "polars.internals.expr.struct.ExprStructNameSpace": [[628, 0, 1, "", "field"], [629, 0, 1, "", "rename_fields"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[630, 0, 1, "", "agg"], [631, 0, 1, "", "apply"], [632, 0, 1, "", "head"], [633, 0, 1, "", "tail"]], "polars.internals.series.categorical.CatNameSpace": [[634, 0, 1, "", "set_ordering"]], "polars.internals.series.datetime.DateTimeNameSpace": [[635, 0, 1, "", "cast_time_unit"], [636, 0, 1, "", "day"], [637, 0, 1, "", "days"], [638, 0, 1, "", "epoch"], [639, 0, 1, "", "hour"], [640, 0, 1, "", "hours"], [641, 0, 1, "", "iso_year"], [642, 0, 1, "", "max"], [643, 0, 1, "", "mean"], [644, 0, 1, "", "median"], [645, 0, 1, "", "milliseconds"], [646, 0, 1, "", "min"], [647, 0, 1, "", "minute"], [648, 0, 1, "", "minutes"], [649, 0, 1, "", "month"], [650, 0, 1, "", "nanosecond"], [651, 0, 1, "", "nanoseconds"], [652, 0, 1, "", "offset_by"], [653, 0, 1, "", "ordinal_day"], [654, 0, 1, "", "quarter"], [655, 0, 1, "", "second"], [656, 0, 1, "", "seconds"], [657, 0, 1, "", "strftime"], [658, 0, 1, "", "timestamp"], [659, 0, 1, "", "truncate"], [660, 0, 1, "", "week"], [661, 0, 1, "", "weekday"], [662, 0, 1, "", "with_time_unit"], [663, 0, 1, "", "year"]], "polars.internals.series.list.ListNameSpace": [[664, 0, 1, "", "arg_max"], [665, 0, 1, "", "arg_min"], [666, 0, 1, "", "concat"], [667, 0, 1, "", "contains"], [668, 0, 1, "", "diff"], [669, 0, 1, "", "eval"], [670, 0, 1, "", "first"], [671, 0, 1, "", "get"], [672, 0, 1, "", "head"], [673, 0, 1, "", "join"], [674, 0, 1, "", "last"], [675, 0, 1, "", "lengths"], [676, 0, 1, "", "max"], [677, 0, 1, "", "mean"], [678, 0, 1, "", "min"], [679, 0, 1, "", "reverse"], [680, 0, 1, "", "shift"], [681, 0, 1, "", "slice"], [682, 0, 1, "", "sort"], [683, 0, 1, "", "sum"], [684, 0, 1, "", "tail"], [685, 0, 1, "", "unique"]], "polars.internals.series.string.StringNameSpace": [[686, 0, 1, "", "concat"], [687, 0, 1, "", "contains"], [688, 0, 1, "", "count_match"], [689, 0, 1, "", "decode"], [690, 0, 1, "", "encode"], [691, 0, 1, "", "ends_with"], [692, 0, 1, "", "extract"], [693, 0, 1, "", "extract_all"], [694, 0, 1, "", "json_path_match"], [695, 0, 1, "", "lengths"], [696, 0, 1, "", "ljust"], [697, 0, 1, "", "lstrip"], [698, 0, 1, "", "replace"], [699, 0, 1, "", "replace_all"], [700, 0, 1, "", "rjust"], [701, 0, 1, "", "rstrip"], [702, 0, 1, "", "slice"], [703, 0, 1, "", "split"], [704, 0, 1, "", "split_exact"], [705, 0, 1, "", "splitn"], [706, 0, 1, "", "starts_with"], [707, 0, 1, "", "strip"], [708, 0, 1, "", "strptime"], [709, 0, 1, "", "to_lowercase"], [710, 0, 1, "", "to_uppercase"], [711, 0, 1, "", "zfill"]], "polars.internals.series.struct.StructNameSpace": [[712, 0, 1, "", "field"], [713, 2, 1, "", "fields"], [714, 0, 1, "", "rename_fields"], [715, 0, 1, "", "to_frame"]], "polars.testing": [[749, 3, 1, "", "assert_frame_equal"], [750, 3, 1, "", "assert_series_equal"], [751, 1, 1, "", "column"], [752, 3, 1, "", "columns"], [753, 3, 1, "", "dataframes"], [754, 3, 1, "", "series"]], "polars.testing.column": [[751, 0, 1, "", "__init__"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:property", "3": "py:function", "4": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"]}, "titleterms": {"polar": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761], "config": [1, 2, 3, 4, 5, 6, 7, 8, 762, 767], "set_ascii_t": 1, "set_fmt_str_length": 2, "set_global_string_cach": 3, "set_tbl_col": 4, "set_tbl_row": 5, "set_tbl_width_char": 6, "set_utf8_t": 7, "unset_global_string_cach": 8, "datafram": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 753, 763], "appli": [10, 110, 308, 459, 527, 631, 763, 766, 770], "clear": [11, 248, 326], "clone": [12, 249, 330], "column": [13, 751, 752, 759, 766], "describ": [14, 338], "drop": [15, 253], "drop_in_plac": 16, "drop_nul": [17, 142, 254, 342], "dtype": [18, 344, 760], "estimated_s": [19, 346], "explod": [20, 150, 255, 351], "extend": 21, "fill_nan": [22, 152, 257, 353], "fill_nul": [23, 153, 258, 354], "filter": [24, 154, 259, 355], "find_idx_by_nam": 25, "fold": [26, 514], "frame_equ": 27, "get_column": [28, 29], "groupbi": [30, 262, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 630, 631, 632, 633, 763, 770], "groupby_dynam": [31, 263], "groupby_rol": [32, 264], "hash_row": 33, "head": [34, 160, 265, 360, 524, 530, 583, 632, 672], "height": 35, "hstack": 36, "insert_at_idx": 37, "interpol": [38, 162, 267, 362], "is_dupl": [39, 164, 365], "is_empti": [40, 366], "is_uniqu": [41, 174, 377], "join": [42, 268, 584, 673], "join_asof": [43, 269], "lazi": [44, 767], "limit": [45, 179, 271, 381], "max": [46, 186, 273, 384, 532, 544, 587, 642, 676, 719], "mean": [47, 187, 274, 385, 533, 545, 588, 643, 677, 720], "median": [48, 188, 275, 386, 534, 546, 644, 721], "melt": [49, 276], "min": [50, 189, 277, 387, 535, 547, 589, 646, 678, 722], "n_chunk": [51, 389], "null_count": [52, 192, 392], "partition_bi": 53, "pipe": [54, 278], "pivot": [55, 537, 541, 542, 543, 544, 545, 546, 547, 548, 763], "product": [56, 197, 396], "quantil": [57, 198, 280, 397, 538, 725], "rechunk": [58, 200, 399], "renam": [59, 282, 401], "replac": [60, 614, 698], "replace_at_idx": 61, "revers": [62, 204, 283, 403, 590, 679], "row": [63, 64], "sampl": [65, 216, 415], "schema": [66, 761], "select": [67, 284, 742, 763, 766, 770, 771], "shape": [68, 421], "shift": [69, 219, 285, 422, 591, 680], "shift_and_fil": [70, 220, 286, 423], "shrink_to_fit": [71, 424], "slice": [72, 226, 288, 430, 592, 618, 681, 702], "sort": [73, 227, 289, 431, 593, 682], "std": [74, 230, 290, 433, 745], "sum": [75, 233, 291, 435, 539, 548, 594, 683, 747], "tail": [76, 234, 292, 436, 540, 595, 633, 684, 748], "take_everi": [77, 236, 293, 438], "to_arrow": [78, 442], "to_dict": [79, 80], "to_dummi": [81, 443], "to_numpi": [82, 446], "to_panda": [83, 447], "to_seri": 84, "to_struct": [85, 596], "transpos": 86, "uniqu": [87, 241, 294, 450, 597, 685], "unnest": [88, 295], "unstack": 89, "upsampl": 90, "var": [91, 245, 296, 453, 757], "vstack": 92, "width": 93, "with_column": [94, 95, 297, 298], "with_row_count": [96, 300], "write_avro": 97, "write_csv": 98, "write_ipc": 99, "write_json": [100, 301], "write_ndjson": 101, "write_parquet": 102, "expr": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629], "ab": [104, 303], "agg_group": 105, "alia": [106, 304], "all": [107, 305, 457], "ani": [108, 306, 458], "append": [109, 307], "arcco": [111, 309], "arccosh": [112, 310], "arcsin": [113, 311], "arcsinh": [114, 312], "arctan": [115, 313], "arctanh": [116, 314], "arg_max": [117, 315, 575, 664], "arg_min": [118, 316, 576, 665], "arg_sort": [119, 317], "arg_uniqu": [120, 319], "argsort": [121, 320], "arr": [122, 321], "backward_fil": 123, "cast": [124, 322], "cat": [125, 323], "ceil": [126, 324], "clip": [127, 327], "clip_max": [128, 328], "clip_min": [129, 329], "co": [130, 331], "cosh": [131, 332], "count": [132, 469, 528, 541], "cumcount": 133, "cummax": [134, 333], "cummin": [135, 334], "cumprod": [136, 335], "cumsum": [137, 336], "cumulative_ev": [138, 337], "diff": [139, 339, 579, 668], "dot": [140, 340], "drop_nan": [141, 341], "dt": [143, 343], "entropi": [144, 345], "ewm_mean": [145, 347], "ewm_std": [146, 348], "ewm_var": [147, 349], "exclud": [148, 512], "exp": [149, 350], "extend_const": [151, 352], "first": [155, 260, 513, 529, 542, 581, 670], "flatten": 156, "floor": [157, 357], "forward_fil": 158, "hash": [159, 359], "inspect": [161, 266], "is_between": 163, "is_finit": [165, 367], "is_first": [166, 368], "is_in": [167, 370], "is_infinit": [168, 371], "is_nan": [169, 372], "is_not": 170, "is_not_nan": [171, 373], "is_not_nul": [172, 374], "is_nul": [173, 375], "keep_nam": 175, "kurtosi": [176, 379], "last": [177, 270, 531, 543, 585, 674], "len": [178, 380], "list": [180, 484, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 716, 766, 771], "log": [181, 382], "log10": [182, 383], "lower_bound": 183, "map": [184, 272, 718], "map_alia": 185, "mode": [190, 388], "n_uniqu": [191, 390, 536, 723], "over": 193, "pct_chang": [194, 393], "pow": 195, "prefix": 196, "rank": [199, 398], "reinterpret": [201, 400], "repeat_bi": 202, "reshap": [203, 402], "rolling_appli": [205, 404], "rolling_max": [206, 405], "rolling_mean": [207, 406], "rolling_median": [208, 407], "rolling_min": [209, 408], "rolling_quantil": [210, 409], "rolling_skew": [211, 410], "rolling_std": [212, 411], "rolling_sum": [213, 412], "rolling_var": [214, 413], "round": [215, 414], "search_sort": [217, 416], "set_sort": [218, 420], "shuffl": [221, 425], "sign": [222, 426], "sin": [223, 427], "sinh": [224, 428], "skew": [225, 429], "sort_bi": 228, "sqrt": [229, 432], "str": [231, 434], "suffix": 232, "take": [235, 437], "tan": [237, 439], "tanh": [238, 440], "to_phys": [239, 448], "top_k": [240, 449], "unique_count": [242, 451], "upper_bound": 243, "value_count": [244, 452], "where": 246, "lazyfram": [247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 630, 631, 632, 633, 759, 760, 761, 770], "cach": 247, "collect": 250, "describe_optimized_plan": 251, "describe_plan": 252, "fetch": 256, "from_json": 261, "profil": 279, "read_json": [281, 731], "show_graph": 287, "with_context": 299, "seri": [302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 754, 771], "arg_tru": 318, "chunk_length": 325, "flag": 356, "has_valid": 358, "inner_dtyp": 361, "is_boolean": 363, "is_datelik": 364, "is_float": 369, "is_numer": 376, "is_utf8": 378, "name": [391, 766], "peak_max": 394, "peak_min": 395, "series_equ": 417, "set": 418, "set_at_idx": 419, "time_unit": 441, "to_fram": [444, 715], "to_list": 445, "view": 454, "zip_with": 455, "stringcach": 456, "arang": 460, "arg_wher": 461, "argsort_bi": 462, "avg": 463, "col": 464, "collect_al": 465, "concat": [466, 577, 602, 666, 686], "concat_list": 467, "concat_str": 468, "cov": 470, "cut": 471, "datatyp": [472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495], "boolean": [472, 766, 771], "categor": [473, 549, 634], "date": [475, 496, 764], "datetim": [476, 498, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663], "durat": [477, 499], "float32": 478, "float64": 479, "int16": 480, "int32": 481, "int64": 482, "int8": 483, "null": 485, "object": 486, "struct": [487, 628, 629, 712, 713, 714, 715, 746, 766, 771], "time": [488, 764], "uint16": 489, "uint32": 490, "uint64": 491, "uint8": 492, "unknown": 493, "utf8": 494, "get_idx_typ": 495, "date_rang": 497, "element": 500, "except": [501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 765], "arrowerror": 501, "computeerror": 502, "duplicateerror": 503, "nodataerror": 504, "norowsreturn": 505, "notfounderror": 506, "panicexcept": 507, "rowsexcept": 508, "schemaerror": 509, "shapeerror": 510, "toomanyrowsreturn": 511, "format": 515, "from_arrow": 516, "from_dict": [517, 518], "from_numpi": 519, "from_panda": 520, "from_record": 521, "get_dummi": 522, "group": 523, "intern": [525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715], "agg": [525, 630], "agg_list": 526, "pivotop": [541, 542, 543, 544, 545, 546, 547, 548], "exprcatnamespac": 549, "set_ord": [549, 634], "exprdatetimenamespac": [550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574], "cast_time_unit": [550, 635], "dai": [551, 552, 636, 637], "epoch": [553, 638], "hour": [554, 555, 639, 640], "iso_year": [556, 641], "millisecond": [557, 645], "minut": [558, 559, 647, 648], "month": [560, 649], "nanosecond": [561, 562, 650, 651], "offset_bi": [563, 652], "ordinal_dai": [564, 653], "quarter": [565, 654], "second": [566, 567, 655, 656], "strftime": [568, 657], "timestamp": [569, 658], "truncat": [570, 659], "week": [571, 660], "weekdai": [572, 661], "with_time_unit": [573, 662], "year": [574, 663], "exprlistnamespac": [575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597], "contain": [578, 603, 667, 687], "eval": [580, 669], "get": [582, 671], "length": [586, 611, 675, 695], "meta": [598, 599, 600, 601, 766], "exprmetanamespac": [598, 599, 600, 601], "output_nam": 598, "pop": 599, "root_nam": 600, "undo_alias": 601, "string": [602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 766, 771], "exprstringnamespac": [602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627], "count_match": [604, 688], "decod": [605, 689], "encod": [606, 690], "ends_with": [607, 691], "extract": [608, 692], "extract_al": [609, 693], "json_path_match": [610, 694], "ljust": [612, 696], "lstrip": [613, 697], "replace_al": [615, 699], "rjust": [616, 700], "rstrip": [617, 701], "split": [619, 703], "split_exact": [620, 704], "splitn": [621, 705], "starts_with": [622, 706], "strip": [623, 707], "strptime": [624, 708], "to_lowercas": [625, 709], "to_uppercas": [626, 710], "zfill": [627, 711], "exprstructnamespac": [628, 629], "field": [628, 712, 713], "rename_field": [629, 714], "lazygroupbi": [630, 631, 632, 633], "catnamespac": 634, "datetimenamespac": [635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663], "listnamespac": [664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685], "stringnamespac": [686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711], "structnamespac": [712, 713, 714, 715], "lit": 717, "pearson_corr": 724, "read_avro": 726, "read_csv": 727, "read_excel": 728, "read_ipc": 729, "read_ipc_schema": 730, "read_ndjson": 732, "read_parquet": 733, "read_parquet_schema": 734, "read_sql": 735, "repeat": 736, "scan_csv": 737, "scan_d": 738, "scan_ipc": 739, "scan_ndjson": 740, "scan_parquet": 741, "show_vers": 743, "spearman_rank_corr": 744, "test": [749, 750, 751, 752, 753, 754, 772], "assert_frame_equ": 749, "assert_series_equ": 750, "threadpool_s": 755, "toggle_string_cach": 756, "when": 758, "constructor": [763, 766, 771], "attribut": [763, 766, 770, 771], "convers": [763, 767, 770, 771], "aggreg": [763, 766, 770, 771], "descript": [763, 770, 771], "stat": [763, 770, 771], "comput": [763, 766, 771], "manipul": [763, 766, 770, 771], "variou": [763, 766, 770, 771], "data": 764, "type": 764, "numer": 764, "nest": 764, "other": 764, "function": [764, 766, 767], "express": 766, "window": 766, "timeseri": [766, 771], "categori": [766, 771], "eager": 767, "parallel": 767, "api": 768, "refer": 768, "input": 769, "output": 769, "csv": 769, "feather": 769, "ipc": 769, "parquet": 769, "sql": 769, "json": 769, "avro": 769, "excel": 769, "dataset": 769, "assert": 772, "properti": 772, "base": 772, "strategi": 772, "helper": 772, "util": 773}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 56}})